{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HardView - Python Hardware Information Module","text":"<p>HardView is a high-performance, cross-platform Python module that provides detailed hardware and system information in structured JSON format. It supports both Windows (via WMI) and Linux (via sysfs/proc), and now includes advanced storage/SMART info and real-time performance monitoring.</p>"},{"location":"#key-features","title":"\ud83d\udd11 Key Features","text":"<ul> <li>\ud83d\udda5\ufe0f Comprehensive Hardware Data: BIOS, System, Baseboard, Chassis, CPU, RAM, Disks, Network.</li> <li>\ud83c\udfd7\ufe0f Advanced Storage &amp; SMART: Detailed disk, partition, and SMART attributes.</li> <li>\ud83d\udcca Performance Monitoring: Real-time and interval-based CPU, RAM, and system performance.</li> <li>\ud83d\udda5\ufe0f Cross-Platform: Works on Windows (WMI) and Linux (sysfs/proc).</li> <li>\u26a1 C Implementation: High performance native code.</li> <li>\ud83d\udc0d Python Integration: Easy-to-use Python API.</li> <li>\ud83e\udde9 Modular Design: Extensible and well-documented.</li> <li>\ud83d\udcdd Structured Output: All results are returned as JSON strings or Python objects.</li> </ul>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"#from-pypi","title":"From PyPI","text":"<pre><code>pip install hardview\n</code></pre>"},{"location":"#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/gafoo173/hardview.git\ncd hardview\npip install .\n</code></pre> <p>For supported platforms and full setup instructions, see <code>docs/INSTALL.md</code>.</p>"},{"location":"#usage-example","title":"\ud83d\ude80 Usage Example","text":"<pre><code>import HardView\nimport json\n\n# JSON output\nbios_json = HardView.get_bios_info()\ncpu_json = HardView.get_cpu_info()\n\n# Python objects output\n#You must pass the parameter `false` in versions prior to 3.0.3, e.g. `HardView.get_bios_info_objects(false)`.\n\nbios_objects = HardView.get_bios_info_objects() \ncpu_objects = HardView.get_cpu_info_objects()\n\n# Performance monitoring\ncpu_usage_json = HardView.get_cpu_usage()\nram_usage_objects = HardView.get_ram_usage_objects()\n\n# Monitor over time\ncpu_monitor_json = HardView.monitor_cpu_usage_duration(5, 1000)\nram_monitor_objects = HardView.monitor_ram_usage_duration_objects(3, 500)\n\n# Pretty print CPU info\nimport pprint\npprint.pprint(json.loads(cpu_json))\n</code></pre>"},{"location":"#api-reference-summary","title":"\ud83d\udcd6 API Reference (Summary)","text":"Function (JSON) Function (Python Object) Description <code>get_bios_info()</code> <code>get_bios_info_objects()</code> BIOS vendor, version, release date <code>get_system_info()</code> <code>get_system_info_objects()</code> System manufacturer, product name, UUID <code>get_baseboard_info()</code> <code>get_baseboard_info_objects()</code> Motherboard info <code>get_chassis_info()</code> <code>get_chassis_info_objects()</code> Chassis/computer case info <code>get_cpu_info()</code> <code>get_cpu_info_objects()</code> Processor details <code>get_ram_info()</code> <code>get_ram_info_objects()</code> Memory modules and totals <code>get_gpu_info</code> <code>get_gpu_info_objects()</code> GPU information <code>get_disk_info()</code> <code>get_disk_info_objects()</code> Storage devices <code>get_network_info()</code> <code>get_network_info_objects()</code> Network adapters <code>get_partitions_info()</code> <code>get_partitions_info_objects()</code> Disk partitions (advanced) <code>get_smart_info()</code> <code>get_smart_info_objects()</code> Full disk/SMART info (advanced) <code>get_cpu_usage()</code> <code>get_cpu_usage_objects()</code> Current CPU usage <code>get_ram_usage()</code> <code>get_ram_usage_objects()</code> Current RAM usage <code>get_system_performance()</code> <code>get_system_performance_objects()</code> Combined CPU/RAM usage <code>monitor_cpu_usage_duration(d, i)</code> <code>monitor_cpu_usage_duration_objects(d,i)</code> Monitor CPU usage over time <code>monitor_ram_usage_duration(d, i)</code> <code>monitor_ram_usage_duration_objects(d,i)</code> Monitor RAM usage over time <code>monitor_system_performance_duration(d,i)</code> <code>monitor_system_performance_duration_objects(d,i)</code> Monitor system performance over time"},{"location":"#platform-support","title":"\ud83e\uddea Platform Support","text":"Feature Windows Linux BIOS Info \u2705 \u2705 System Info \u2705 \u2705 Baseboard Info \u2705 \u2705 Chassis Info \u2705 \u2705 CPU Info \u2705 \u2705 RAM Info \u2705 \u2705 Disks \u2705 \u2705 Network \u2705 \u2705 Advanced Storage / SMART \u2705 \ud83d\udeab Performance Monitoring \u2705 \u2705"},{"location":"BENCHMARKS/","title":"\u26a1 HardView Benchmarks &amp; Comparisons","text":"<p>This document presents feature comparisons and qualitative performance notes between HardView and other popular Python hardware/system info libraries.</p>"},{"location":"BENCHMARKS/#1-why-is-hardview-faster","title":"1. \ud83d\ude80 Why is HardView Faster?","text":"<ul> <li>Written entirely in C and interacts directly with system APIs (WMI/Win32 on Windows, sysfs/proc on Linux).</li> <li>Competing libraries (e.g., <code>psutil</code>, <code>wmi</code>, <code>py-cpuinfo</code>) are Python-based or wrappers, adding overhead.</li> <li>Optimized for batch queries and returns all results as JSON strings or Python objects.</li> <li>Performs especially well with large or repeated hardware queries.</li> </ul>"},{"location":"BENCHMARKS/#2-feature-coverage-comparison","title":"2. \ud83d\udccb Feature Coverage Comparison","text":"Feature / Library HardView psutil wmi (pywin32) py-cpuinfo platform dmidecode (Linux) BIOS Info \u2705 \u274c \u274c \u274c \u274c \u2705 System Info \u2705 \u274c \u2705 \u274c \u2705 \u2705 Baseboard Info \u2705 \u274c \u274c \u274c \u274c \u2705 Chassis Info \u2705 \u274c \u274c \u274c \u274c \u2705 CPU Info (detailed) \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 GPU Info (detailed) \u2705 \u274c \u2705 \u274c \u274c \u274c RAM Info (modules) \u2705 \u2705 \u274c \u274c \u274c \u2705 Disk Info (detailed) \u2705 \u2705 \u2705 \u274c \u274c \u2705 Partitions Info \u2705 \u2705 \u274c \u274c \u274c \u2705 SMART/Advanced Storage \u2705 \u274c \u274c \u274c \u274c \u274c Network Info (detailed) \u2705 \u2705 \u2705 \u274c \u274c \u274c Real-time CPU Usage \u2705 \u2705 \u274c \u274c \u274c \u274c Real-time RAM Usage \u2705 \u2705 \u274c \u274c \u274c \u274c System Performance Monitor \u2705 \u2705 \u274c \u274c \u274c \u274c JSON Output \u2705 \u274c \u274c \u274c \u274c \u274c Python Object Output \u2705 \u2705 \u2705 \u2705 \u2705 \u274c Cross-Platform \u2705 \u2705 Windows only All All Linux only Native C Speed \u2705 \u2705 \u274c \u274c \u274c \u274c"},{"location":"BENCHMARKS/#3-qualitative-performance-notes","title":"3. \ud83d\udcc8 Qualitative Performance Notes","text":"<ul> <li>HardView is consistently faster due to its C backend and direct system access.</li> <li>Most operations complete in &lt; 0.5s, some even in &lt; 1 ms.</li> <li>HardView and dmidecode are the only tools providing full BIOS/baseboard/chassis info on Linux.</li> <li>Only HardView offers SMART data, detailed GPU info, and real-time monitoring in one API.</li> <li>Supports both JSON and Python objects, making it easy to integrate.</li> </ul>"},{"location":"BENCHMARKS/#4-when-to-use-hardview","title":"4. \u2705 When to Use HardView?","text":"<p>Use HardView if:</p> <ul> <li>You need detailed and accurate hardware info (BIOS, SMART, GPU, etc.).</li> <li>You require fast queries and native C speed.</li> <li>You want real-time performance monitoring.</li> <li>You prefer structured JSON or Python object outputs.</li> <li>You want a single cross-platform solution for both Windows and Linux.</li> </ul>"},{"location":"BENCHMARKS/#5-see-also","title":"5. \ud83d\udcda See Also","text":"<ul> <li><code>What.md</code>: Full API and output examples</li> </ul> <p>HardView: The fastest, most complete hardware info library for Python.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"\ud83d\udcdc Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#303-hotfix-release","title":"[3.0.3] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights","title":"Highlights:","text":"<ul> <li>Fixed the default value error in the objects functions that was causing them to return JSON when false was not explicitly specified.</li> <li>API Update 3.0.2</li> </ul>"},{"location":"CHANGELOG/#302-hotfix-release","title":"[3.0.2] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_1","title":"Highlights:","text":"<ul> <li>Fixed an issue where the CPU architecture property was returning <code>N/A</code>.</li> <li>Fixed a bug in GPU information retrieval on Linux that caused it to always appear empty.</li> <li>API Update 3.0.1</li> </ul>"},{"location":"CHANGELOG/#301-hotfix-release","title":"[3.0.1] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_2","title":"Highlights:","text":"<ul> <li>Fixed packaging issues that caused PyPI upload failures in version <code>3.0.0</code>.</li> <li>Fix RECORD file missing error in pypi wheels.</li> <li>No changes to functionality or API.</li> </ul>"},{"location":"CHANGELOG/#300-major-release","title":"[3.0.0] - Major Release","text":""},{"location":"CHANGELOG/#highlights_3","title":"Highlights:","text":"<ul> <li> <p>Structural Change for Output:</p> </li> <li> <p>The library now supports returning data as native Python objects in addition to JSON strings.</p> </li> <li> <p>New <code>_objects</code> functions:</p> </li> <li> <p>For each JSON-returning function, a corresponding <code>_objects</code> version has been added (e.g., <code>get_bios_info_objects()</code>).</p> </li> <li> <p>GPU Information Support:</p> </li> <li> <p>New functions introduced:</p> <ul> <li><code>get_gpu_info()</code>: GPU info as JSON</li> <li><code>get_gpu_info_objects()</code>: GPU info as Python objects</li> <li>API Update 3.0.0 <p>\u26a0\ufe0f Warning: Version <code>3.0.0</code> contains broken wheels that cause installation failure via pip. Please avoid using version 3.0.0 and use version <code>3.0.1</code> or higher instead.</p> </li> </ul> </li> </ul>"},{"location":"CHANGELOG/#203-hotfix-release","title":"[2.0.3] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_4","title":"Highlights:","text":"<ul> <li> <p>Fixed <code>get_smart_info()</code> inconsistency:</p> </li> <li> <p>Resolved an issue where the function occasionally returned zero for disk sectors, cylinders, and tracks.</p> </li> <li>Ensured consistent and accurate SMART data retrieval.</li> <li>API Update 2.0.2</li> </ul>"},{"location":"CHANGELOG/#202-hotfix-release","title":"[2.0.2] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_5","title":"Highlights:","text":"<ul> <li> <p>Fixed Typo in Output Binary Name:</p> </li> <li> <p>Resolved an issue where the output binary had inconsistent casing.</p> </li> <li>Output is now consistently named <code>HardView.pyd</code> or <code>HardView.so</code>.</li> <li>No functional/API changes.</li> </ul>"},{"location":"CHANGELOG/#201-hotfix-release","title":"[2.0.1] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_6","title":"Highlights:","text":"<ul> <li> <p>Critical JSON Serialization Fix:</p> </li> <li> <p>Fixed improper escaping of backslashes (<code>\\</code>) in SMART disk JSON output.</p> </li> <li>Output is now fully JSON-compliant.</li> <li>API Update 2.0.1</li> </ul>"},{"location":"CHANGELOG/#200-major-release","title":"[2.0.0] - Major Release","text":""},{"location":"CHANGELOG/#highlights_7","title":"Highlights:","text":"<ul> <li> <p>Refactor:</p> </li> <li> <p>Each function moved to a separate C source file.</p> </li> <li>Improved memory safety and leak prevention.1</li> <li> <p>New Advanced Features:</p> </li> <li> <p><code>get_partitions_info()</code></p> </li> <li><code>get_smart_info()</code></li> <li><code>get_cpu_usage()</code></li> <li><code>get_ram_usage()</code></li> <li><code>get_system_performance()</code></li> <li><code>monitor_cpu_usage(duration, interval)</code></li> <li><code>monitor_ram_usage(duration, interval)</code></li> <li><code>monitor_system_performance(duration, interval)</code></li> <li>API Update 2.0.0</li> </ul>"},{"location":"CHANGELOG/#112","title":"[1.1.2]","text":""},{"location":"CHANGELOG/#highlights_8","title":"Highlights:","text":"<ul> <li>Fixed several memory leak issues.</li> <li>No feature changes.</li> </ul>"},{"location":"CHANGELOG/#100-first-stable-release","title":"[1.0.0] - First Stable Release","text":""},{"location":"CHANGELOG/#highlights_9","title":"Highlights:","text":"<ul> <li>Initial stable release with all core features from <code>0.1.0</code>.</li> <li>Improved import experience: binary is now <code>HardView.pyd</code> / <code>HardView.so</code>.</li> </ul>"},{"location":"CHANGELOG/#010-initial-release","title":"[0.1.0] - Initial Release","text":""},{"location":"CHANGELOG/#core-features","title":"Core Features:","text":"<ul> <li><code>get_bios_info()</code></li> <li><code>get_system_info()</code></li> <li><code>get_baseboard_info()</code></li> <li><code>get_chassis_info()</code></li> <li><code>get_cpu_info()</code></li> <li><code>get_ram_info()</code></li> <li><code>get_disk_info()</code></li> <li><code>get_network_info()</code></li> <li><code>get_partitions_info()</code></li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing to HardView","text":"<p>Thank you for your interest in contributing to HardView! Your help is valuable in making this library robust, fast, and reliable across all supported platforms.</p>"},{"location":"CONTRIBUTING/#how-you-can-contribute","title":"How You Can Contribute","text":""},{"location":"CONTRIBUTING/#1-test-on-different-architectures-environments","title":"1. Test on Different Architectures &amp; Environments","text":"<ul> <li>Try HardView on various systems (Windows 32/64-bit, Linux x86/x86_64, different Python versions).</li> <li>Report any issues you encounter, especially those related to installation, import, or hardware detection.</li> <li>Share your results and environment details (OS, Python version, hardware specs).</li> </ul>"},{"location":"CONTRIBUTING/#2-report-bugs-issues","title":"2. Report Bugs &amp; Issues","text":"<ul> <li>If you find a bug, please open an issue on GitHub.</li> <li>Include:</li> <li>Clear description of the problem</li> <li>Steps to reproduce</li> <li>Your OS, Python version, and HardView version</li> <li>Any error messages or logs</li> </ul>"},{"location":"CONTRIBUTING/#3-suggest-features-improvements","title":"3. Suggest Features &amp; Improvements","text":"<ul> <li>If you have an idea for a new feature or improvement, open an issue with the \"enhancement\" label.</li> <li>Describe the use case and why it would be helpful.</li> </ul>"},{"location":"CONTRIBUTING/#4-code-contributions-pull-requests","title":"4. Code Contributions (Pull Requests)","text":"<ul> <li>Fork the repository and create a new branch for your changes.</li> <li>Follow the existing code style (C99 for C code, PEP8 for Python code).</li> <li>Add or update documentation and tests as needed.</li> <li>Make sure your code builds and passes all tests on supported platforms.</li> <li>Submit a pull request with a clear description of your changes.</li> </ul>"},{"location":"CONTRIBUTING/#5-share-benchmarks-usage-examples","title":"5. Share Benchmarks &amp; Usage Examples","text":"<ul> <li>If you run performance tests or use HardView in a real project, share your results and scripts.</li> <li>This helps others understand the library's capabilities and performance.</li> </ul>"},{"location":"CONTRIBUTING/#6-help-with-documentation","title":"6. Help with Documentation","text":"<ul> <li>Improve or expand the documentation (in <code>docs/</code>).</li> <li>Add new examples, clarify existing sections, or translate docs to other languages.</li> </ul>"},{"location":"CONTRIBUTING/#code-style-guidelines","title":"Code Style &amp; Guidelines","text":"<ul> <li>C code: Use C99 standard, 4-space indentation, and clear, descriptive names.</li> <li>Python code: Follow PEP8.</li> <li>Write comments for complex logic and public functions.</li> <li>Keep functions small and focused.</li> </ul>"},{"location":"CONTRIBUTING/#running-tests","title":"Running Tests","text":"<ul> <li>(If available) Run the provided test scripts to verify your changes.</li> <li>Test on as many platforms and Python versions as possible.</li> </ul>"},{"location":"CONTRIBUTING/#questions","title":"Questions?","text":"<ul> <li>If you have questions about contributing, open an issue or start a discussion on GitHub.</li> </ul> <p>Thank you for helping make HardView better! </p>"},{"location":"FAQ/","title":"\u2753 HardView Frequently Asked Questions (FAQ)","text":"<p>This FAQ addresses common issues and questions about installing, using, and troubleshooting the HardView library.</p>"},{"location":"FAQ/#q1-pip-install-fails-or-cannot-find-a-suitable-wheel","title":"Q1: <code>pip install</code> fails or cannot find a suitable wheel","text":"<p>A:</p> <ul> <li>Ensure you are using a supported platform (Windows 32/64-bit or Linux x86/x86_64).</li> <li>Make sure your Python version is supported (check PyPI).</li> <li>Upgrade pip to the latest version:</li> </ul> <p><pre><code>pip install --upgrade pip\n</code></pre> * If no wheel is available for your platform, try building from source (see <code>INSTALL.md</code>).</p>"},{"location":"FAQ/#q2-hardview-does-not-work-after-installation","title":"Q2: HardView does not work after installation","text":"<p>A:</p> <ul> <li>Confirm that your system architecture (32/64-bit) matches the installed wheel.</li> <li>Ensure you have the latest version of HardView.</li> <li>Unsupported platforms like Arch, Android, or macOS are not supported.</li> <li>Try reinstalling:</li> </ul> <pre><code>pip uninstall hardview\npip install hardview\n</code></pre>"},{"location":"FAQ/#q3-importerror-or-cannot-import-hardview","title":"Q3: <code>ImportError</code> or <code>cannot import HardView</code>","text":"<p>A:</p> <ul> <li>Verify that the binary file is named exactly <code>HardView.pyd</code> or <code>HardView.so</code> (uppercase H and V).</li> <li>Upgrade to HardView &gt; 0.1.0 to fix import issues.</li> <li>Use correct casing in your import statement:</li> </ul> <pre><code>import HardView\n</code></pre>"},{"location":"FAQ/#q4-output-data-is-missing-or-not-displayed-correctly","title":"Q4: Output data is missing or not displayed correctly","text":"<p>A:</p> <ul> <li>HardView can return JSON strings or native Python objects.</li> <li>For JSON:</li> </ul> <p><pre><code>import json\nimport HardView\ndata = json.loads(HardView.get_cpu_info(True))\nprint(data)\n</code></pre> * For Python objects:</p> <p><pre><code>import HardView\ndata_obj = HardView.get_cpu_info_objects(False)\nprint(data_obj)\n</code></pre> * If the output includes <code>{ \"error\": ... }</code>, check the message for details.</p>"},{"location":"FAQ/#q5-does-hardview-support-linux-macos-or-other-platforms","title":"Q5: Does HardView support Linux, macOS, or other platforms?","text":"<p>A:</p> <ul> <li>HardView supports Windows (32/64-bit) and Linux (x86/x86_64) only.</li> <li>Not supported on Arch, Android, or macOS.</li> </ul>"},{"location":"FAQ/#q6-which-python-versions-are-supported","title":"Q6: Which Python versions are supported?","text":"<p>A:</p> <ul> <li>See PyPI for available wheels.</li> <li>If your version is not listed, try building from source.</li> </ul>"},{"location":"FAQ/#q7-how-do-i-get-help-or-report-a-bug","title":"Q7: How do I get help or report a bug?","text":"<p>A:</p> <ul> <li>Check <code>docs/</code> first (especially <code>What.md</code>).</li> <li>If your issue persists, open a GitHub issue with OS, Python version, and error logs.</li> </ul>"},{"location":"FAQ/#q8-is-hardview-thread-safe","title":"Q8: Is HardView thread-safe?","text":"<p>A:</p> <p>HardView is not thread-safe.  This is due to internal use of WMI and COM interfaces.  If using it in multi-threaded environments, you must protect calls using a mutex or run all calls from a single thread.  The Python GIL may reduce risk, but does not guarantee safety.</p>"},{"location":"FAQ/#q9-how-can-i-contribute-to-hardview","title":"Q9: How can I contribute to HardView?","text":"<p>A:</p> <ul> <li>See <code>CONTRIBUTING.md</code> or main <code>README.md</code>.</li> <li>Pull requests and bug reports are welcome!</li> </ul>"},{"location":"FAQ/#q10-why-is-hardview-faster-than-other-python-libraries","title":"Q10: Why is HardView faster than other Python libraries?","text":"<p>A:</p> <ul> <li>It's written entirely in C and communicates directly with system APIs \u2014 minimal overhead.</li> </ul>"},{"location":"FAQ/#q11-how-do-i-monitor-hardware-performance-over-time","title":"Q11: How do I monitor hardware performance over time?","text":"<p>A:</p> <ul> <li>Use functions like <code>monitor_cpu_usage_duration(duration, interval)</code>.</li> <li>Both JSON and Python object formats are available.</li> <li>Examples are in <code>docs/What.md</code>.</li> </ul>"},{"location":"FAQ/#q12-can-i-use-hardview-in-a-virtual-environment","title":"Q12: Can I use HardView in a virtual environment?","text":"<p>A:</p> <ul> <li>Yes. HardView works with standard virtual environments like <code>virtualenv</code> and <code>venv</code>.</li> </ul> <p>For more details, check the full documentation in <code>docs/</code> or open an issue if your question isn\u2019t listed.</p>"},{"location":"INSTALL/","title":"HardView Installation Guide","text":"<p>This document explains how to install the HardView library on supported platforms.</p>"},{"location":"INSTALL/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Windows:</li> <li>32-bit and 64-bit (x86, x86_64)</li> <li>Linux:</li> <li>32-bit and 64-bit (x86, x86_64)</li> </ul> <p>Note: - Prebuilt wheels are provided for the above platforms and for multiple Python versions (see PyPI for details). - Not supported: Arch Linux, Android, and macOS. There is no native code or wheel support for these systems, as HardView does not implement platform-specific code for them.</p>"},{"location":"INSTALL/#installation-methods","title":"Installation Methods","text":""},{"location":"INSTALL/#1-install-from-pypi-recommended","title":"1. Install from PyPI (Recommended)","text":"<p>The easiest way to install HardView is via pip from the Python Package Index (PyPI):</p> <pre><code>pip install hardview\n</code></pre> <p>This will automatically download the correct prebuilt wheel for your platform and Python version (if available).</p>"},{"location":"INSTALL/#2-install-from-source","title":"2. Install from Source","text":"<p>If you want to build HardView yourself (for development or unsupported Python versions):</p> <pre><code>git clone https://github.com/yourusername/hardview.git\ncd hardview\npip install .\n</code></pre> <p>This will build the extension from source using your system's compiler.</p>"},{"location":"INSTALL/#python-version-compatibility","title":"Python Version Compatibility","text":"<ul> <li>HardView provides wheels for multiple Python versions (see PyPI for the list).</li> <li>If your Python version is not supported by a prebuilt wheel, you can build from source as above.</li> </ul>"},{"location":"INSTALL/#other-distribution-channels","title":"Other Distribution Channels","text":"<ul> <li>Currently, HardView is only distributed via PyPI or from the official GitHub repository.</li> <li>No other download or package sources are supported.</li> </ul>"},{"location":"INSTALL/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If you encounter issues during installation, please check your Python version and platform compatibility.</li> <li>For Windows, ensure you have a working C compiler (Visual Studio Build Tools recommended for source builds).</li> <li>For Linux, ensure you have Python development headers and a C compiler installed.</li> </ul> <p>For more help, see the FAQ or open an issue on the project's GitHub page. </p>"},{"location":"What/","title":"HardView API Guide","text":"<p>This document explains all functions in the HardView library, what they return, and how to use them from Python with example outputs.</p> <p>Note: To see all functions working together in practice, refer to the <code>TestAll.py</code> file included in the project.</p> <p>\u26a0\ufe0f Important Notice In versions prior to 3.0.3 of the PyPI package, functions ending with <code>_objects</code> require explicitly passing the parameter <code>False</code> to return Python <code>dict</code> objects. This is because, by default, those functions return JSON strings when the parameter is omitted (i.e., default is <code>True</code>).  </p> <p>This behavior has been fixed starting from version 3.0.3 of the PyPI package and API version 3.0.2, where the default behavior now correctly returns <code>dict</code> objects unless otherwise specified.</p>"},{"location":"What/#table-of-contents","title":"Table of Contents","text":"<ol> <li>BIOS Info</li> <li>System Info</li> <li>Baseboard Info</li> <li>Chassis Info</li> <li>CPU Info</li> <li>RAM Info</li> <li>Disk Drives Info</li> <li>Network Adapters Info</li> <li>Partitions Info</li> <li>SMART/Disk Info</li> <li>GPU Info</li> <li>Current Performance<ul> <li>CPU Usage</li> <li>RAM Usage</li> <li>System Performance</li> </ul> </li> <li>Performance Monitoring<ul> <li>CPU Monitoring</li> <li>RAM Monitoring</li> <li>System Performance Monitoring</li> </ul> </li> <li>General Notes</li> <li>Quick Test</li> </ol>"},{"location":"What/#1-bios-info","title":"1. BIOS Info","text":"<p>C Function: <code>get_bios_info(bool Json)</code></p>"},{"location":"What/#python-functions","title":"Python Functions:","text":"<ul> <li><code>HardView.get_bios_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_bios_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description","title":"Description:","text":"<p>Retrieves BIOS information such as vendor, version, and release date.</p>"},{"location":"What/#usage-json","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nbios_json_str = HardView.get_bios_info(True)  # Or HardView.get_bios_info()\nbios_data = json.loads(bios_json_str)\nprint(bios_data)\n</code></pre>"},{"location":"What/#example-json-output","title":"Example JSON Output:","text":"<pre><code>{\n    \"manufacturer\": \"ACME Corp.\",\n    \"version\": \"1.0.0.1\",\n    \"release_date\": \"20230101000000.000000+000\"\n}\n</code></pre>"},{"location":"What/#usage-python-object","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nbios_obj = HardView.get_bios_info_objects(False)  # Or HardView.get_bios_info_objects()\nprint(bios_obj)\n</code></pre>"},{"location":"What/#example-python-object-output","title":"Example Python Object Output:","text":"<pre><code>{\n    'manufacturer': 'ACME Corp.',\n    'version': '1.0.0.1',\n    'release_date': '20230101000000.000000+000'\n}\n</code></pre>"},{"location":"What/#properties-json-keys","title":"Properties / JSON Keys:","text":"<ul> <li>manufacturer (string): The name of the BIOS manufacturer</li> <li>version (string): The BIOS version</li> <li>release_date (string): The BIOS release date</li> </ul>"},{"location":"What/#2-system-info","title":"2. System Info","text":"<p>C Function: <code>get_system_info(bool Json)</code></p>"},{"location":"What/#python-functions_1","title":"Python Functions:","text":"<ul> <li><code>HardView.get_system_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_system_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_1","title":"Description:","text":"<p>Retrieves system information such as manufacturer, product name, UUID, and serial number.</p>"},{"location":"What/#usage-json_1","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nsystem_json_str = HardView.get_system_info(True)  # Or HardView.get_system_info()\nsystem_data = json.loads(system_json_str)\nprint(system_data)\n</code></pre>"},{"location":"What/#example-json-output_1","title":"Example JSON Output:","text":"<pre><code>{\n    \"manufacturer\": \"ExampleTech\",\n    \"product_name\": \"ProSystem X1\",\n    \"uuid\": \"A1B2C3D4-E5F6-7890-1234-567890ABCDEF\",\n    \"serial_number\": \"SN1234567890\"\n}\n</code></pre>"},{"location":"What/#usage-python-object_1","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nsystem_obj = HardView.get_system_info_objects(False)  # Or HardView.get_system_info_objects()\nprint(system_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_1","title":"Example Python Object Output:","text":"<pre><code>{\n    'manufacturer': 'ExampleTech',\n    'product_name': 'ProSystem X1',\n    'uuid': 'A1B2C3D4-E5F6-7890-1234-567890ABCDEF',\n    'serial_number': 'SN1234567890'\n}\n</code></pre>"},{"location":"What/#properties-json-keys_1","title":"Properties / JSON Keys:","text":"<ul> <li>manufacturer (string): The system manufacturer's name</li> <li>product_name (string): The system product name</li> <li>uuid (string): The system's UUID</li> <li>serial_number (string): The system's serial number</li> </ul>"},{"location":"What/#3-baseboard-info","title":"3. Baseboard Info","text":"<p>C Function: <code>get_baseboard_info(bool Json)</code></p>"},{"location":"What/#python-functions_2","title":"Python Functions:","text":"<ul> <li><code>HardView.get_baseboard_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_baseboard_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_2","title":"Description:","text":"<p>Retrieves motherboard information such as manufacturer, product, serial number, and version.</p>"},{"location":"What/#usage-json_2","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nbaseboard_json_str = HardView.get_baseboard_info(True)  # Or HardView.get_baseboard_info()\nbaseboard_data = json.loads(baseboard_json_str)\nprint(baseboard_data)\n</code></pre>"},{"location":"What/#example-json-output_2","title":"Example JSON Output:","text":"<pre><code>{\n    \"manufacturer\": \"MegaBoard Inc.\",\n    \"product\": \"MB-Z999\",\n    \"serial_number\": \"MB1234567890XYZ\",\n    \"version\": \"1.0\"\n}\n</code></pre>"},{"location":"What/#usage-python-object_2","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nbaseboard_obj = HardView.get_baseboard_info_objects(False)  # Or HardView.get_baseboard_info_objects()\nprint(baseboard_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_2","title":"Example Python Object Output:","text":"<pre><code>{\n    'manufacturer': 'MegaBoard Inc.',\n    'product': 'MB-Z999',\n    'serial_number': 'MB1234567890XYZ',\n    'version': '1.0'\n}\n</code></pre>"},{"location":"What/#properties-json-keys_2","title":"Properties / JSON Keys:","text":"<ul> <li>manufacturer (string): The motherboard manufacturer's name</li> <li>product (string): The motherboard product name</li> <li>serial_number (string): The motherboard serial number</li> <li>version (string): The motherboard version</li> </ul>"},{"location":"What/#4-chassis-info","title":"4. Chassis Info","text":"<p>C Function: <code>get_chassis_info(bool Json)</code></p>"},{"location":"What/#python-functions_3","title":"Python Functions:","text":"<ul> <li><code>HardView.get_chassis_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_chassis_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_3","title":"Description:","text":"<p>Retrieves computer chassis/case information such as manufacturer, model, serial number, and type.</p>"},{"location":"What/#usage-json_3","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nchassis_json_str = HardView.get_chassis_info(True)  # Or HardView.get_chassis_info()\nchassis_data = json.loads(chassis_json_str)\nprint(chassis_data)\n</code></pre>"},{"location":"What/#example-json-output_3","title":"Example JSON Output:","text":"<pre><code>{\n    \"manufacturer\": \"CaseWorks\",\n    \"model\": \"TowerMax 5000\",\n    \"serial_number\": \"CHAS987654321\",\n    \"chassis_type\": \"Tower\"\n}\n</code></pre>"},{"location":"What/#usage-python-object_3","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nchassis_obj = HardView.get_chassis_info_objects(False)  # Or HardView.get_chassis_info_objects()\nprint(chassis_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_3","title":"Example Python Object Output:","text":"<pre><code>{\n    'manufacturer': 'CaseWorks',\n    'model': 'TowerMax 5000',\n    'serial_number': 'CHAS987654321',\n    'chassis_type': 'Tower'\n}\n</code></pre>"},{"location":"What/#properties-json-keys_3","title":"Properties / JSON Keys:","text":"<ul> <li>manufacturer (string): The chassis manufacturer's name</li> <li>model (string): The chassis model</li> <li>serial_number (string): The chassis serial number</li> <li>chassis_type (string): The type of chassis (e.g., \"Tower\", \"Laptop\")</li> </ul>"},{"location":"What/#5-cpu-info","title":"5. CPU Info","text":"<p>C Function: <code>get_cpu_info(bool Json)</code></p>"},{"location":"What/#python-functions_4","title":"Python Functions:","text":"<ul> <li><code>HardView.get_cpu_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_cpu_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_4","title":"Description:","text":"<p>Retrieves processor details such as name, manufacturer, architecture, number of cores, number of threads, max clock speed, and socket designation.</p>"},{"location":"What/#usage-json_4","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ncpu_json_str = HardView.get_cpu_info(True)  # Or HardView.get_cpu_info()\ncpu_data = json.loads(cpu_json_str)\nprint(cpu_data)\n</code></pre>"},{"location":"What/#example-json-output_4","title":"Example JSON Output:","text":"<pre><code>{\n    \"name\": \"Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz\",\n    \"manufacturer\": \"GenuineIntel\",\n    \"architecture\": \"9\", // 9 = \u00d764\n    \"cores\": 8,\n    \"threads\": 8,\n    \"max_clock_speed\": 4900,\n    \"socket_designation\": \"LGA1151\"\n}\n</code></pre>"},{"location":"What/#usage-python-object_4","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ncpu_obj = HardView.get_cpu_info_objects(False)  # Or HardView.get_cpu_info_objects()\nprint(cpu_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_4","title":"Example Python Object Output:","text":"<pre><code>{\n    'name': 'Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz',\n    'manufacturer': 'GenuineIntel',\n    'architecture': '9',\n    'cores': 8,\n    'threads': 8,\n    'max_clock_speed': 4900.0,\n    'socket_designation': 'LGA1151'\n}\n</code></pre>"},{"location":"What/#properties-json-keys_4","title":"Properties / JSON Keys:","text":"<ul> <li>name (string): The CPU name</li> <li>manufacturer (string): The CPU manufacturer</li> <li>architecture (string): The CPU architecture</li> <li>cores (integer): The number of physical cores</li> <li>threads (integer): The number of logical threads</li> <li>max_clock_speed (float): The maximum clock speed of the CPU in MHz</li> <li>socket_designation (string): The CPU socket designation   ### Architecture Property Return Values Table</li> </ul> <p>This table lists the possible return values of the <code>Architecture</code> property from the WMI class <code>Win32_Processor</code> and their corresponding processor architecture types.</p> Value Architecture Type 0 x86 (32-bit) 1 MIPS 2 Alpha 3 PowerPC 5 ARM 6 Itanium 9 x64 (64-bit) 12 ARM64"},{"location":"What/#6-ram-info","title":"6. RAM Info","text":"<p>C Function: <code>get_ram_info(bool Json)</code></p>"},{"location":"What/#python-functions_5","title":"Python Functions:","text":"<ul> <li><code>HardView.get_ram_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_ram_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_5","title":"Description:","text":"<p>Retrieves total physical memory and details of individual memory modules.</p>"},{"location":"What/#usage-json_5","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nram_json_str = HardView.get_ram_info(True)  # Or HardView.get_ram_info()\nram_data = json.loads(ram_json_str)\nprint(ram_data)\n</code></pre>"},{"location":"What/#example-json-output_5","title":"Example JSON Output:","text":"<pre><code>{\n    \"total_physical_memory_bytes\": 17179869184,\n    \"memory_modules\": [\n        {\n            \"capacity_bytes\": 8589934592,\n            \"speed_mhz\": 3200,\n            \"manufacturer\": \"Kingston\",\n            \"serial_number\": \"ABCDEF12\",\n            \"part_number\": \"KF432C16BB/8\"\n        },\n        {\n            \"capacity_bytes\": 8589934592,\n            \"speed_mhz\": 3200,\n            \"manufacturer\": \"Kingston\",\n            \"serial_number\": \"GHIJKL34\",\n            \"part_number\": \"KF432C16BB/8\"\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_5","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nram_obj = HardView.get_ram_info_objects(False)  # Or HardView.get_ram_info_objects()\nprint(ram_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_5","title":"Example Python Object Output:","text":"<pre><code>{\n    'total_physical_memory_bytes': 17179869184,\n    'memory_modules': [\n        {\n            'capacity_bytes': 8589934592,\n            'speed_mhz': 3200,\n            'manufacturer': 'Kingston',\n            'serial_number': 'ABCDEF12',\n            'part_number': 'KF432C16BB/8'\n        },\n        {\n            'capacity_bytes': 8589934592,\n            'speed_mhz': 3200,\n            'manufacturer': 'Kingston',\n            'serial_number': 'GHIJKL34',\n            'part_number': 'KF432C16BB/8'\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#properties-json-keys_5","title":"Properties / JSON Keys:","text":"<ul> <li>total_physical_memory_bytes (integer): Total physical memory size in bytes</li> <li>memory_modules (list): A list of individual memory modules, each containing:<ul> <li>capacity_bytes (integer): Module capacity in bytes</li> <li>speed_mhz (integer): Module speed in MHz</li> <li>manufacturer (string): Module manufacturer</li> <li>serial_number (string): Module serial number</li> <li>part_number (string): Module part number</li> </ul> </li> </ul>"},{"location":"What/#7-disk-drives-info","title":"7. Disk Drives Info","text":"<p>C Function: <code>get_disk_info(bool Json)</code></p>"},{"location":"What/#python-functions_6","title":"Python Functions:","text":"<ul> <li><code>HardView.get_disk_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_disk_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_6","title":"Description:","text":"<p>Retrieves information about installed disk drives, including model, manufacturer, interface type, size, serial number, and media type.</p>"},{"location":"What/#usage-json_6","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ndisk_json_str = HardView.get_disk_info(True)  # Or HardView.get_disk_info()\ndisk_data = json.loads(disk_json_str)\nprint(disk_data)\n</code></pre>"},{"location":"What/#example-json-output_6","title":"Example JSON Output:","text":"<pre><code>{\n    \"disks\": [\n        {\n            \"model\": \"NVMe SSD 1TB\",\n            \"manufacturer\": \"SSDCorp\",\n            \"interface_type\": \"NVMe\",\n            \"size\": 1000204886016,\n            \"serial_number\": \"SSD123456789\",\n            \"media_type\": \"Solid State Drive\"\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_6","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ndisk_obj = HardView.get_disk_info_objects(False)  # Or HardView.get_disk_info_objects()\nprint(disk_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_6","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'model': 'NVMe SSD 1TB',\n        'manufacturer': 'SSDCorp',\n        'interface_type': 'NVMe',\n        'size': 1000204886016,\n        'serial_number': 'SSD123456789',\n        'media_type': 'Solid State Drive'\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-disk","title":"Properties / JSON Keys (for each disk):","text":"<ul> <li>model (string): The disk model</li> <li>manufacturer (string): The disk manufacturer</li> <li>interface_type (string): The disk interface type (e.g., \"IDE\", \"SCSI\", \"SATA\", \"NVMe\")</li> <li>size (integer): The disk size in bytes</li> <li>serial_number (string): The disk serial number</li> <li>media_type (string): The disk media type (e.g., \"Fixed hard disk media\", \"Solid State Drive\")</li> </ul>"},{"location":"What/#8-network-adapters-info","title":"8. Network Adapters Info","text":"<p>C Function: <code>get_network_info(bool Json)</code></p>"},{"location":"What/#python-functions_7","title":"Python Functions:","text":"<ul> <li><code>HardView.get_network_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_network_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_7","title":"Description:","text":"<p>Retrieves information about network adapters, including description, MAC address, IP addresses (IPv4 and IPv6), and DNS hostname.</p>"},{"location":"What/#usage-json_7","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nnet_json_str = HardView.get_network_info(True)  # Or HardView.get_network_info()\nnet_data = json.loads(net_json_str)\nprint(net_data)\n</code></pre>"},{"location":"What/#example-json-output_7","title":"Example JSON Output:","text":"<pre><code>{\n    \"network_adapters\": [\n        {\n            \"description\": \"Gigabit Ethernet Adapter\",\n            \"mac_address\": \"00:1A:2B:3C:4D:5E\",\n            \"ip_addresses\": [\n                \"192.168.1.100\",\n                \"fe80::1234:5678:9abc:def0\"\n            ],\n            \"dns_host_name\": \"MY-PC-NAME\"\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_7","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nnet_obj = HardView.get_network_info_objects(False)  # Or HardView.get_network_info_objects()\nprint(net_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_7","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'description': 'Gigabit Ethernet Adapter',\n        'mac_address': '00:1A:2B:3C:4D:5E',\n        'ip_addresses': ['192.168.1.100', 'fe80::1234:5678:9abc:def0'],\n        'dns_host_name': 'MY-PC-NAME'\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-adapter","title":"Properties / JSON Keys (for each adapter):","text":"<ul> <li>description (string): The adapter description</li> <li>mac_address (string): The adapter's MAC address</li> <li>ip_addresses (list): A list of IP addresses (IPv4 and IPv6) assigned to the adapter</li> <li>dns_host_name (string): The DNS hostname associated with the adapter</li> </ul>"},{"location":"What/#9-partitions-info-advanced-storage","title":"9. Partitions Info (Advanced Storage)","text":"<p>C Function: <code>get_partitions_info(bool Json)</code></p>"},{"location":"What/#python-functions_8","title":"Python Functions:","text":"<ul> <li><code>HardView.get_partitions_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_partitions_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_8","title":"Description:","text":"<p>Retrieves detailed information about disk partitions, including disk model, serial number, interface type, disk size, media type, partition device ID, partition type, partition size, and partition index.</p>"},{"location":"What/#usage-json_8","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nparts_json_str = HardView.get_partitions_info(True)  # Or HardView.get_partitions_info()\nparts_data = json.loads(parts_json_str)\nprint(parts_data)\n</code></pre>"},{"location":"What/#example-json-output_8","title":"Example JSON Output:","text":"<pre><code>{\n    \"partitions\": [\n        {\n            \"disk_model\": \"NVMe SSD 1TB\",\n            \"disk_serial\": \"SSD123456789\",\n            \"disk_interface\": \"NVMe\",\n            \"disk_size\": 1000204886016,\n            \"disk_media\": \"Solid State Drive\",\n            \"partition_device_id\": \"Disk #0, Partition #0\",\n            \"partition_type\": \"NTFS\",\n            \"partition_size\": 500000000000,\n            \"partition_index\": 0\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_8","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nparts_obj = HardView.get_partitions_info_objects(False)  # Or HardView.get_partitions_info_objects()\nprint(parts_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_8","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'disk_model': 'NVMe SSD 1TB',\n        'disk_serial': 'SSD123456789',\n        'disk_interface': 'NVMe',\n        'disk_size': 1000204886016,\n        'disk_media': 'Solid State Drive',\n        'partition_device_id': 'Disk #0, Partition #0',\n        'partition_type': 'NTFS',\n        'partition_size': 500000000000,\n        'partition_index': 0\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-partition","title":"Properties / JSON Keys (for each partition):","text":"<ul> <li>disk_model (string): The model of the disk the partition belongs to</li> <li>disk_serial (string): The serial number of the disk the partition belongs to</li> <li>disk_interface (string): The interface type of the disk</li> <li>disk_size (integer): The total size of the disk in bytes</li> <li>disk_media (string): The media type of the disk</li> <li>partition_device_id (string): The device ID of the partition</li> <li>partition_type (string): The file system type of the partition</li> <li>partition_size (integer): The size of the partition in bytes</li> <li>partition_index (integer): The index of the partition on the disk</li> </ul>"},{"location":"What/#10-smartdisk-info-advanced","title":"10. SMART/Disk Info (Advanced)","text":"<p>C Function: <code>get_smart_info(bool Json)</code></p>"},{"location":"What/#python-functions_9","title":"Python Functions:","text":"<ul> <li><code>HardView.get_smart_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_smart_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_9","title":"Description:","text":"<p>Retrieves detailed disk drive information, including SMART status, device IDs, firmware revision, and sector/track information.</p>"},{"location":"What/#usage-json_9","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nsmart_json_str = HardView.get_smart_info(True)  # Or HardView.get_smart_info()\nsmart_data = json.loads(smart_json_str)\nprint(smart_data)\n</code></pre>"},{"location":"What/#example-json-output_9","title":"Example JSON Output:","text":"<pre><code>{\n    \"disks\": [\n        {\n            \"model\": \"NVMe SSD 1TB\",\n            \"serial_number\": \"SSD123456789\",\n            \"interface_type\": \"NVMe\",\n            \"size\": \"1000204886016\",\n            \"partitions\": 2,\n            \"manufacturer\": \"SSDCorp\",\n            \"media_type\": \"Solid State Drive\",\n            \"status\": \"OK\",\n            \"device_id\": \"\\\\.\\PHYSICALDRIVE0\",\n            \"caption\": \"NVMe SSD 1TB\",\n            \"firmware_revision\": \"FW1.0\",\n            \"pnp_device_id\": \"NVME\\\\SSD&amp;VEN_1234&amp;PROD_5678\\\\1&amp;234567&amp;0&amp;000000\",\n            \"sectors_per_track\": 63,\n            \"total_cylinders\": 0,\n            \"total_heads\": 255,\n            \"total_sectors\": 0,\n            \"total_tracks\": 0,\n            \"tracks_per_cylinder\": 255,\n            \"bytes_per_sector\": 512,\n            \"index\": 0,\n            \"signature\": 1234567890\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_9","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nsmart_obj = HardView.get_smart_info_objects(False)  # Or HardView.get_smart_info_objects()\nprint(smart_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_9","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'model': 'NVMe SSD 1TB',\n        'serial_number': 'SSD123456789',\n        'interface_type': 'NVMe',\n        'size': '1000204886016',\n        'partitions': 2,\n        'manufacturer': 'SSDCorp',\n        'media_type': 'Solid State Drive',\n        'status': 'OK',\n        'device_id': '\\\\. 0HYSICALDRIVE0',\n        'caption': 'NVMe SSD 1TB',\n        'firmware_revision': 'FW1.0',\n        'pnp_device_id': 'NVME\\\\SSD&amp;VEN_1234&amp;PROD_5678\\\\1&amp;234567&amp;0&amp;000000',\n        'sectors_per_track': 63,\n        'total_cylinders': 0,\n        'total_heads': 255,\n        'total_sectors': 0,\n        'total_tracks': 0,\n        'tracks_per_cylinder': 255,\n        'bytes_per_sector': 512,\n        'index': 0,\n        'signature': 1234567890\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-disk_1","title":"Properties / JSON Keys (for each disk):","text":"<ul> <li>model (string): The disk model</li> <li>serial_number (string): The disk serial number</li> <li>interface_type (string): The disk interface type</li> <li>size (string): The disk size in bytes</li> <li>partitions (integer): The number of partitions on the disk</li> <li>manufacturer (string): The disk manufacturer</li> <li>media_type (string): The disk media type</li> <li>status (string): The disk status (e.g., \"OK\")</li> <li>device_id (string): The device ID of the disk</li> <li>caption (string): A description of the disk</li> <li>firmware_revision (string): The firmware revision of the disk</li> <li>pnp_device_id (string): The PnP device ID</li> <li>sectors_per_track (integer): The number of sectors per track</li> <li>total_cylinders (integer): The total number of cylinders</li> <li>total_heads (integer): The total number of heads</li> <li>total_sectors (integer): The total number of sectors</li> <li>total_tracks (integer): The total number of tracks</li> <li>tracks_per_cylinder (integer): The number of tracks per cylinder</li> <li>bytes_per_sector (integer): The number of bytes per sector</li> <li>index (integer): The disk index</li> <li>signature (integer): The disk signature</li> </ul>"},{"location":"What/#11-gpu-info","title":"11. GPU Info","text":"<p>C Function: <code>get_gpu_info(bool Json)</code></p>"},{"location":"What/#python-functions_10","title":"Python Functions:","text":"<ul> <li><code>HardView.get_gpu_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_gpu_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_10","title":"Description:","text":"<p>Retrieves GPU details such as name, manufacturer, driver version, memory size, video processor, and video mode description.</p>"},{"location":"What/#usage-json_10","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ngpu_json_str = HardView.get_gpu_info(True)  # Or HardView.get_gpu_info()\ngpu_data = json.loads(gpu_json_str)\nprint(gpu_data)\n</code></pre>"},{"location":"What/#example-json-output_10","title":"Example JSON Output:","text":"<pre><code>{\n    \"gpus\": [\n        {\n            \"name\": \"NVIDIA GeForce RTX 3080\",\n            \"manufacturer\": \"NVIDIA\",\n            \"driver_version\": \"536.99\",\n            \"memory_size\": 10737418240,\n            \"video_processor\": \"GeForce RTX 3080\",\n            \"video_mode_description\": \"2560 x 1440 x 16777216 colors\"\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_10","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ngpu_obj = HardView.get_gpu_info_objects(False)  # Or HardView.get_gpu_info_objects()\nprint(gpu_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_10","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'name': 'NVIDIA GeForce RTX 3080',\n        'manufacturer': 'NVIDIA',\n        'driver_version': '536.99',\n        'memory_size': 10737418240,\n        'video_processor': 'GeForce RTX 3080',\n        'video_mode_description': '2560 x 1440 x 16777216 colors'\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-gpu","title":"Properties / JSON Keys (for each GPU):","text":"<ul> <li>name (string): The GPU name</li> <li>manufacturer (string): The GPU manufacturer</li> <li>driver_version (string): The GPU driver version</li> <li>memory_size (integer): The GPU memory size in bytes</li> <li>video_processor (string): The video processor</li> <li>video_mode_description (string): The current video mode description</li> </ul>"},{"location":"What/#12-current-performance","title":"12. Current Performance","text":""},{"location":"What/#a-cpu-usage","title":"a. CPU Usage","text":"<p>C Function: <code>get_cpu_usage(bool Json)</code></p>"},{"location":"What/#python-functions_11","title":"Python Functions:","text":"<ul> <li><code>HardView.get_cpu_usage(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_cpu_usage_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_11","title":"Description:","text":"<p>Retrieves current CPU usage percentage.</p>"},{"location":"What/#usage-json_11","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ncpu_usage_json_str = HardView.get_cpu_usage(True)  # Or HardView.get_cpu_usage()\ncpu_usage_data = json.loads(cpu_usage_json_str)\nprint(cpu_usage_data)\n</code></pre>"},{"location":"What/#example-json-output_11","title":"Example JSON Output:","text":"<pre><code>{\n    \"cpu_usage\": [\n        {\n            \"load_percentage\": 15\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_11","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ncpu_usage_obj = HardView.get_cpu_usage_objects(False)  # Or HardView.get_cpu_usage_objects()\nprint(cpu_usage_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_11","title":"Example Python Object Output:","text":"<pre><code>{\n    'cpu_usage': [\n        {\n            'load_percentage': 15\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#properties-json-keys_6","title":"Properties / JSON Keys:","text":"<ul> <li>cpu_usage (list): Contains:<ul> <li>load_percentage (integer): The CPU load percentage</li> </ul> </li> </ul>"},{"location":"What/#b-ram-usage","title":"b. RAM Usage","text":"<p>C Function: <code>get_ram_usage(bool Json)</code></p>"},{"location":"What/#python-functions_12","title":"Python Functions:","text":"<ul> <li><code>HardView.get_ram_usage(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_ram_usage_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_12","title":"Description:","text":"<p>Retrieves current RAM usage statistics (total, available, used, usage percentage).</p>"},{"location":"What/#usage-json_12","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nram_usage_json_str = HardView.get_ram_usage(True)  # Or HardView.get_ram_usage()\nram_usage_data = json.loads(ram_usage_json_str)\nprint(ram_usage_data)\n</code></pre>"},{"location":"What/#example-json-output_12","title":"Example JSON Output:","text":"<pre><code>{\n    \"ram_usage\": {\n        \"total_memory_kb\": 16777216,\n        \"free_memory_kb\": 8388608,\n        \"used_memory_kb\": 8388608,\n        \"usage_percent\": 50.0\n    }\n}\n</code></pre>"},{"location":"What/#usage-python-object_12","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nram_usage_obj = HardView.get_ram_usage_objects(False)  # Or HardView.get_ram_usage_objects()\nprint(ram_usage_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_12","title":"Example Python Object Output:","text":"<pre><code>{\n    'ram_usage': {\n        'total_memory_kb': 16777216,\n        'free_memory_kb': 8388608,\n        'used_memory_kb': 8388608,\n        'usage_percent': 50.0\n    }\n}\n</code></pre>"},{"location":"What/#properties-json-keys_7","title":"Properties / JSON Keys:","text":"<ul> <li>ram_usage (dict): Contains:<ul> <li>total_memory_kb (integer): Total memory in KB</li> <li>free_memory_kb (integer): Free memory in KB</li> <li>used_memory_kb (integer): Used memory in KB</li> <li>usage_percent (float): Memory usage percentage</li> </ul> </li> </ul>"},{"location":"What/#c-system-performance","title":"c. System Performance","text":"<p>C Function: <code>get_system_performance(bool Json)</code></p>"},{"location":"What/#python-functions_13","title":"Python Functions:","text":"<ul> <li><code>HardView.get_system_performance(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_system_performance_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_13","title":"Description:","text":"<p>Retrieves combined CPU and RAM usage.</p>"},{"location":"What/#usage-json_13","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nperf_json_str = HardView.get_system_performance(True)  # Or HardView.get_system_performance()\nperf_data = json.loads(perf_json_str)\nprint(perf_data)\n</code></pre>"},{"location":"What/#example-json-output_13","title":"Example JSON Output:","text":"<pre><code>{\n    \"system_performance\": {\n        \"cpu\": {\n            \"cpu_usage\": [\n                {\n                    \"load_percentage\": 20\n                }\n            ]\n        },\n        \"ram\": {\n            \"ram_usage\": {\n                \"total_memory_kb\": 16777216,\n                \"free_memory_kb\": 8000000,\n                \"used_memory_kb\": 8777216,\n                \"usage_percent\": 52.31\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"What/#example-python-object-output_13","title":"Example Python Object Output:","text":"<pre><code>{\n    'system_performance': {\n        'cpu': [\n            {\n                'load_percentage': 20\n            }\n        ],\n        'ram': {\n            'total_memory_kb': 16777216,\n            'free_memory_kb': 8000000,\n            'used_memory_kb': 8777216,\n            'usage_percent': 52.31\n        }\n    }\n}\n</code></pre>"},{"location":"What/#properties-json-keys_8","title":"Properties / JSON Keys:","text":"<ul> <li> <p>system_performance (dict): Contains:</p> <ul> <li>cpu (list): CPU usage info (same as in CPU Usage)</li> <li>ram (dict): RAM usage info (same as in RAM Usage)</li> </ul> </li> </ul>"},{"location":"What/#13-performance-monitoring","title":"13. Performance Monitoring","text":""},{"location":"What/#a-cpu-monitoring","title":"a. CPU Monitoring","text":"<p>C Function: <code>monitor_cpu_usage_duration(int duration_seconds, int interval_ms)</code></p>"},{"location":"What/#python-functions_14","title":"Python Functions:","text":"<ul> <li><code>HardView.monitor_cpu_usage_duration(duration_sec, interval_ms)</code>: Returns a JSON string</li> <li><code>HardView.monitor_cpu_usage_duration_objects(duration_sec, interval_ms)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_14","title":"Description:","text":"<p>Monitors CPU usage over a specified time period.</p>"},{"location":"What/#usage-json_14","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ncpu_monitor_json_str = HardView.monitor_cpu_usage_duration(5, 1000)\ncpu_monitor_data = json.loads(cpu_monitor_json_str)\nprint(cpu_monitor_data)\n</code></pre>"},{"location":"What/#example-json-output_14","title":"Example JSON Output:","text":"<pre><code>{\n    \"cpu_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            { \"cpu_usage\": [ { \"load_percentage\": 25 } ] },\n            { \"cpu_usage\": [ { \"load_percentage\": 30 } ] },\n            { \"cpu_usage\": [ { \"load_percentage\": 28 } ] }\n        ]\n    }\n}\n</code></pre>"},{"location":"What/#usage-python-object_13","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ncpu_monitor_obj = HardView.monitor_cpu_usage_duration_objects(5, 1000)\nprint(cpu_monitor_obj)\n</code></pre>"},{"location":"What/#properties-json-keys_9","title":"Properties / JSON Keys:","text":"<ul> <li> <p>cpu_monitoring (dict): Contains:</p> <ul> <li>duration_seconds (int)</li> <li>interval_ms (int)</li> <li>readings (list): List of CPU usage readings</li> </ul> </li> </ul>"},{"location":"What/#b-ram-monitoring","title":"b. RAM Monitoring","text":"<p>C Function: <code>monitor_ram_usage_duration(int duration_seconds, int interval_ms)</code></p>"},{"location":"What/#python-functions_15","title":"Python Functions:","text":"<ul> <li><code>HardView.monitor_ram_usage_duration(duration_sec, interval_ms)</code>: Returns a JSON string</li> <li><code>HardView.monitor_ram_usage_duration_objects(duration_sec, interval_ms)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_15","title":"Description:","text":"<p>Monitors RAM usage over a specified time period.</p>"},{"location":"What/#usage-json_15","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nram_monitor_json_str = HardView.monitor_ram_usage_duration(5, 1000)\nram_monitor_data = json.loads(ram_monitor_json_str)\nprint(ram_monitor_data)\n</code></pre>"},{"location":"What/#example-json-output_15","title":"Example JSON Output:","text":"<pre><code>{\n    \"ram_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            { \"ram_usage\": { \"total_memory_kb\": 16777216, \"free_memory_kb\": 8300000, \"used_memory_kb\": 8477216, \"usage_percent\": 50.53 } },\n            { \"ram_usage\": { \"total_memory_kb\": 16777216, \"free_memory_kb\": 8250000, \"used_memory_kb\": 8527216, \"usage_percent\": 50.82 } }\n        ]\n    }\n}\n</code></pre>"},{"location":"What/#usage-python-object_14","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nram_monitor_obj = HardView.monitor_ram_usage_duration_objects(5, 1000)\nprint(ram_monitor_obj)\n</code></pre>"},{"location":"What/#properties-json-keys_10","title":"Properties / JSON Keys:","text":"<ul> <li> <p>ram_monitoring (dict): Contains:</p> <ul> <li>duration_seconds (int)</li> <li>interval_ms (int)</li> <li>readings (list): RAM usage snapshots</li> </ul> </li> </ul>"},{"location":"What/#c-system-performance-monitoring","title":"c. System Performance Monitoring","text":"<p>C Function: <code>monitor_system_performance_duration(int duration_seconds, int interval_ms)</code></p>"},{"location":"What/#python-functions_16","title":"Python Functions:","text":"<ul> <li><code>HardView.monitor_system_performance_duration(duration_sec, interval_ms)</code>: Returns a JSON string</li> <li><code>HardView.monitor_system_performance_duration_objects(duration_sec, interval_ms)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_16","title":"Description:","text":"<p>Monitors CPU and RAM usage together over a given duration.</p>"},{"location":"What/#usage-json_16","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nsystem_monitor_json_str = HardView.monitor_system_performance_duration(5, 1000)\nsystem_monitor_data = json.loads(system_monitor_json_str)\nprint(system_monitor_data)\n</code></pre>"},{"location":"What/#example-json-output_16","title":"Example JSON Output:","text":"<pre><code>{\n    \"system_performance_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            {\n                \"system_performance\": {\n                    \"cpu\": { \"cpu_usage\": [ { \"load_percentage\": 20 } ] },\n                    \"ram\": { \"ram_usage\": { \"total_memory_kb\": 16777216, \"free_memory_kb\": 8100000, \"used_memory_kb\": 8677216, \"usage_percent\": 51.72 } }\n                }\n            },\n            {\n                \"system_performance\": {\n                    \"cpu\": { \"cpu_usage\": [ { \"load_percentage\": 22 } ] },\n                    \"ram\": { \"ram_usage\": { \"total_memory_kb\": 16777216, \"free_memory_kb\": 8050000, \"used_memory_kb\": 8727216, \"usage_percent\": 52.02 } }\n                }\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"What/#usage-python-object_15","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nsystem_monitor_obj = HardView.monitor_system_performance_duration_objects(5, 1000)\nprint(system_monitor_obj)\n</code></pre>"},{"location":"What/#properties-json-keys_11","title":"Properties / JSON Keys:","text":"<ul> <li> <p>system_performance_monitoring (dict): Contains:</p> <ul> <li>duration_seconds (int)</li> <li>interval_ms (int)</li> <li>readings (list): CPU and RAM readings over time</li> </ul> </li> </ul>"},{"location":"What/#general-notes","title":"General Notes","text":"<ul> <li> <p>Dual Output Mode:</p> <ul> <li>Functions can return JSON strings or Python objects</li> <li>JSON mode: <code>HardView.func(True)</code></li> <li>Object mode: <code>HardView.func_objects(False)</code></li> </ul> </li> <li> <p>Errors:</p> <ul> <li>In case of failure, functions may return: <code>{ \"error\": \"...\" }</code></li> </ul> </li> <li> <p>Performance:</p> <ul> <li>Most functions run under 0.1s on typical systems</li> </ul> </li> </ul>"},{"location":"What/#quick-test","title":"Quick Test","text":"<p>To test all HardView functions, you can use one of the following options:</p>"},{"location":"What/#option-1-full-test","title":"\ud83d\udd39 Option 1: Full Test","text":"<pre><code>python TestAll.py\n</code></pre> <p>This command will:</p> <ul> <li>Call all HardView functions</li> <li>Print execution times for each function</li> </ul>"},{"location":"What/#option-2-quick-colorful-test","title":"\ud83d\udd38 Option 2: Quick &amp; Colorful Test","text":"<pre><code>python Test.py\n</code></pre> <p>This script uses the rich library to display a visually appealing and colorful output in the console.</p> <p>\ud83d\udca1 Note: Make sure the <code>rich</code> library is installed:</p> <p><pre><code>pip install rich\n</code></pre> \ud83d\udcc1 Scripts location:</p> <p>TestALL.py</p> <p>test.py</p> <p>For more details, refer to files inside the <code>docs/</code> folder.</p>"}]}