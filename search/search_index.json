{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HardView - Hardware Information Project","text":"<p>HardView is a project that includes Python, C++, and C libraries, Windows drivers, and tools for monitoring hardware and displaying its information through various sources, whether from the system or other libraries. It provides a unified interface for developers to access information via libraries and a user interface for end-users through the tools.</p>"},{"location":"#hardview-project-overview","title":"HardView Project Overview","text":"<p>This table summarizes the libraries and tools included in the HardView project, describing their purpose, language, and features.</p> Library Name Description Language Purpose / Features HardView The core library providing static hardware information for Windows and Linux. Supports JSON or Python objects in the Python version. \ud83d\udfe6 C Main library for retrieving static system information. LiveView A monitoring library for both static hardware info and real-time data. Supports CPU temperature and regular usage on Windows and Linux \ud83d\udfea C++ Real-time monitoring of hardware metrics, integrates static info and CPUID functions. HardwareWrapper An internal library wrapping <code>LibreHardwareMonitorLib</code> with simple functions through C++/CLI, allowing use from C++. Primarily used by LiveView on Windows for temperature readings. \ud83d\udfe9 C++/CLI Simplifies access to LibreHardwareMonitorLib, providing easy C++ usage for Windows sensor data. cpuid An internal, header-only C++ library providing easy helper functions to access most CPUID information. Used by LiveView for CPUID-related functionality. \ud83d\udfe8 C++ Lightweight, easy-to-integrate CPUID helper library for detailed processor information. C++/Headers A folder containing header-only C++ libraries like <code>SMART.hpp</code> (for SMART info) or <code>Live.hpp</code> (C++ header-only version of LiveView), and others. \ud83d\udfe8 C++ Header-only C++ modules for advanced hardware access and monitoring. Drivers A set of Windows kernel drivers granting access to low-level hardware functionality useful for monitoring. Each driver comes with a header-only C++ library for easier integration. These drivers are not used by the main HardView libraries (Python or C++) since they are unsigned. They are provided for those who wish to sign and use them, or for personal use with local build and test signing. \ud83d\udfe5 C/C++ Optional drivers for advanced hardware access under Windows. Not required for standard HardView usage. Tools A collection of CLI and GUI Python tools that rely on HardView to display hardware information. \ud83d\udfe6 Python Command-line and GUI utilities for interacting with hardware info provided by HardView."},{"location":"#key-features","title":"\ud83d\udd11 Key Features","text":"<ul> <li>\ud83d\udda5\ufe0f Comprehensive Hardware Data: BIOS, System, Baseboard, Chassis, CPU, RAM, Disks, Network,GPU.</li> <li>\ud83c\udfd7\ufe0f Advanced Storage &amp; SMART: Detailed disk, partition, and SMART attributes.</li> <li>\ud83d\udcca Performance Monitoring: Real-time and interval-based CPU, RAM, and system performance.</li> <li>\u26a1 C/C++ Implementation: High performance native code.</li> <li>\ud83d\udc0d Python Integration: Easy-to-use Python API.</li> <li>\ud83c\udf21\ufe0f Temperature &amp; Sensors Monitoring:(3.1.0+) Retrieve real-time temperature, voltage, and fan speed readings from system sensors.  </li> <li>Windows: Uses LibreHardwareMonitor for comprehensive sensor data via native integration.  </li> <li>Linux: Uses <code>lm-sensors</code>  for direct hardware monitoring.  </li> <li>Licenses: LibreHardwareMonitor \u2014 MPL-2.0 (<code>licenses/LICENSE.MPL-2.txt</code>), lm-sensors \u2014 LGPL-2.1-or-later (<code>licenses/LICENSE.LGPL-2.1.txt</code>)</li> </ul>"},{"location":"#installation-python","title":"\ud83d\udce6 Installation (Python)","text":""},{"location":"#from-pypi","title":"From PyPI","text":"<pre><code>pip install hardview\n</code></pre>"},{"location":"#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/gafoo173/hardview.git\ncd hardview\npip install .\n</code></pre> <p>For supported platforms and full setup instructions, see <code>docs/INSTALL.md</code>.</p>"},{"location":"#usage-examples","title":"\ud83d\ude80 Usage Examples","text":""},{"location":"#hardview-not-recommended-for-monitoring-in-310-its-better-to-use-liveview","title":"HardView (Not recommended for monitoring in 3.1.0+. It's better to use LiveView)","text":"<pre><code>import HardView\nimport json\n\n# JSON output\nbios_json = HardView.get_bios_info()\ncpu_json = HardView.get_cpu_info() #In Linux all outputs N/A in this function \n\n# Python objects output\n#You must pass the parameter `false` in versions prior to 3.0.3, e.g. `HardView.get_bios_info_objects(false)`.\n\nbios_objects = HardView.get_bios_info_objects() \ncpu_objects = HardView.get_cpu_info_objects() #On Linux, all outputs of this function show N/A It is recommended in 3.1.0+ to use the cpuid function from LiveView.PyLiveCPU.\n\n# Performance monitoring\ncpu_usage_json = HardView.get_cpu_usage()\nram_usage_objects = HardView.get_ram_usage_objects()\n\n# Monitor over time\ncpu_monitor_json = HardView.monitor_cpu_usage_duration(5, 1000)\nram_monitor_objects = HardView.monitor_ram_usage_duration_objects(3, 500) \n\n# Pretty print CPU info\nimport pprint\npprint.pprint(json.loads(cpu_json))\n</code></pre>"},{"location":"#liveview","title":"LiveView","text":"<pre><code>from HardView.LiveView import PyLiveCPU, PyLiveRam, PyLiveDisk, PyLiveNetwork\nimport time\n\n# Initialize system monitors\ncpu_monitor = PyLiveCPU()         # CPU usage monitor\nram_monitor = PyLiveRam()         # RAM usage monitor\ndisk_monitor = PyLiveDisk(mode=1) # Disk R/W speed monitor (mode 1 for MB/s)\nnet_monitor = PyLiveNetwork()     # Network traffic monitor\n\nprint(\"System Monitor - Single Reading\")\nprint(\"-\" * 40)\n\n# Get system metrics with 1-second sampling interval\ncpu_usage = cpu_monitor.get_usage(1000)           # CPU percentage\nram_usage = ram_monitor.get_usage()               # RAM percentage\ndisk_rw = disk_monitor.get_usage(1000)            # Returns [(Read MB/s), (Write MB/s)]\nnet_traffic = net_monitor.get_usage(1000, mode=0) # Total network MB/s\n\n# Display current system status\nprint(f\"CPU: {cpu_usage:5.1f}% | RAM: {ram_usage:5.1f}% | \"\n      f\"Disk R/W: {disk_rw[0][1]:4.1f}/{disk_rw[1][1]:4.1f} MB/s | \"\n      f\"Network: {net_traffic:6.3f} MB/s\")\n\nprint(\"Monitoring complete.\")\n</code></pre>"},{"location":"#liveview-temperature-requires-admin-privileges","title":"LiveView (temperature) - Requires admin privileges","text":"<pre><code>#!/usr/bin/env python3\nimport sys\n\n# Check CPU temperature - single reading\nif sys.platform == \"win32\":\n    # Windows CPU temperature\n    try:\n        from HardView.LiveView import PyTempCpu\n        cpu_temp = PyTempCpu()  # Auto-initialize\n        temperature = cpu_temp.get_temp()\n        print(f\"CPU Temperature: {temperature:.1f}\u00b0C\")\n    except Exception as e:\n        print(f\"Windows temperature error: {e}\")\n\nelif sys.platform == \"linux\":\n    # Linux CPU temperature  \n    try:\n        from HardView.LiveView import PyLinuxSensor\n        sensor = PyLinuxSensor()\n        temperature = sensor.getCpuTemp()\n        if temperature &gt; 0:\n            print(f\"CPU Temperature: {temperature:.1f}\u00b0C\")\n        else:\n            print(\"CPU temperature not available\")\n    except Exception as e:\n        print(f\"Linux temperature error: {e}\")\n\nelse:\n    print(\"Unsupported platform\")\n</code></pre>"},{"location":"#sdk-temperature-rust","title":"SDK Temperature (Rust)","text":"<pre><code>use libloading::{Library, Symbol};\nuse std::os::raw::{c_double, c_int};\n\ntype InitFn = unsafe extern \"C\" fn() -&gt; c_int;\ntype ShutdownFn = unsafe extern \"C\" fn();\ntype GetTempFn = unsafe extern \"C\" fn() -&gt; c_double;\ntype UpdateFn = unsafe extern \"C\" fn();\n\n// Check if required DLLs exist next to the executable\nfn check_dependencies() -&gt; Result&lt;(), String&gt; {\n    let required_dlls = [\"HardwareTemp.dll\", \"HardwareWrapper.dll\", \"LibreHardwareMonitorLib.dll\", \"HidSharp.dll\"];\n\n    let exe_dir = std::env::current_exe()\n        .map_err(|e| format!(\"Failed to get executable path: {}\", e))?\n        .parent()\n        .ok_or(\"Failed to get executable directory\")?\n        .to_owned();\n\n    let mut missing = Vec::new();\n    for dll in &amp;required_dlls {\n        if !exe_dir.join(dll).exists() {\n            missing.push(*dll);\n        }\n    }\n\n    if !missing.is_empty() {\n        return Err(format!(\"Missing DLLs: {}\", missing.join(\", \")));\n    }\n    Ok(())\n}\n\nfn main() {\n    // Check dependencies first\n    if let Err(error) = check_dependencies() {\n        eprintln!(\"Error: {}\", error);\n        return;\n    }\n\n    // Load the library from executable directory\n    let exe_dir = std::env::current_exe().unwrap().parent().unwrap().to_owned();\n    let dll_path = exe_dir.join(\"HardwareTemp.dll\");\n\n    let lib = unsafe { \n        Library::new(&amp;dll_path).expect(\"Failed to load HardwareTemp.dll\") \n    };\n\n    unsafe {\n        // Load required functions\n        let init: Symbol&lt;InitFn&gt; = lib.get(b\"InitHardwareTempMonitor\\0\").expect(\"InitHardwareTempMonitor not found\");\n        let get_cpu_temp: Symbol&lt;GetTempFn&gt; = lib.get(b\"GetCpuTemperatureTemp\\0\").expect(\"GetCpuTemperatureTemp not found\");\n        let update: Symbol&lt;UpdateFn&gt; = lib.get(b\"UpdateHardwareMonitorTemp\\0\").expect(\"UpdateHardwareMonitorTemp not found\");\n        let shutdown: Symbol&lt;ShutdownFn&gt; = lib.get(b\"ShutdownHardwareTempMonitor\\0\").expect(\"ShutdownHardwareTempMonitor not found\");\n\n        // Initialize hardware monitor\n        let init_result = init();\n        if init_result != 0 {\n            eprintln!(\"Failed to initialize hardware monitor. Error code: {}\", init_result);\n            return;\n        }\n\n        // Update and get CPU temperature\n        update();\n        let cpu_temp = get_cpu_temp();\n\n        // Display result\n        match cpu_temp {\n            -1.0 =&gt; println!(\"CPU Temperature: ERROR - Run as Administrator or sensor not supported\"),\n            -99.0 =&gt; println!(\"CPU Temperature: ERROR - Missing dependencies\"),\n            temp =&gt; println!(\"CPU Temperature: {:.1} \u00b0C\", temp),\n        }\n\n        // Cleanup\n        shutdown();\n    }\n}\n</code></pre>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<p>Full documentation is available on the GitHub Pages website:</p> <p>\u27a1\ufe0f https://gafoo173.github.io/HardView/</p> <p>All documentation is in the <code>docs/</code> folder:</p> <ul> <li><code>What.md</code>: API Reference &amp; Output Examples   Full explanation of every function, what info it returns, how to use it from Python, and real output samples..</li> <li><code>INSTALL.md</code>: Installation Guide   Supported platforms, installation methods, and troubleshooting tips.</li> <li><code>FAQ.md</code>: Frequently Asked Questions   Solutions to common installation, usage, and troubleshooting issues.</li> <li><code>LiveViewAPI.md</code>: LiveView API Reference   Detailed explanation of the LiveView module API, including functions, usage, and examples.</li> <li><code>LiveViewErrors.md</code>: LiveView Errors &amp; Exceptions   Guides and examples for handling errors and exceptions in the LiveView module.</li> </ul>"},{"location":"#api-reference-summary","title":"\ud83d\udcd6 API Reference (Summary)","text":"Function (JSON) Function (Python Object) Description <code>get_bios_info()</code> <code>get_bios_info_objects()</code> BIOS vendor, version, release date <code>get_system_info()</code> <code>get_system_info_objects()</code> System manufacturer, product name, UUID <code>get_baseboard_info()</code> <code>get_baseboard_info_objects()</code> Motherboard info <code>get_chassis_info()</code> <code>get_chassis_info_objects()</code> Chassis/computer case info <code>get_cpu_info()</code>   (Windows Only) <code>get_cpu_info_objects()</code>  (Windows Only) Processor details <code>get_ram_info()</code> <code>get_ram_info_objects()</code> Memory modules and totals <code>get_gpu_info</code>      (Windows Only) <code>get_gpu_info_objects()</code>     (Windows Only) GPU information <code>get_disk_info()</code> <code>get_disk_info_objects()</code> Storage devices <code>get_network_info()</code> <code>get_network_info_objects()</code> Network adapters <code>get_partitions_info()</code> <code>get_partitions_info_objects()</code> Disk partitions (advanced) <code>get_smart_info()</code> <code>get_smart_info_objects()</code> Full disk/SMART info (advanced) <code>get_cpu_usage()</code> <code>get_cpu_usage_objects()</code> Current CPU usage <code>get_ram_usage()</code> <code>get_ram_usage_objects()</code> Current RAM usage <code>get_system_performance()</code> <code>get_system_performance_objects()</code> Combined CPU/RAM usage <code>monitor_cpu_usage_duration(d, i)</code> <code>monitor_cpu_usage_duration_objects(d,i)</code> Monitor CPU usage over time <code>monitor_ram_usage_duration(d, i)</code> <code>monitor_ram_usage_duration_objects(d,i)</code> Monitor RAM usage over time <code>monitor_system_performance_duration(d,i)</code> <code>monitor_system_performance_duration_objects(d,i)</code> Monitor system performance over time"},{"location":"#liveview-classes-methods","title":"\ud83d\udda5\ufe0f LiveView Classes &amp; Methods","text":""},{"location":"#api-reference","title":"API Reference","text":"Class.Method Aliases Description <code>PyLiveCPU.get_usage(interval_ms)</code> --- Get total CPU usage % over a given interval. <code>PyLiveCPU.cpuid()</code> <code>cpu_id()</code> Get CPU details via CPUID instruction. <code>PyLiveCPU.CpuSnapShot(...)</code> (Windows) <code>cpu_snapshot(...)</code> Get raw CPU time counters for a specific core or number of cores. <code>PyLiveRam.get_usage(Raw=False)</code> --- Get total RAM usage % or raw <code>[used_bytes, total_bytes]</code>. <code>PyLiveDisk(mode)</code> --- Create disk monitor (mode=0 % usage [Windows], mode=1 R/W MB/s). <code>PyLiveDisk.get_usage(interval)</code> --- Get disk usage as % or <code>{Read MB/s, Write MB/s}</code>. <code>PyLiveDisk.HighDiskUsage(...)</code> <code>high_disk_usage(...)</code> Check if disk R/W exceeds threshold. <code>PyLiveNetwork.get_usage(interval, mode=0)</code> --- Get total MB/s (mode 0) or per-interface MB/s (mode 1). <code>PyLiveNetwork.getHighCard()</code> <code>get_high_card()</code> Get name of network adapter with highest usage. <code>PyLiveGpu.get_usage(interval_ms)</code> (Windows) --- Get total GPU usage %. <code>PyLiveGpu.get_average_usage(interval_ms)</code> (Windows) --- Get average GPU usage %. <code>PyLiveGpu.get_max_usage(interval_ms)</code> (Windows) --- Get maximum GPU usage %. <code>PyLiveGpu.get_counter_count()</code> (Windows) --- Get number of GPU counters monitored. <code>PyTempCpu.get_temp()</code> (Windows) --- Get current CPU temperature. <code>PyTempCpu.get_max_temp()</code> (Windows) --- Get max CPU core temperature. <code>PyTempCpu.get_avg_temp()</code> (Windows) --- Get average CPU core temperature. <code>PyTempCpu.get_fan_rpm()</code> (Windows) --- Get CPU fan RPM. <code>PyTempCpu.update()</code> --- Refresh CPU temperature &amp; fan RPM. <code>PyTempCpu.reget()</code> <code>re_get()</code> Re-read CPU temperature &amp; fan RPM. <code>PyTempGpu.get_temp()</code> (Windows) --- Get current GPU temperature. <code>PyTempGpu.get_fan_rpm()</code> (Windows) --- Get GPU fan RPM. <code>PyTempGpu.update()</code> --- Refresh GPU temperature and fan RPM. <code>PyTempGpu.reget()</code> <code>re_get()</code> Re-read GPU temperature and fan RPM. <code>PyTempOther.get_mb_temp()</code> (Windows) --- Get motherboard temperature. <code>PyTempOther.get_Storage_temp()</code> (Windows) <code>get_storage_temp()</code> Get storage temperature. <code>PyTempOther.update()</code> --- Refresh other temperatures. <code>PyTempOther.reget()</code> <code>re_get()</code> Re-read other temperatures. <code>PySensor.GetData(init=False)</code> (Windows) <code>get_data(init=False)</code> Fetch sensors &amp; fan data. <code>PySensor.GetValueByName(name)</code> (Windows) <code>get_value_by_name(name)</code> Get sensor value by name. <code>PySensor.getAllSensors()</code> (Windows) <code>get_all_sensors()</code> List all sensor names. <code>PySensor.getAllFanRPMs()</code> (Windows) <code>get_all_fan_rpms()</code> List all fan RPM readings. <code>PySensor.update()</code> --- Refresh sensors &amp; fans data. <code>PySensor.reget()</code> <code>re_get()</code> Re-fetch sensors &amp; fans data. <code>PyManageTemp.Init()</code> (Windows) <code>init()</code> Initialize temperature monitoring. <code>PyManageTemp.Close()</code> (Windows) <code>close()</code> Shutdown temperature monitoring. <code>PyManageTemp.Update()</code> (Windows) <code>update()</code> Update all temperature data. <code>PyRawInfo.RSMB()</code> (Windows) <code>rsmb()</code> Get raw SMBIOS table bytes. <code>PyLinuxSensor.getCpuTemp()</code> (Linux) <code>get_cpu_temp()</code> Get CPU temperature. <code>PyLinuxSensor.getChipsetTemp()</code> (Linux) <code>get_chipset_temp()</code> Get chipset temperature. <code>PyLinuxSensor.getMotherboardTemp()</code> (Linux) <code>get_motherboard_temp()</code> Get motherboard temperature. <code>PyLinuxSensor.getVRMTemp()</code> (Linux) <code>get_vrm_temp()</code> Get VRM/memory temperature. <code>PyLinuxSensor.getDriveTemp()</code> (Linux) <code>get_drive_temp()</code> Get storage temperature. <code>PyLinuxSensor.getAllSensorNames()</code> (Linux) <code>get_all_sensor_names()</code> List all sensor names. <code>PyLinuxSensor.findSensorName(name)</code> (Linux) <code>find_sensor_name(name)</code> Search for a sensor name. <code>PyLinuxSensor.GetSensorTemp(name, Match)</code> (Linux) <code>get_sensor_temp(name, Match)</code> Get sensor temperature by name. <code>PyLinuxSensor.GetSensorsWithTemp()</code> (Linux) <code>get_sensors_with_temp()</code> Get all sensors with their temperatures. <code>PyLinuxSensor.update(names=False)</code> (Linux) --- Refresh sensor readings."},{"location":"#platform-support","title":"\ud83e\uddea Platform Support","text":"Feature Windows Linux BIOS Info \u2705 \u2705 System Info \u2705 \u2705 Baseboard Info \u2705 \u2705 Chassis Info \u2705 \u2705 CPU Info \u2705 \u2705(by LiveView) RAM Info \u2705 \u2705 Disks \u2705 \u2705 Network \u2705 \u2705 Advanced Storage / SMART \u2705 \ud83d\udeab Performance Monitoring \u2705 \u2705"},{"location":"#development","title":"\ud83d\udee0\ufe0f Development","text":""},{"location":"#build-instructions","title":"Build Instructions","text":"<p>Windows:</p> <pre><code>python setup.py build_ext --inplace\n</code></pre> <p>Linux:</p> <pre><code>python setup.py build_ext --inplace\n</code></pre>"},{"location":"#license","title":"\ud83d\udcc4 License","text":""},{"location":"#core-project-hardview","title":"Core Project (HardView)","text":"<p>All core project files, including project-specific libraries and header files are licensed under the MIT License. They are free for both personal and commercial use.</p>"},{"location":"#tools-folder","title":"Tools Folder","text":"<p>All tools in the Tools folder are licensed under: GNU GENERAL PUBLIC LICENSE (GPL-3). You can read the full license terms in the file: LICENSE.GPL3.  </p>"},{"location":"#quick-start-and-tests","title":"\ud83d\ude80 Quick Start And Tests","text":"<p>For a quick and visually appealing colorful test in the console using the rich library, run the script: test.py</p> <p>To test all functions normally without coloring, use: TestAll.py</p> <p>LiveView Tests The LiveView test files are located in tests/units</p>"},{"location":"#contribution","title":"\ud83e\udd1d Contribution","text":"<p>Contributions are welcome!</p> <ul> <li>Fork and submit pull requests</li> <li>Report issues or feature requests</li> </ul> <p>HardView \u2014 Your Window into Hardware Information</p> <p>See <code>HardView API</code>: For the full HardView API</p> <p>See <code>LiveView API</code>: For the full LiveView API</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"\ud83d\udcdc Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#303-hotfix-release","title":"[3.0.3] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights","title":"Highlights:","text":"<ul> <li>Fixed the default value error in the objects functions that was causing them to return JSON when false was not explicitly specified.</li> <li>API Update 3.0.2</li> </ul>"},{"location":"CHANGELOG/#302-hotfix-release","title":"[3.0.2] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_1","title":"Highlights:","text":"<ul> <li>Fixed an issue where the CPU architecture property was returning <code>N/A</code>.</li> <li>Fixed a bug in GPU information retrieval on Linux that caused it to always appear empty.</li> <li>API Update 3.0.1</li> </ul>"},{"location":"CHANGELOG/#301-hotfix-release","title":"[3.0.1] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_2","title":"Highlights:","text":"<ul> <li>Fixed packaging issues that caused PyPI upload failures in version <code>3.0.0</code>.</li> <li>Fix RECORD file missing error in pypi wheels.</li> <li>No changes to functionality or API.</li> </ul>"},{"location":"CHANGELOG/#300-major-release","title":"[3.0.0] - Major Release","text":""},{"location":"CHANGELOG/#highlights_3","title":"Highlights:","text":"<ul> <li> <p>Structural Change for Output:</p> </li> <li> <p>The library now supports returning data as native Python objects in addition to JSON strings.</p> </li> <li> <p>New <code>_objects</code> functions:</p> </li> <li> <p>For each JSON-returning function, a corresponding <code>_objects</code> version has been added (e.g., <code>get_bios_info_objects()</code>).</p> </li> <li> <p>GPU Information Support:</p> </li> <li> <p>New functions introduced:</p> <ul> <li><code>get_gpu_info()</code>: GPU info as JSON</li> <li><code>get_gpu_info_objects()</code>: GPU info as Python objects</li> <li>API Update 3.0.0 <p>\u26a0\ufe0f Warning: Version <code>3.0.0</code> contains broken wheels that cause installation failure via pip. Please avoid using version 3.0.0 and use version <code>3.0.1</code> or higher instead.</p> </li> </ul> </li> </ul>"},{"location":"CHANGELOG/#203-hotfix-release","title":"[2.0.3] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_4","title":"Highlights:","text":"<ul> <li> <p>Fixed <code>get_smart_info()</code> inconsistency:</p> </li> <li> <p>Resolved an issue where the function occasionally returned zero for disk sectors, cylinders, and tracks.</p> </li> <li>Ensured consistent and accurate SMART data retrieval.</li> <li>API Update 2.0.2</li> </ul>"},{"location":"CHANGELOG/#202-hotfix-release","title":"[2.0.2] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_5","title":"Highlights:","text":"<ul> <li> <p>Fixed Typo in Output Binary Name:</p> </li> <li> <p>Resolved an issue where the output binary had inconsistent casing.</p> </li> <li>Output is now consistently named <code>HardView.pyd</code> or <code>HardView.so</code>.</li> <li>No functional/API changes.</li> </ul>"},{"location":"CHANGELOG/#201-hotfix-release","title":"[2.0.1] - Hotfix Release","text":""},{"location":"CHANGELOG/#highlights_6","title":"Highlights:","text":"<ul> <li> <p>Critical JSON Serialization Fix:</p> </li> <li> <p>Fixed improper escaping of backslashes (<code>\\</code>) in SMART disk JSON output.</p> </li> <li>Output is now fully JSON-compliant.</li> <li>API Update 2.0.1</li> </ul>"},{"location":"CHANGELOG/#200-major-release","title":"[2.0.0] - Major Release","text":""},{"location":"CHANGELOG/#highlights_7","title":"Highlights:","text":"<ul> <li> <p>Refactor:</p> </li> <li> <p>Each function moved to a separate C source file.</p> </li> <li>Improved memory safety and leak prevention.1</li> <li> <p>New Advanced Features:</p> </li> <li> <p><code>get_partitions_info()</code></p> </li> <li><code>get_smart_info()</code></li> <li><code>get_cpu_usage()</code></li> <li><code>get_ram_usage()</code></li> <li><code>get_system_performance()</code></li> <li><code>monitor_cpu_usage(duration, interval)</code></li> <li><code>monitor_ram_usage(duration, interval)</code></li> <li><code>monitor_system_performance(duration, interval)</code></li> <li>API Update 2.0.0</li> </ul>"},{"location":"CHANGELOG/#112","title":"[1.1.2]","text":""},{"location":"CHANGELOG/#highlights_8","title":"Highlights:","text":"<ul> <li>Fixed several memory leak issues.</li> <li>No feature changes.</li> </ul>"},{"location":"CHANGELOG/#100-first-stable-release","title":"[1.0.0] - First Stable Release","text":""},{"location":"CHANGELOG/#highlights_9","title":"Highlights:","text":"<ul> <li>Initial stable release with all core features from <code>0.1.0</code>.</li> <li>Improved import experience: binary is now <code>HardView.pyd</code> / <code>HardView.so</code>.</li> </ul>"},{"location":"CHANGELOG/#010-initial-release","title":"[0.1.0] - Initial Release","text":""},{"location":"CHANGELOG/#core-features","title":"Core Features:","text":"<ul> <li><code>get_bios_info()</code></li> <li><code>get_system_info()</code></li> <li><code>get_baseboard_info()</code></li> <li><code>get_chassis_info()</code></li> <li><code>get_cpu_info()</code></li> <li><code>get_ram_info()</code></li> <li><code>get_disk_info()</code></li> <li><code>get_network_info()</code></li> <li><code>get_partitions_info()</code></li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing to HardView","text":"<p>Thank you for your interest in contributing to HardView! Your help is valuable in making this library robust, fast, and reliable across all supported platforms.</p>"},{"location":"CONTRIBUTING/#how-you-can-contribute","title":"How You Can Contribute","text":""},{"location":"CONTRIBUTING/#1-test-on-different-architectures-environments","title":"1. Test on Different Architectures &amp; Environments","text":"<ul> <li>Try HardView on various systems (Windows 32/64-bit, Linux x86/x86_64, different Python versions).</li> <li>Report any issues you encounter, especially those related to installation, import, or hardware detection.</li> <li>Share your results and environment details (OS, Python version, hardware specs).</li> </ul>"},{"location":"CONTRIBUTING/#2-report-bugs-issues","title":"2. Report Bugs &amp; Issues","text":"<ul> <li>If you find a bug, please open an issue on GitHub.</li> <li>Include:</li> <li>Clear description of the problem</li> <li>Steps to reproduce</li> <li>Your OS, Python version, and HardView version</li> <li>Any error messages or logs</li> </ul>"},{"location":"CONTRIBUTING/#3-suggest-features-improvements","title":"3. Suggest Features &amp; Improvements","text":"<ul> <li>If you have an idea for a new feature or improvement, open an issue with the \"enhancement\" label.</li> <li>Describe the use case and why it would be helpful.</li> </ul>"},{"location":"CONTRIBUTING/#4-code-contributions-pull-requests","title":"4. Code Contributions (Pull Requests)","text":"<ul> <li>Fork the repository and create a new branch for your changes.</li> <li>Follow the existing code style (C99 for C code, PEP8 for Python code).</li> <li>Add or update documentation and tests as needed.</li> <li>Make sure your code builds and passes all tests on supported platforms.</li> <li>Submit a pull request with a clear description of your changes.</li> </ul>"},{"location":"CONTRIBUTING/#5-share-benchmarks-usage-examples","title":"5. Share Benchmarks &amp; Usage Examples","text":"<ul> <li>If you run performance tests or use HardView in a real project, share your results and scripts.</li> <li>This helps others understand the library's capabilities and performance.</li> </ul>"},{"location":"CONTRIBUTING/#6-help-with-documentation","title":"6. Help with Documentation","text":"<ul> <li>Improve or expand the documentation (in <code>docs/</code>).</li> <li>Add new examples, clarify existing sections, or translate docs to other languages.</li> </ul>"},{"location":"CONTRIBUTING/#code-style-guidelines","title":"Code Style &amp; Guidelines","text":"<ul> <li>C code: Use C99 standard, 4-space indentation, and clear, descriptive names.</li> <li>Python code: Follow PEP8.</li> <li>Write comments for complex logic and public functions.</li> <li>Keep functions small and focused.</li> </ul>"},{"location":"CONTRIBUTING/#running-tests","title":"Running Tests","text":"<ul> <li>(If available) Run the provided test scripts to verify your changes.</li> <li>Test on as many platforms and Python versions as possible.</li> </ul>"},{"location":"CONTRIBUTING/#questions","title":"Questions?","text":"<ul> <li>If you have questions about contributing, open an issue or start a discussion on GitHub.</li> </ul> <p>Thank you for helping make HardView better! </p>"},{"location":"FAQ/","title":"\u2753 HardView Frequently Asked Questions (FAQ)","text":"<p>This FAQ addresses common issues and questions about installing, using, and troubleshooting the HardView library.</p>"},{"location":"FAQ/#q1-pip-install-fails-or-cannot-find-a-suitable-wheel","title":"Q1: <code>pip install</code> fails or cannot find a suitable wheel","text":"<p>A:</p> <ul> <li>Ensure you are using a supported platform (Windows 32/64-bit or Linux x86/x86_64).</li> <li>Make sure your Python version is supported (check PyPI).</li> <li>Upgrade pip to the latest version:</li> </ul> <p><pre><code>pip install --upgrade pip\n</code></pre> * If no wheel is available for your platform, try building from source (see <code>INSTALL.md</code>).</p>"},{"location":"FAQ/#q2-hardview-does-not-work-after-installation","title":"Q2: HardView does not work after installation","text":"<p>A:</p> <ul> <li>Confirm that your system architecture (32/64-bit) matches the installed wheel.</li> <li>Ensure you have the latest version of HardView.</li> <li>Unsupported platforms like Arch, Android, or macOS are not supported.</li> <li>Try reinstalling:</li> </ul> <pre><code>pip uninstall hardview\npip install hardview\n</code></pre>"},{"location":"FAQ/#q3-importerror-or-cannot-import-hardview","title":"Q3: <code>ImportError</code> or <code>cannot import HardView</code>","text":"<p>A:</p> <ul> <li>Verify that the binary file is named exactly <code>HardView.pyd</code> or <code>HardView.so</code> (uppercase H and V).</li> <li>Upgrade to HardView &gt; 0.1.0 to fix import issues.</li> <li>Use correct casing in your import statement:</li> </ul> <pre><code>import HardView\n</code></pre>"},{"location":"FAQ/#q4-output-data-is-missing-or-not-displayed-correctly","title":"Q4: Output data is missing or not displayed correctly","text":"<p>A:</p> <ul> <li>HardView can return JSON strings or native Python objects.</li> <li>For JSON:</li> </ul> <p><pre><code>import json\nimport HardView\ndata = json.loads(HardView.get_cpu_info(True))\nprint(data)\n</code></pre> * For Python objects:</p> <p><pre><code>import HardView\ndata_obj = HardView.get_cpu_info_objects(False)\nprint(data_obj)\n</code></pre> * If the output includes <code>{ \"error\": ... }</code>, check the message for details.</p>"},{"location":"FAQ/#q5-does-hardview-support-linux-macos-or-other-platforms","title":"Q5: Does HardView support Linux, macOS, or other platforms?","text":"<p>A:</p> <ul> <li>HardView supports Windows (32/64-bit) and Linux (x86/x86_64) only.</li> <li>Not supported on Arch, Android, or macOS.</li> </ul>"},{"location":"FAQ/#q6-which-python-versions-are-supported","title":"Q6: Which Python versions are supported?","text":"<p>A:</p> <ul> <li>See PyPI for available wheels.</li> <li>If your version is not listed, try building from source.</li> </ul>"},{"location":"FAQ/#q7-how-do-i-get-help-or-report-a-bug","title":"Q7: How do I get help or report a bug?","text":"<p>A:</p> <ul> <li>Check <code>docs/</code> first (especially <code>What.md</code>).</li> <li>If your issue persists, open a GitHub issue with OS, Python version, and error logs.</li> </ul>"},{"location":"FAQ/#q8-is-hardview-thread-safe","title":"Q8: Is HardView thread-safe?","text":"<p>A:</p> <p>HardView is not thread-safe.</p>"},{"location":"FAQ/#q9-how-can-i-contribute-to-hardview","title":"Q9: How can I contribute to HardView?","text":"<p>A:</p> <ul> <li>See <code>CONTRIBUTING.md</code> or main <code>README.md</code>.</li> <li>Pull requests and bug reports are welcome!</li> </ul>"},{"location":"FAQ/#q10-why-is-hardview-faster-than-other-python-libraries","title":"Q10: Why is HardView faster than other Python libraries?","text":"<p>A:</p> <ul> <li>It's written entirely in C and communicates directly with system APIs \u2014 minimal overhead.</li> </ul>"},{"location":"FAQ/#q11-how-do-i-monitor-hardware-performance-over-time","title":"Q11: How do I monitor hardware performance over time?","text":"<p>A:</p> <ul> <li>Use functions like <code>monitor_cpu_usage_duration(duration, interval)</code>.</li> <li>Both JSON and Python object formats are available.</li> <li>Examples are in <code>docs/What.md</code>.</li> </ul>"},{"location":"FAQ/#q12-can-i-use-hardview-in-a-virtual-environment","title":"Q12: Can I use HardView in a virtual environment?","text":"<p>A:</p> <ul> <li>Yes. HardView works with standard virtual environments like <code>virtualenv</code> and <code>venv</code>.</li> </ul> <p>For more details, check the full documentation in <code>docs/</code> or open an issue if your question isn\u2019t listed.</p>"},{"location":"HardwareTempAPI/","title":"HardwareTemp Library Documentation","text":""},{"location":"HardwareTempAPI/#overview","title":"Overview","text":"<p>The HardwareTemp library is a C/C++ wrapper around the LibreHardwareMonitor .NET library, providing easy access to hardware monitoring capabilities including temperature readings, fan speeds, and other sensor data. The library consists of two main components:</p> <ul> <li>HardwareWrapper.dll - A managed C++/CLI wrapper that interfaces with LibreHardwareMonitor</li> <li>HardwareTemp.h/.dll - A native C++ library that provides a clean C-style API</li> </ul>"},{"location":"HardwareTempAPI/#architecture","title":"Architecture","text":"<pre><code>Your Application\n       \u2193\nHardwareTemp.h (Native C++)\n       \u2193\nHardwareWrapper.dll (C++/CLI)\n       \u2193\nLibreHardwareMonitor (.NET)\n       \u2193\nHardware Sensors\n</code></pre>"},{"location":"HardwareTempAPI/#installation-and-setup","title":"Installation and Setup","text":"<ol> <li>Ensure <code>HardwareWrapper.dll</code> and <code>LibreHardwareMonitor.dll</code> and <code>HidSharp.dll</code> are in your application directory</li> <li>Include <code>HardwareTemp.h</code> in your project or <code>HardwareTemp.dll</code></li> <li>Link against the necessary Windows libraries (Ole32.lib is automatically linked)</li> </ol>"},{"location":"HardwareTempAPI/#error-codes","title":"Error Codes","text":"Code Constant Description 0 HWSUC Success -1 HWERR_MISS_FUNCTION Function missing from DLL -99 HWERR_NULL_FUNCTION Function pointer is null"},{"location":"HardwareTempAPI/#api-reference","title":"API Reference","text":""},{"location":"HardwareTempAPI/#initialization-and-cleanup","title":"Initialization and Cleanup","text":""},{"location":"HardwareTempAPI/#inithardwaretempmonitor","title":"<code>InitHardwareTempMonitor()</code>","text":"<p><pre><code>int InitHardwareTempMonitor();\n</code></pre> Initializes the hardware monitoring system by loading the HardwareWrapper.dll and setting up all function pointers.</p> <p>Returns: - <code>0</code> - Success or already initialized - <code>&gt; 0</code> - Windows error code from LoadLibrary - <code>-1</code> - Failed to load required functions</p> <p>Example: <pre><code>int result = InitHardwareTempMonitor();\nif (result != 0) {\n    std::cout &lt;&lt; \"Failed to initialize hardware monitor: \" &lt;&lt; result &lt;&lt; std::endl;\n    return -1;\n}\n</code></pre></p>"},{"location":"HardwareTempAPI/#shutdownhardwaretempmonitor","title":"<code>ShutdownHardwareTempMonitor()</code>","text":"<p><pre><code>void ShutdownHardwareTempMonitor();\n</code></pre> Cleans up resources and unloads the HardwareWrapper.dll.</p> <p>Example: <pre><code>ShutdownHardwareTempMonitor();\n</code></pre></p>"},{"location":"HardwareTempAPI/#updatehardwaremonitortemp","title":"<code>UpdateHardwareMonitorTemp()</code>","text":"<p><pre><code>void UpdateHardwareMonitorTemp();\n</code></pre> Updates all sensor readings. Should be called before reading sensor values to ensure fresh data.</p> <p>Example: <pre><code>UpdateHardwareMonitorTemp();\ndouble cpuTemp = GetCpuTemperatureTemp();\n</code></pre></p>"},{"location":"HardwareTempAPI/#temperature-functions","title":"Temperature Functions","text":""},{"location":"HardwareTempAPI/#getcputemperaturetemp","title":"<code>GetCpuTemperatureTemp()</code>","text":"<p><pre><code>double GetCpuTemperatureTemp();\n</code></pre> Gets the first CPU Package temperature.</p> <p>Returns: - Temperature in Celsius - <code>-1.0</code> - No sensor found - <code>-99.0</code> - Function not available</p> <p>Example: <pre><code>UpdateHardwareMonitorTemp();\ndouble temp = GetCpuTemperatureTemp();\nif (temp &gt; 0) {\n    std::cout &lt;&lt; \"CPU Temperature: \" &lt;&lt; temp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n}\n</code></pre></p>"},{"location":"HardwareTempAPI/#getaveragecpucoretemperaturetemp","title":"<code>GetAverageCpuCoreTemperatureTemp()</code>","text":"<p><pre><code>double GetAverageCpuCoreTemperatureTemp();\n</code></pre> Calculates the average temperature across all CPU Cores temperature </p> <p>Returns: - Average temperature in Celsius of all \"Core\"-named sensors - <code>-1.0</code> - No \"Core\" sensors found - <code>-99.0</code> - Function not available</p> <p>Example: <pre><code>double avgTemp = GetAverageCpuCoreTemperatureTemp();\nstd::cout &lt;&lt; \"Average of Core Sensors: \" &lt;&lt; avgTemp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n</code></pre></p>"},{"location":"HardwareTempAPI/#getmaxcpucoretemperaturetemp","title":"<code>GetMaxCpuCoreTemperatureTemp()</code>","text":"<p><pre><code>double GetMaxCpuCoreTemperatureTemp();\n</code></pre> Gets the highest temperature among all CPU cores temperature </p> <p>Returns: - Maximum temperature in Celsius among all \"Core\"-named sensors - <code>-1.0</code> - No \"Core\" sensors found - <code>-99.0</code> - Function not available</p> <p>Example: <pre><code>double maxTemp = GetMaxCpuCoreTemperatureTemp();\nif (maxTemp &gt; 80.0) {\n    std::cout &lt;&lt; \"WARNING: Highest Core sensor reading: \" &lt;&lt; maxTemp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n}\n</code></pre></p>"},{"location":"HardwareTempAPI/#getgputemperaturetemp","title":"<code>GetGpuTemperatureTemp()</code>","text":"<p><pre><code>double GetGpuTemperatureTemp();\n</code></pre> Gets GPU temperature. Automatically detects NVIDIA, AMD, or Intel GPUs.</p> <p>Returns: - GPU temperature in Celsius - <code>-1.0</code> - No GPU sensor found - <code>-99.0</code> - Function not available</p> <p>Example: <pre><code>double gpuTemp = GetGpuTemperatureTemp();\nif (gpuTemp &gt; 0) {\n    std::cout &lt;&lt; \"GPU Temperature: \" &lt;&lt; gpuTemp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n}\n</code></pre></p>"},{"location":"HardwareTempAPI/#getmotherboardtemperaturetemp","title":"<code>GetMotherboardTemperatureTemp()</code>","text":"<p><pre><code>double GetMotherboardTemperatureTemp();\n</code></pre> Gets motherboard/system temperature.</p> <p>Returns: - Motherboard temperature in Celsius - <code>-1.0</code> - No sensor found - <code>-99.0</code> - Function not available</p>"},{"location":"HardwareTempAPI/#getstoragetemperaturetemp","title":"<code>GetStorageTemperatureTemp()</code>","text":"<p><pre><code>double GetStorageTemperatureTemp();\n</code></pre> Gets storage device (SSD/HDD) temperature.</p> <p>Returns: - Storage temperature in Celsius - <code>-1.0</code> - No sensor found - <code>-99.0</code> - Function not available</p>"},{"location":"HardwareTempAPI/#fan-speed-functions","title":"Fan Speed Functions","text":""},{"location":"HardwareTempAPI/#getcpufanrpmtemp","title":"<code>GetCpuFanRpmTemp()</code>","text":"<p><pre><code>double GetCpuFanRpmTemp();\n</code></pre> Gets CPU fan speed in RPM.</p> <p>Returns: - Fan speed in RPM - <code>-1.0</code> - No fan sensor found - <code>-99.0</code> - Function not available</p> <p>Example: <pre><code>double fanSpeed = GetCpuFanRpmTemp();\nif (fanSpeed &gt; 0) {\n    std::cout &lt;&lt; \"CPU Fan Speed: \" &lt;&lt; fanSpeed &lt;&lt; \" RPM\" &lt;&lt; std::endl;\n}\n</code></pre></p>"},{"location":"HardwareTempAPI/#getgpufanrpmtemp","title":"<code>GetGpuFanRpmTemp()</code>","text":"<p><pre><code>double GetGpuFanRpmTemp();\n</code></pre> Gets GPU fan speed in RPM.</p> <p>Returns: - Fan speed in RPM - <code>-1.0</code> - No fan sensor found - <code>-99.0</code> - Function not available</p>"},{"location":"HardwareTempAPI/#getallfanrpmstemp","title":"<code>GetAllFanRpmsTemp()</code>","text":"<p><pre><code>void GetAllFanRpmsTemp(char*** fanNames, double** rpms, int* count);\n</code></pre> Gets all available fan sensors with their names and speeds.</p> <p>Parameters: - <code>fanNames</code> - Output array of fan names - <code>rpms</code> - Output array of fan speeds - <code>count</code> - Number of fans found</p> <p>Example: <pre><code>char** fanNames = nullptr;\ndouble* rpms = nullptr;\nint fanCount = 0;\n\nGetAllFanRpmsTemp(&amp;fanNames, &amp;rpms, &amp;fanCount);\n\nfor (int i = 0; i &lt; fanCount; i++) {\n    std::cout &lt;&lt; \"Fan: \" &lt;&lt; fanNames[i] &lt;&lt; \" - Speed: \" &lt;&lt; rpms[i] &lt;&lt; \" RPM\" &lt;&lt; std::endl;\n}\n\nFreeFanDataTemp(fanNames, rpms, fanCount);\n</code></pre></p>"},{"location":"HardwareTempAPI/#freefandatatemp","title":"<code>FreeFanDataTemp()</code>","text":"<p><pre><code>void FreeFanDataTemp(char** fanNames, double* rpms, int count);\n</code></pre> Frees memory allocated by <code>GetAllFanRpmsTemp()</code>.</p>"},{"location":"HardwareTempAPI/#generic-sensor-functions","title":"Generic Sensor Functions","text":""},{"location":"HardwareTempAPI/#getavailablesensorstemp","title":"<code>GetAvailableSensorsTemp()</code>","text":"<p><pre><code>void GetAvailableSensorsTemp(char*** sensorNames, int* count);\n</code></pre> Gets a list of all available sensors in the system.</p> <p>Parameters: - <code>sensorNames</code> - Output array of sensor names - <code>count</code> - Number of sensors found</p> <p>Example: <pre><code>char** sensorNames = nullptr;\nint sensorCount = 0;\n\nGetAvailableSensorsTemp(&amp;sensorNames, &amp;sensorCount);\n\nstd::cout &lt;&lt; \"Available sensors:\" &lt;&lt; std::endl;\nfor (int i = 0; i &lt; sensorCount; i++) {\n    std::cout &lt;&lt; \"  \" &lt;&lt; sensorNames[i] &lt;&lt; std::endl;\n}\n\nFreeSensorNamesTemp(sensorNames, sensorCount);\n</code></pre></p>"},{"location":"HardwareTempAPI/#getspecificsensorvaluetemp","title":"<code>GetSpecificSensorValueTemp()</code>","text":"<p><pre><code>double GetSpecificSensorValueTemp(const char* fullSensorName);\n</code></pre> Gets the value of a specific sensor by its full name.</p> <p>Parameters: - <code>fullSensorName</code> - Full sensor name (format: \"Hardware Name - Sensor Type - Sensor Name\")</p> <p>Returns: - Sensor value - <code>-1.0</code> - Sensor not found - <code>-99.0</code> - Function not available</p> <p>Example: <pre><code>double value = GetSpecificSensorValueTemp(\"Intel Core i7-9700K - Temperature - Core #0\");\nif (value &gt; 0) {\n    std::cout &lt;&lt; \"Core #0 Temperature: \" &lt;&lt; value &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n}\n</code></pre></p>"},{"location":"HardwareTempAPI/#freesensornamestemp","title":"<code>FreeSensorNamesTemp()</code>","text":"<p><pre><code>void FreeSensorNamesTemp(char** sensorNames, int count);\n</code></pre> Frees memory allocated by <code>GetAvailableSensorsTemp()</code>.</p>"},{"location":"HardwareTempAPI/#complete-usage-example","title":"Complete Usage Example","text":"<pre><code>#include \"HardwareTemp.h\"\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;chrono&gt;\n\nint main() {\n    // Initialize the hardware monitor\n    if (InitHardwareTempMonitor() != 0) {\n        std::cout &lt;&lt; \"Failed to initialize hardware monitor!\" &lt;&lt; std::endl;\n        return -1;\n    }\n\n    std::cout &lt;&lt; \"Hardware monitor initialized successfully!\" &lt;&lt; std::endl;\n\n    // Monitor temperatures for 30 seconds\n    for (int i = 0; i &lt; 30; i++) {\n        // Update sensor readings\n        UpdateHardwareMonitorTemp();\n\n        // Get temperatures\n        double cpuTemp = GetCpuTemperatureTemp();\n        double avgCpuTemp = GetAverageCpuCoreTemperatureTemp();\n        double maxCpuTemp = GetMaxCpuCoreTemperatureTemp();\n        double gpuTemp = GetGpuTemperatureTemp();\n\n        // Get fan speeds\n        double cpuFan = GetCpuFanRpmTemp();\n        double gpuFan = GetGpuFanRpmTemp();\n\n        // Display results\n        std::cout &lt;&lt; \"\\n--- Hardware Status ---\" &lt;&lt; std::endl;\n        if (cpuTemp &gt; 0) std::cout &lt;&lt; \"CPU Temperature: \" &lt;&lt; cpuTemp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n        if (avgCpuTemp &gt; 0) std::cout &lt;&lt; \"Avg CPU Temperature: \" &lt;&lt; avgCpuTemp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n        if (maxCpuTemp &gt; 0) std::cout &lt;&lt; \"Max CPU Temperature: \" &lt;&lt; maxCpuTemp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n        if (gpuTemp &gt; 0) std::cout &lt;&lt; \"GPU Temperature: \" &lt;&lt; gpuTemp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n        if (cpuFan &gt; 0) std::cout &lt;&lt; \"CPU Fan Speed: \" &lt;&lt; cpuFan &lt;&lt; \" RPM\" &lt;&lt; std::endl;\n        if (gpuFan &gt; 0) std::cout &lt;&lt; \"GPU Fan Speed: \" &lt;&lt; gpuFan &lt;&lt; \" RPM\" &lt;&lt; std::endl;\n\n        // Wait 1 second\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n\n    // Cleanup\n    ShutdownHardwareTempMonitor();\n    return 0;\n}\n</code></pre>"},{"location":"HardwareTempAPI/#error-handling","title":"Error Handling","text":"<p>Always check return values and handle errors appropriately:</p> <pre><code>// Check initialization\nint result = InitHardwareTempMonitor();\nif (result != 0) {\n    // Handle initialization error\n    return -1;\n}\n\n// Check sensor readings\ndouble temp = GetCpuTemperatureTemp();\nif (temp == -99.0) {\n    std::cout &lt;&lt; \"Hardware monitoring not available\" &lt;&lt; std::endl;\n} else if (temp == -1.0) {\n    std::cout &lt;&lt; \"CPU temperature sensor not found\" &lt;&lt; std::endl;\n} else {\n    std::cout &lt;&lt; \"CPU Temperature: \" &lt;&lt; temp &lt;&lt; \"\u00b0C\" &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"HardwareTempAPI/#memory-management","title":"Memory Management","text":"<p>Always free allocated memory:</p> <pre><code>char** sensorNames = nullptr;\nint count = 0;\nGetAvailableSensorsTemp(&amp;sensorNames, &amp;count);\n\n// Use the sensor names...\n\n// Don't forget to free!\nFreeSensorNamesTemp(sensorNames, count);\n</code></pre>"},{"location":"HardwareTempAPI/#threading-considerations","title":"Threading Considerations","text":"<ul> <li>The library is not thread-safe</li> <li>Call <code>UpdateHardwareMonitorTemp()</code> from the same thread that reads sensor values</li> <li>Consider using mutex protection if accessing from multiple threads</li> </ul>"},{"location":"HardwareTempAPI/#supported-hardware","title":"Supported Hardware","text":"<p>The library supports hardware monitoring through LibreHardwareMonitor, which includes:</p> <ul> <li>CPUs: Intel, AMD processors</li> <li>GPUs: NVIDIA, AMD, Intel graphics cards  </li> <li>Motherboards: Various chipsets</li> <li>Storage: SSDs, HDDs with temperature sensors</li> <li>Fans: Case fans, CPU coolers, GPU fans</li> </ul>"},{"location":"HardwareTempAPI/#license","title":"License","text":"<p>This library is released under the MIT License.</p>"},{"location":"INSTALL/","title":"HardView Installation Guide","text":"<p>This document explains how to install the HardView library on supported platforms.</p>"},{"location":"INSTALL/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Windows:</li> <li>32-bit and 64-bit (x86, x86_64)</li> <li>Linux:</li> <li>32-bit and 64-bit (x86, x86_64)</li> </ul> <p>Note: - Prebuilt wheels are provided for the above platforms and for multiple Python versions (see PyPI for details). - Not supported: Arch Linux, Android, and macOS. There is no native code or wheel support for these systems, as HardView does not implement platform-specific code for them.</p>"},{"location":"INSTALL/#installation-methods","title":"Installation Methods","text":""},{"location":"INSTALL/#1-install-from-pypi-recommended","title":"1. Install from PyPI (Recommended)","text":"<p>The easiest way to install HardView is via pip from the Python Package Index (PyPI):</p> <pre><code>pip install hardview\n</code></pre> <p>This will automatically download the correct prebuilt wheel for your platform and Python version (if available).</p>"},{"location":"INSTALL/#2-install-from-source","title":"2. Install from Source","text":"<p>If you want to build HardView yourself (for development or unsupported Python versions):</p> <pre><code>git clone https://github.com/yourusername/hardview.git\ncd hardview\npip install .\n</code></pre> <p>This will build the extension from source using your system's compiler.</p>"},{"location":"INSTALL/#python-version-compatibility","title":"Python Version Compatibility","text":"<ul> <li>HardView provides wheels for multiple Python versions (see PyPI for the list).</li> <li>If your Python version is not supported by a prebuilt wheel, you can build from source as above.</li> </ul>"},{"location":"INSTALL/#other-distribution-channels","title":"Other Distribution Channels","text":"<ul> <li>Currently, HardView is only distributed via PyPI or from the official GitHub repository.</li> <li>No other download or package sources are supported.</li> </ul>"},{"location":"INSTALL/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If you encounter issues during installation, please check your Python version and platform compatibility.</li> <li>For Windows, ensure you have a working C compiler (Visual Studio Build Tools recommended for source builds).</li> <li>For Linux, ensure you have Python development headers and a C compiler installed.</li> </ul> <p>For more help, see the FAQ or open an issue on the project's GitHub page. </p>"},{"location":"LinuxOutput/","title":"Linux System Information Output Examples","text":"<p>This document provides examples of system information output on Linux systems, demonstrating various hardware and performance monitoring functions.</p>"},{"location":"LinuxOutput/#bios-information","title":"BIOS Information","text":""},{"location":"LinuxOutput/#get_bios_info","title":"get_bios_info()","text":"<pre><code>{\n    \"manufacturer\": \"American Megatrends Inc.\",\n    \"version\": \"090008 \",\n    \"release_date\": \"12/07/2018\"\n}\n</code></pre> <p>Python Object: <pre><code>{\n    'manufacturer': 'American Megatrends Inc.', \n    'version': '090008 ', \n    'release_date': '12/07/2018'\n}\n</code></pre></p>"},{"location":"LinuxOutput/#system-information","title":"System Information","text":""},{"location":"LinuxOutput/#get_system_info","title":"get_system_info()","text":"<pre><code>{\n    \"manufacturer\": \"Microsoft Corporation\",\n    \"product_name\": \"Virtual Machine\",\n    \"uuid\": \"b6a4c6cb-c0f2-1941-ad6b-c8d6fd2e34c7\",\n    \"serial_number\": \"N/A\"\n}\n</code></pre> <p>Python Object: <pre><code>{\n    'manufacturer': 'Microsoft Corporation', \n    'product_name': 'Virtual Machine', \n    'uuid': 'b6a4c6cb-c0f2-1941-ad6b-c8d6fd2e34c7', \n    'serial_number': 'N/A'\n}\n</code></pre></p>"},{"location":"LinuxOutput/#baseboard-information","title":"Baseboard Information","text":""},{"location":"LinuxOutput/#get_baseboard_info","title":"get_baseboard_info()","text":"<pre><code>{\n    \"manufacturer\": \"Microsoft Corporation\",\n    \"product\": \"Virtual Machine\",\n    \"serial_number\": \"N/A\",\n    \"version\": \"7.0\"\n}\n</code></pre> <p>Python Object: <pre><code>{\n    'manufacturer': 'Microsoft Corporation', \n    'product': 'Virtual Machine', \n    'serial_number': 'N/A', \n    'version': '7.0'\n}\n</code></pre></p>"},{"location":"LinuxOutput/#chassis-information","title":"Chassis Information","text":""},{"location":"LinuxOutput/#get_chassis_info","title":"get_chassis_info()","text":"<pre><code>{\n    \"manufacturer\": \"Microsoft Corporation\",\n    \"model\": \"N/A\",\n    \"serial_number\": \"N/A\",\n    \"chassis_type\": \"3\"\n}\n</code></pre> <p>Python Object: <pre><code>{\n    'manufacturer': 'Microsoft Corporation', \n    'model': 'N/A', \n    'serial_number': 'N/A', \n    'chassis_type': '3'\n}\n</code></pre></p>"},{"location":"LinuxOutput/#cpu-information","title":"CPU Information","text":"<p>Note: This function is Windows-only. While it can be imported on Linux, all returned values will be <code>N/A</code> for strings and <code>0</code> for numeric fields.</p>"},{"location":"LinuxOutput/#ram-information","title":"RAM Information","text":""},{"location":"LinuxOutput/#get_ram_info","title":"get_ram_info()","text":"<pre><code>{\n    \"total_mem_bytes\": 8330170368,\n    \"free_mem_bytes\": 6166085632,\n    \"buffers_bytes\": 51146752,\n    \"cached_bytes\": 1555075072\n}\n</code></pre> <p>Python Object: <pre><code>{\n    'total_mem_bytes': 8330170368, \n    'free_mem_bytes': 6166085632, \n    'buffers_bytes': 51146752, \n    'cached_bytes': 1555075072\n}\n</code></pre></p>"},{"location":"LinuxOutput/#network-information","title":"Network Information","text":""},{"location":"LinuxOutput/#get_network_info","title":"get_network_info()","text":"<pre><code>{\n    \"network_adapters\": [\n        {\n            \"name\": \"lo\",\n            \"mac_address\": \"00:00:00:00:00:00\",\n            \"ipv4_addresses\": [\n                \"127.0.0.1\"\n            ],\n            \"ipv6_addresses\": [\n                \"::1\"\n            ]\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac_address\": \"00:22:48:91:79:99\",\n            \"ipv4_addresses\": [\n                \"10.1.0.131\"\n            ],\n            \"ipv6_addresses\": [\n                \"fe80::222:48ff:fe91:7999\"\n            ]\n        },\n        {\n            \"name\": \"docker0\",\n            \"mac_address\": \"2a:b8:e2:d9:c3:8d\",\n            \"ipv4_addresses\": [\n                \"172.17.0.1\"\n            ],\n            \"ipv6_addresses\": []\n        }\n    ]\n}\n</code></pre> <p>Python Object: <pre><code>[\n    {\n        'description': 'lo', \n        'mac_address': '00:00:00:00:00:00', \n        'ip_addresses': ['127.0.0.1\"]', '[\"::1'], \n        'dns_host_name': 'N/A'\n    }, \n    {\n        'description': 'eth0', \n        'mac_address': '00:22:48:91:79:99', \n        'ip_addresses': ['10.1.0.131\"]', '[\"fe80::222:48ff:fe91:7999'], \n        'dns_host_name': 'N/A'\n    }, \n    {\n        'description': 'docker0', \n        'mac_address': '2a:b8:e2:d9:c3:8d', \n        'ip_addresses': ['172.17.0.1\"]', '['], \n        'dns_host_name': 'N/A'\n    }\n]\n</code></pre></p>"},{"location":"LinuxOutput/#cpu-usage","title":"CPU Usage","text":""},{"location":"LinuxOutput/#get_cpu_usage","title":"get_cpu_usage()","text":"<pre><code>{\n    \"cpu_usage\": {\n        \"load_1min\": 0.17,\n        \"load_5min\": 0.07,\n        \"load_15min\": 0.02\n    }\n}\n</code></pre> <p>Python Object: <pre><code>{\n    'cpu_usage': {\n        'load_1min': 0.17, \n        'load_5min': 0.07, \n        'load_15min': 0.02\n    }\n}\n</code></pre></p>"},{"location":"LinuxOutput/#ram-usage","title":"RAM Usage","text":""},{"location":"LinuxOutput/#get_ram_usage","title":"get_ram_usage()","text":"<pre><code>{\n    \"ram_usage\": {\n        \"total_memory_kb\": 8134932,\n        \"free_memory_kb\": 6021440,\n        \"available_memory_kb\": 7343396,\n        \"used_memory_kb\": 791536,\n        \"usage_percent\": 9.73\n    }\n}\n</code></pre> <p>Python Object: <pre><code>{\n    'ram_usage': {\n        'total_memory_kb': 8134932, \n        'free_memory_kb': 6021440, \n        'available_memory_kb': 7343396, \n        'used_memory_kb': 791536, \n        'usage_percent': 9.730087479526565\n    }\n}\n</code></pre></p>"},{"location":"LinuxOutput/#system-performance","title":"System Performance","text":""},{"location":"LinuxOutput/#get_system_performance","title":"get_system_performance()","text":"<pre><code>{\n    \"system_performance\": {\n        \"cpu\": {\n            \"cpu_usage\": {\n                \"load_1min\": 0.17,\n                \"load_5min\": 0.07,\n                \"load_15min\": 0.02\n            }\n        },\n        \"ram\": {\n            \"ram_usage\": {\n                \"total_memory_kb\": 8134932,\n                \"free_memory_kb\": 6021440,\n                \"available_memory_kb\": 7343396,\n                \"used_memory_kb\": 791536,\n                \"usage_percent\": 9.73\n            }\n        }\n    }\n}\n</code></pre> <p>Python Object: <pre><code>{\n    'system_performance': {\n        'cpu': {\n            'load_1min': 0.17, \n            'load_5min': 0.07, \n            'load_15min': 0.02\n        }, \n        'ram': {\n            'total_memory_kb': 8134932, \n            'free_memory_kb': 6021440, \n            'available_memory_kb': 7343396, \n            'used_memory_kb': 791536, \n            'usage_percent': 9.730087479526565\n        }\n    }\n}\n</code></pre></p>"},{"location":"LinuxOutput/#disk-partitions-information","title":"Disk Partitions Information","text":""},{"location":"LinuxOutput/#get_partitions_info","title":"get_partitions_info()","text":"<pre><code>{\n    \"blockdevices\": [\n        {\n            \"name\": \"sda\",\n            \"size\": \"75G\",\n            \"model\": \"Virtual Disk\",\n            \"serial\": \"60022480a9fe70588c526b7a470549f9\",\n            \"type\": \"disk\",\n            \"vendor\": \"Msft    \",\n            \"children\": [\n                {\n                    \"name\": \"sda1\",\n                    \"size\": \"74G\",\n                    \"model\": null,\n                    \"serial\": null,\n                    \"type\": \"part\",\n                    \"vendor\": null\n                },\n                {\n                    \"name\": \"sda14\",\n                    \"size\": \"4M\",\n                    \"model\": null,\n                    \"serial\": null,\n                    \"type\": \"part\",\n                    \"vendor\": null\n                },\n                {\n                    \"name\": \"sda15\",\n                    \"size\": \"106M\",\n                    \"model\": null,\n                    \"serial\": null,\n                    \"type\": \"part\",\n                    \"vendor\": null\n                },\n                {\n                    \"name\": \"sda16\",\n                    \"size\": \"913M\",\n                    \"model\": null,\n                    \"serial\": null,\n                    \"type\": \"part\",\n                    \"vendor\": null\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"LinuxOutput/#gpu-information","title":"GPU Information","text":"<p>Note: This function is Windows-only. While it can be imported on Linux, all returned values will be <code>N/A</code> for strings and <code>0</code> for numeric fields.</p>"},{"location":"LinuxOutput/#monitoring-functions","title":"Monitoring Functions","text":""},{"location":"LinuxOutput/#cpu-usage-monitoring-5-seconds","title":"CPU Usage Monitoring (5 seconds)","text":""},{"location":"LinuxOutput/#monitor_cpu_usage_duration","title":"monitor_cpu_usage_duration()","text":"<pre><code>{\n    \"cpu_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            {\n                \"cpu_usage\": {\n                    \"load_1min\": 0.17,\n                    \"load_5min\": 0.07,\n                    \"load_15min\": 0.02\n                }\n            },\n            {\n                \"cpu_usage\": {\n                    \"load_1min\": 0.17,\n                    \"load_5min\": 0.07,\n                    \"load_15min\": 0.02\n                }\n            },\n            {\n                \"cpu_usage\": {\n                    \"load_1min\": 0.17,\n                    \"load_5min\": 0.07,\n                    \"load_15min\": 0.02\n                }\n            },\n            {\n                \"cpu_usage\": {\n                    \"load_1min\": 0.17,\n                    \"load_5min\": 0.07,\n                    \"load_15min\": 0.02\n                }\n            },\n            {\n                \"cpu_usage\": {\n                    \"load_1min\": 0.15,\n                    \"load_5min\": 0.07,\n                    \"load_15min\": 0.02\n                }\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"LinuxOutput/#ram-usage-monitoring-5-seconds","title":"RAM Usage Monitoring (5 seconds)","text":""},{"location":"LinuxOutput/#monitor_ram_usage_duration","title":"monitor_ram_usage_duration()","text":"<pre><code>{\n    \"ram_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            {\n                \"ram_usage\": {\n                    \"total_memory_kb\": 8134932,\n                    \"free_memory_kb\": 6050036,\n                    \"available_memory_kb\": 7372136,\n                    \"used_memory_kb\": 762796,\n                    \"usage_percent\": 9.38\n                }\n            },\n            {\n                \"ram_usage\": {\n                    \"total_memory_kb\": 8134932,\n                    \"free_memory_kb\": 6050036,\n                    \"available_memory_kb\": 7372136,\n                    \"used_memory_kb\": 762796,\n                    \"usage_percent\": 9.38\n                }\n            },\n            {\n                \"ram_usage\": {\n                    \"total_memory_kb\": 8134932,\n                    \"free_memory_kb\": 6050036,\n                    \"available_memory_kb\": 7372136,\n                    \"used_memory_kb\": 762796,\n                    \"usage_percent\": 9.38\n                }\n            },\n            {\n                \"ram_usage\": {\n                    \"total_memory_kb\": 8134932,\n                    \"free_memory_kb\": 6050036,\n                    \"available_memory_kb\": 7372136,\n                    \"used_memory_kb\": 762796,\n                    \"usage_percent\": 9.38\n                }\n            },\n            {\n                \"ram_usage\": {\n                    \"total_memory_kb\": 8134932,\n                    \"free_memory_kb\": 6050036,\n                    \"available_memory_kb\": 7372136,\n                    \"used_memory_kb\": 762796,\n                    \"usage_percent\": 9.38\n                }\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"LinuxOutput/#system-performance-monitoring-5-seconds","title":"System Performance Monitoring (5 seconds)","text":""},{"location":"LinuxOutput/#monitor_system_performance_duration","title":"monitor_system_performance_duration()","text":"<pre><code>{\n    \"system_performance_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            {\n                \"system_performance\": {\n                    \"cpu\": {\n                        \"cpu_usage\": {\n                            \"load_1min\": 0.12,\n                            \"load_5min\": 0.07,\n                            \"load_15min\": 0.02\n                        }\n                    },\n                    \"ram\": {\n                        \"ram_usage\": {\n                            \"total_memory_kb\": 8134932,\n                            \"free_memory_kb\": 6050036,\n                            \"available_memory_kb\": 7372140,\n                            \"used_memory_kb\": 762792,\n                            \"usage_percent\": 9.38\n                        }\n                    }\n                }\n            },\n            {\n                \"system_performance\": {\n                    \"cpu\": {\n                        \"cpu_usage\": {\n                            \"load_1min\": 0.12,\n                            \"load_5min\": 0.07,\n                            \"load_15min\": 0.02\n                        }\n                    },\n                    \"ram\": {\n                        \"ram_usage\": {\n                            \"total_memory_kb\": 8134932,\n                            \"free_memory_kb\": 6049012,\n                            \"available_memory_kb\": 7371124,\n                            \"used_memory_kb\": 763808,\n                            \"usage_percent\": 9.39\n                        }\n                    }\n                }\n            },\n            {\n                \"system_performance\": {\n                    \"cpu\": {\n                        \"cpu_usage\": {\n                            \"load_1min\": 0.12,\n                            \"load_5min\": 0.07,\n                            \"load_15min\": 0.02\n                        }\n                    },\n                    \"ram\": {\n                        \"ram_usage\": {\n                            \"total_memory_kb\": 8134932,\n                            \"free_memory_kb\": 6048956,\n                            \"available_memory_kb\": 7371076,\n                            \"used_memory_kb\": 763856,\n                            \"usage_percent\": 9.39\n                        }\n                    }\n                }\n            },\n            {\n                \"system_performance\": {\n                    \"cpu\": {\n                        \"cpu_usage\": {\n                            \"load_1min\": 0.12,\n                            \"load_5min\": 0.07,\n                            \"load_15min\": 0.02\n                        }\n                    },\n                    \"ram\": {\n                        \"ram_usage\": {\n                            \"total_memory_kb\": 8134932,\n                            \"free_memory_kb\": 6048956,\n                            \"available_memory_kb\": 7371076,\n                            \"used_memory_kb\": 763856,\n                            \"usage_percent\": 9.39\n                        }\n                    }\n                }\n            },\n            {\n                \"system_performance\": {\n                    \"cpu\": {\n                        \"cpu_usage\": {\n                            \"load_1min\": 0.11,\n                            \"load_5min\": 0.07,\n                            \"load_15min\": 0.02\n                        }\n                    },\n                    \"ram\": {\n                        \"ram_usage\": {\n                            \"total_memory_kb\": 8134932,\n                            \"free_memory_kb\": 6048956,\n                            \"available_memory_kb\": 7371076,\n                            \"used_memory_kb\": 763856,\n                            \"usage_percent\": 9.39\n                        }\n                    }\n                }\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"LinuxOutput/#error-cases","title":"Error Cases","text":""},{"location":"LinuxOutput/#smart-information","title":"SMART Information","text":"<pre><code>{\n    \"error\": \"Disk info not implemented for this OS yet\"\n}\n</code></pre>"},{"location":"LinuxOutput/#disk-information","title":"Disk Information","text":"<p>Note: JSON decoding error occurred, returns empty Python list <code>[]</code>.</p>"},{"location":"LinuxOutput/#notes","title":"Notes","text":"<ul> <li>This output is from a Microsoft Virtual Machine environment running Linux</li> <li>Recommendation: It's preferable to use Python Objects instead of JSON format in newer versions of the HardView library to avoid these parsing errors</li> </ul> <p>Generated from HardView library JSON function test results on Linux</p>"},{"location":"LiveViewAPI/","title":"<code>HardView.LiveView</code> API Documentation","text":"<p><code>LiveView</code> is a high-performance, cross-platform C++ module with Python bindings designed for real-time system monitoring. It provides easy-to-use classes for tracking CPU, RAM, Disk, Network, GPU performance, and comprehensive temperature monitoring. The library is optimized for low overhead, making it suitable for integration into monitoring dashboards, performance-critical applications, and system analysis tools.</p> <p>This document provides a comprehensive guide to the <code>LiveView</code> API, with detailed explanations and Python code examples for each component.</p> <p>Note: Some classes and functions may require administrative privileges on Windows or <code>sudo</code> on Linux, especially classes related to temperature and sensors.</p>"},{"location":"LiveViewAPI/#table-of-contents","title":"Table of Contents","text":"<ul> <li><code>PyLiveCPU</code> - For monitoring overall CPU utilization and retrieving CPU details.</li> <li><code>PyLiveRam</code> - For monitoring system memory usage.</li> <li><code>PyLiveDisk</code> - For monitoring disk activity (percentage or R/W speed).</li> <li><code>PyLiveNetwork</code> - For monitoring network traffic (total or per-interface).</li> <li><code>PyLiveGpu</code> - For monitoring GPU utilization (Windows only).</li> <li>Temperature Monitoring Classes</li> <li><code>PyTempCpu</code> - For monitoring CPU temperature and fan speed (Windows).</li> <li><code>PyTempGpu</code> - For monitoring GPU temperature and fan speed (Windows).</li> <li><code>PyTempOther</code> - For monitoring motherboard and storage temperatures (Windows).</li> <li><code>PySensor</code> - For advanced sensor monitoring (Windows).</li> <li><code>PyManageTemp</code> - For temperature monitoring management (Windows).</li> <li><code>PyLinuxSensor</code> - For comprehensive sensor monitoring (Linux).</li> <li><code>PyRawInfo</code> - For accessing raw system firmware tables (Windows only).</li> </ul>"},{"location":"LiveViewAPI/#pylivecpu","title":"<code>PyLiveCPU</code>","text":"<p>The <code>PyLiveCPU</code> class provides functionality to monitor the total CPU utilization across all cores and retrieve detailed CPU information.</p> <p>Python Usage</p> <pre><code>from HardView.LiveView import PyLiveCPU\n\n# Instantiate the CPU monitor\ncpu_monitor = PyLiveCPU()\n</code></pre>"},{"location":"LiveViewAPI/#get_usageinterval_ms","title":"<code>get_usage(interval_ms)</code>","text":"<p>Calculates and returns the average CPU usage across all cores over a specified time interval. It works by taking two snapshots of system times and comparing the delta.</p> <p>Parameters</p> Name Type Description <code>interval_ms</code> <code>int</code> The sampling duration in milliseconds. A common value is 1000 (1 second). <p>Returns</p> Type Description <code>float</code> The average CPU usage as a percentage (e.g., <code>25.5</code>). <p>Supported Environments</p> Windows Linux \u2705 \u2705 <p>Example</p> <pre><code>from HardView.LiveView import PyLiveCPU\nimport time\n\ncpu_monitor = PyLiveCPU()\n\nprint(\"Monitoring CPU usage for 5 seconds...\")\nfor _ in range(5):\n    # Get CPU usage over a 1-second interval\n    usage = cpu_monitor.get_usage(interval_ms=1000)\n    print(f\"Current CPU Usage: {usage:.2f}%\")\n    time.sleep(1) # Sleep to ensure distinct intervals for demonstration\n</code></pre> <p>Example Output</p> <pre><code>Current CPU Usage: 2.75%\n</code></pre>"},{"location":"LiveViewAPI/#cpuid","title":"<code>cpuid()</code>","text":"<p>Retrieves detailed CPU information using the CPUID instruction.</p> <p>Parameters</p> <p>This method takes no parameters.</p> <p>Returns</p> Type Description <code>list[tuple[str, str]]</code> Returns a list of tuples from strings (str, str), where the first value represents the feature name (e.g., Brand) and the second value represents the corresponding value (e.g., Intel(R) Core(TM) i5-4210M CPU @ 2.60GHz).\" <p>Supported Environments</p> Windows Linux \u2705 \u2705 <p>Example</p> <pre><code>from HardView.LiveView import PyLiveCPU\n\ncpu_monitor = PyLiveCPU()\ncpu_info = cpu_monitor.cpuid()  \n\nprint(\"CPUID Info:\")\nfor feature_name, feature_value in cpu_info:\n    print(f\" - {feature_name}: {feature_value}\")\n</code></pre> <p>Example Output(Intel)</p> <pre><code>Vendor: GenuineIntel\nMax Basic CPUID Level: 13\nBrand: Intel(R) Core(TM) i5-4210M CPU @ 2.60GHz\nFamily: 6\nModel: 60\nStepping: 3\nProcessor Type: 0\nAPIC ID: 3\nCLFLUSH Size: 64 bytes\nSignature: 0x306C3\nSSE3: Yes\nPCLMULQDQ: Yes\nDTES64: Yes\nMONITOR: Yes\nDS-CPL: Yes\nVMX: Yes\nSMX: No\nEIST: Yes\nTM2: Yes\nSSSE3: Yes\nFMA: Yes\nCMPXCHG16B: Yes\nSSE4.1: Yes\nSSE4.2: Yes\nMOVBE: Yes\nPOPCNT: Yes\nTSC-Deadline: Yes\nAES: Yes\nXSAVE: Yes\nOSXSAVE: Yes\nAVX: Yes\nF16C: Yes\nRDRAND: Yes\nFPU: Yes\nVME: Yes\nDE: Yes\nPSE: Yes\nTSC: Yes\nMSR: Yes\nPAE: Yes\nMCE: Yes\nCX8: Yes\nAPIC: Yes\nSEP: Yes\nMTRR: Yes\nPGE: Yes\nMCA: Yes\nCMOV: Yes\nPAT: Yes\nPSE-36: Yes\nPSN: No\nCLFSH: Yes\nDS: Yes\nACPI: Yes\nMMX: Yes\nFXSR: Yes\nSSE: Yes\nSSE2: Yes\nSS: Yes\nTM: Yes\nPBE: Yes\nFSGSBASE: Yes\nTSC_ADJUST: Yes\nSGX: No\nBMI1: Yes\nHLE: No\nAVX2: Yes\nSMEP: Yes\nBMI2: Yes\nERMS: Yes\nINVPCID: Yes\nRTM: No\nPQM: No\nMPX: No\nPQE: No\nAVX512F: No\nAVX512DQ: No\nRDSEED: No\nADX: No\nSMAP: No\nAVX512_IFMA: No\nCLFLUSHOPT: No\nCLWB: No\nIntel PT: No\nAVX512PF: No\nAVX512ER: No\nAVX512CD: No\nSHA: No\nAVX512BW: No\nAVX512VL: No\nPREFETCHWT1: No\nAVX512_VBMI: No\nUMIP: No\nPKU: No\nOSPKE: No\nWAITPKG: No\nAVX512_VBMI2: No\nCET_SS: No\nGFNI: No\nVAES: No\nVPCLMULQDQ: No\nAVX512_VNNI: No\nAVX512_BITALG: No\nAVX512_VPOPCNTDQ: No\nRDPID: No\nCLDEMOTE: No\nMOVDIRI: No\nMOVDIR64B: No\nENQCMD: No\nAVX512_4VNNIW: No\nAVX512_4FMAPS: No\nFSRM: No\nAVX512_VP2INTERSECT: No\nMD_CLEAR: Yes\nTSX_FORCE_ABORT: No\nSERIALIZE: No\nHYBRID: No\nTSXLDTRK: No\nPCONFIG: No\nIBT: No\nAMX-BF16: No\nAMX-TILE: No\nAMX-INT8: No\nIBRS_IBPB: Yes\nSTIBP: Yes\nL1D_FLUSH: Yes\nARCH_CAPABILITIES: No\nSSBD: Yes\nL1 Data Cache: 32 KB, 8-way, 64B line\nL1 Instruction Cache: 32 KB, 8-way, 64B line\nL2 Unified Cache: 256 KB, 8-way, 64B line\nL3 Unified Cache: 3072 KB, 12-way, 64B line\nPhysical Address bits: 39\nVirtual Address bits: 48\nCLZERO: No\nInstRetCntMsr: No\nRstrFpErrPtrs: No\nINVLPGB: No\nRDPRU: No\nMCOMMIT: No\nWBNOINVD: No\nIBPB: No\nINT_WBINVD: No\nIBRS: No\nSTIBP: No\nIbrsAlwaysOn: No\nStibpAlwaysOn: No\nIbrsPreferred: No\nIbrsSameMode: No\nEferLmsleUnsupported: No\nINVLPGB_NESTED: No\nSSBD: No\nSsbdVirtSpecCtrl: No\nSsbdNotRequired: No\nTLB/Cache Descriptors (raw): 0x76036301 0xF0B5FF 0x0 0xC10000\nDigital Thermal Sensor: Yes\nIntel Turbo Boost: Yes\nARAT: Yes\nPLN: Yes\nECMD: Yes\nPTM: Yes\nHWP: No\nHWP_Notification: No\nHWP_Activity_Window: No\nHWP_Energy_Performance: No\nHWP_Package_Level: No\nHDC: No\nIntel Turbo Boost Max 3.0: No\nHWP_Capabilities: No\nHWP_PECI_Override: No\nFlexible_HWP: No\nFast_Access_Mode: No\nHW_Feedback: No\nIgnore_Idle_Logical_Processor_HWP: No\nDigital Thermal Sensor Interrupt Thresholds: 2\nHardware Coordination Feedback: Yes\nACNT2: No\nPerformance-Energy Bias: Yes\nTemperature Sensor: No\nFrequency ID Control: No\nVoltage ID Control: No\nThermal Trip: No\nThermal Monitoring: No\nSoftware Thermal Control: No\n100MHz Steps: No\nHardware P-State: No\nTSC Invariant: Yes\nCore Performance Boost: No\nRead-Only Effective Frequency: No\nProcessor Feedback Interface: No\nProcessor Power Reporting: No\nHypervisor Present: No\nSMEP: Yes\nSMAP: No\nUMIP: No\nPKU: No\nCET_SS: No\nCET_IBT: No\nPMU Version: 3\nGP Performance Counters: 4\nGP Counter Width: 48 bits\nFixed Performance Counters: 3\nFixed Counter Width: 48 bits\nCore Cycles Event: Available\nInstruction Retired Event: Available\nReference Cycles Event: Available\nLLC Reference Event: Available\nLLC Misses Event: Available\nBranch Instruction Retired Event: Available\nBranch Mispredict Retired Event: Available\nXCR0 Supported Features (Low): 0x7\nXCR0 Supported Features (High): 0x0\nMax XSAVE Area Size: 832 bytes\nCurrent XSAVE Area Size: 832 bytes\nXSAVEOPT: Yes\nXSAVEC: No\nXGETBV_ECX1: No\nXSAVES: No\nAVX State Size: 256 bytes\nAVX State Offset: 576 bytes\nProcessor Serial Number: Not Available\n</code></pre>"},{"location":"LiveViewAPI/#cpusnapshotcore-corenumbersfalse-kerneltrue-usertrue-idletrue-purekernaltimefalse-windows-only","title":"<code>CpuSnapShot(core, coreNumbers=False, Kernel=True, User=True, Idle=True, PureKernalTime=False)</code> (Windows Only)","text":"<p>(Windows-only) Gets a snapshot of CPU time counters for a specific core. Can also return the total number of cores.</p> <p>Parameters</p> Name Type Description <code>core</code> <code>int</code> The index of the core to query (0-indexed). <code>coreNumbers</code> <code>bool</code> If <code>True</code>, returns the total number of Logical cores instead of a snapshot. Default is <code>False</code>. <code>Kernel</code> <code>bool</code> If <code>True</code>, includes raw kernel time in the result. Default is <code>True</code>. <code>User</code> <code>bool</code> If <code>True</code>, includes user time in the result. Default is <code>True</code>. <code>Idle</code> <code>bool</code> If <code>True</code>, includes idle time in the result. Default is <code>True</code>. <code>PureKernalTime</code> <code>bool</code> If <code>True</code>, includes kernel time minus idle time. Default is <code>False</code>. <p>Returns</p> Type Description <code>int</code> (if <code>coreNumbers</code> is <code>True</code>) The total number of CPU cores. <code>dict</code> (if <code>coreNumbers</code> is <code>False</code>) A dictionary containing the requested time counters for the specified core. Keys include <code>raw_kernel_time</code>, <code>user_time</code>, <code>idle_time</code>, <code>pure_kernel_time</code>. <p>Supported Environments</p> Windows Linux \u2705 \u274c <p>Example</p> <pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyLiveCPU\n\n    cpu_monitor = PyLiveCPU()\n\n    # Get total number of cores\n    core_count = cpu_monitor.CpuSnapShot(core=0, coreNumbers=True)\n    print(f\"CPU Core Count: {core_count}\")\n\n    # Get snapshot for core 0\n    snapshot = cpu_monitor.CpuSnapShot(core=0)\n    print(f\"Snapshot for Core 0:\")\n    for key, value in snapshot.items():\n        print(f\" - {key}: {value}\")\nelse:\n    print(\"CpuSnapShot is only supported on Windows.\")\n</code></pre> <p>Example Output</p> <pre><code>CPU Core Count: 4\nSnapshot for Core 0:\n - raw_kernel_time: 618751562500.0\n - user_time: 70005312500.0\n - idle_time: 580898593750.0\n</code></pre>"},{"location":"LiveViewAPI/#pyliveram","title":"<code>PyLiveRam</code>","text":"<p>The <code>PyLiveRam</code> class provides a simple and fast way to get the current system-wide RAM usage.</p>"},{"location":"LiveViewAPI/#ram-usage-performance-class","title":"RAM Usage Performance Class","text":"<p>This class is considered one of the fastest methods to retrieve RAM usage on Windows. It achieves approximately 400,000 to 500,000 queries per second, with an average query time of 8\u201415 microseconds.</p> <p>Python Usage</p> <pre><code>from HardView.LiveView import PyLiveRam\n\n# Instantiate the RAM monitor\nram_monitor = PyLiveRam()\n</code></pre>"},{"location":"LiveViewAPI/#get_usagerawfalse","title":"<code>get_usage(Raw=False)</code>","text":"<p>Returns the current total RAM usage as a percentage, or raw used/total bytes.</p> <p>Parameters</p> Name Type Description <code>Raw</code> <code>bool</code> If <code>True</code>, returns a list of <code>[used_bytes, total_bytes]</code>. Otherwise, returns percentage. Default is <code>False</code>. <p>Returns</p> Type Description <code>float</code> The total physical memory usage as a percentage (if <code>Raw</code> is <code>False</code>). <code>list[float]</code> A list containing <code>[used_bytes, total_bytes]</code> (if <code>Raw</code> is <code>True</code>). <p>Supported Environments</p> Windows Linux \u2705 \u2705 <p>Example</p> <pre><code>from HardView.LiveView import PyLiveRam\n\nram_monitor = PyLiveRam()\n\n# Get RAM usage as percentage\nram_usage_percent = ram_monitor.get_usage()\nprint(f\"Current RAM Usage: {ram_usage_percent:.2f}%\")\n\n# Get RAM usage in raw bytes\nram_usage_raw = ram_monitor.get_usage(Raw=True)\nused_gb = ram_usage_raw[0] / (1024**3)\ntotal_gb = ram_usage_raw[1] / (1024**3)\nprint(f\"RAM Raw: {used_gb:.2f} GB / {total_gb:.2f} GB\")\n</code></pre> <p>Example Output</p> <pre><code>Current RAM Usage: 68.78%\nRAM Raw: 5.44 GB / 7.92 GB\n</code></pre>"},{"location":"LiveViewAPI/#pylivedisk","title":"<code>PyLiveDisk</code>","text":"<p>The <code>PyLiveDisk</code> class monitors physical disk activity. it can operate in two distinct modes, set during instantiation.</p> <p>Python Usage</p> <pre><code>from HardView.LiveView import PyLiveDisk\n\n# To monitor disk usage percentage (Windows only)\ndisk_monitor_percent = PyLiveDisk(mode=0)\n\n# To monitor disk read/write speed (Windows &amp; Linux)\ndisk_monitor_speed = PyLiveDisk(mode=1)\n</code></pre>"},{"location":"LiveViewAPI/#constructor-pylivediskmode","title":"Constructor: <code>PyLiveDisk(mode)</code>","text":"<p>Initializes the disk monitor in a specific mode.</p> Parameter Type Description <code>mode</code> <code>int</code> <code>0</code> for percentage usage (<code>% Disk Time</code>, Windows-only).<code>1</code> for read/write speed (MB/s)."},{"location":"LiveViewAPI/#get_usageinterval1000","title":"<code>get_usage(interval=1000)</code>","text":"<p>Returns disk usage information based on the mode selected at initialization.</p>"},{"location":"LiveViewAPI/#mode-0-percentage-usage","title":"Mode 0: Percentage Usage","text":"<p>Returns the percentage of time the disk is busy handling read/write requests.</p> <ul> <li>Supported Environments: \u2705 Windows only.</li> <li>Returns: <code>float</code> - The disk active time as a percentage.</li> <li>Example:   <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyLiveDisk\n    disk_monitor = PyLiveDisk(mode=0)\n    usage_percent = disk_monitor.get_usage(interval=1000)\n    print(f\"Disk % Time (mode 0): {usage_percent:.2f}%\")\nelse:\n    print(\"Disk percentage usage (mode 0) is only supported on Windows.\")\n</code></pre></li> </ul> <p>Example Output (Mode 0)</p> <pre><code>Disk % Time (mode 0): 0.22%\n</code></pre>"},{"location":"LiveViewAPI/#mode-1-readwrite-speed","title":"Mode 1: Read/Write Speed","text":"<p>Returns the current disk read and write speeds in Megabytes per second (MB/s).</p> <ul> <li>Supported Environments: \u2705 Windows, \u2705 Linux.</li> <li>Returns: <code>list[tuple[str, float]]</code> - A list containing read and write speed tuples.</li> <li>Example:   <pre><code>from HardView.LiveView import PyLiveDisk\ndisk_monitor = PyLiveDisk(mode=1)\nrw_speed = disk_monitor.get_usage(interval=1000)\n# rw_speed will be like: [('Read MB/s', 15.2), ('Write MB/s', 8.5)]\nprint(f\"Disk R/W (mode 1): Read MB/s: {rw_speed[0][1]:.2f}, Write MB/s: {rw_speed[1][1]:.2f}\")\n</code></pre></li> </ul> <p>Example Output (Mode 1)</p> <pre><code>Disk R/W (mode 1): Read MB/s: 0.00, Write MB/s: 0.00\n</code></pre>"},{"location":"LiveViewAPI/#highdiskusagethreshold_mbps800","title":"<code>HighDiskUsage(threshold_mbps=80.0)</code>","text":"<p>Checks if the combined read or write speed exceeds a specified threshold. This method is only available when the class is initialized with <code>mode=1</code>.</p> <p>Parameters</p> Name Type Description <code>threshold_mbps</code> <code>float</code> The R/W threshold in MB/s. Default is <code>80.0</code>. <p>Returns</p> Type Description <code>bool</code> <code>True</code> if usage is above the threshold, <code>False</code> otherwise. <p>Supported Environments</p> Windows Linux \u2705 \u2705 <p>Example</p> <pre><code>from HardView.LiveView import PyLiveDisk\ndisk_monitor = PyLiveDisk(mode=1)\nis_high = disk_monitor.HighDiskUsage(threshold_mbps=100.0)\nprint(f\"High Disk Usage (&gt;100 MB/s): {is_high}\")\n</code></pre> <p>Example Output</p> <pre><code>High Disk Usage (&gt;100 MB/s): False\n</code></pre>"},{"location":"LiveViewAPI/#pylivenetwork","title":"<code>PyLiveNetwork</code>","text":"<p>The <code>PyLiveNetwork</code> class monitors network traffic. It can return the total traffic across all interfaces or provide a breakdown for each interface.</p> <p>Python Usage</p> <pre><code>from HardView.LiveView import PyLiveNetwork\n\n# Instantiate the network monitor\nnet_monitor = PyLiveNetwork()\n</code></pre>"},{"location":"LiveViewAPI/#get_usageinterval1000-mode0","title":"<code>get_usage(interval=1000, mode=0)</code>","text":"<p>Returns network usage information based on the selected mode.</p>"},{"location":"LiveViewAPI/#mode-0-total-usage","title":"Mode 0: Total Usage","text":"<p>Returns the combined network traffic (sent and received) across all active network interfaces in Megabytes per second (MB/s).</p> <ul> <li>Supported Environments: \u2705 Windows, \u2705 Linux.</li> <li>Returns: <code>float</code> - The total network traffic in MB/s.</li> <li>Example:   <pre><code>from HardView.LiveView import PyLiveNetwork\nnet_monitor = PyLiveNetwork()\ntotal_traffic = net_monitor.get_usage(interval=1000, mode=0)\nprint(f\"Total Network Usage (mode 0): {total_traffic:.4f} MB/s\")\n</code></pre></li> </ul> <p>Example Output (Mode 0)</p> <pre><code>Total Network Usage (mode 0): 0.0003 MB/s\n</code></pre>"},{"location":"LiveViewAPI/#mode-1-per-interface-usage","title":"Mode 1: Per-Interface Usage","text":"<p>Returns the network traffic for each active network interface individually.</p> <ul> <li>Supported Environments: \u2705 Windows, \u2705 Linux.</li> <li>Returns: <code>list[tuple[str, float]]</code> - A list where each tuple contains the interface name and its traffic in MB/s.</li> <li>Example:   <pre><code>from HardView.LiveView import PyLiveNetwork\nnet_monitor = PyLiveNetwork()\n# Get usage per interface\ninterface_traffic = net_monitor.get_usage(interval=1000, mode=1)\nprint(\"Per-Adapter Usage (mode 1):\")\nfor interface, speed in interface_traffic:\n    print(f\" - {interface}: {speed:.4f} MB/s\")\n</code></pre></li> </ul> <p>Example Output (Mode 1)</p> <pre><code>Per-Adapter Usage (mode 1):\n - Broadcom 802.11n Network Adapter: 0.0001 MB/s\n - Intel[R] Ethernet Connection I217-V: 0.0000 MB/s\n</code></pre>"},{"location":"LiveViewAPI/#gethighcard","title":"<code>getHighCard()</code>","text":"<p>Identifies and returns the name of the network interface with the highest current usage.</p> <p>Parameters</p> <p>This method takes no parameters.</p> <p>Returns</p> Type Description <code>str</code> The name of the busiest network interface. <p>Supported Environments</p> Windows Linux \u2705 \u2705 <p>Example</p> <pre><code>from HardView.LiveView import PyLiveNetwork\nnet_monitor = PyLiveNetwork()\nbusiest_card = net_monitor.getHighCard()\nprint(f\"Highest Usage Card: {busiest_card}\")\n</code></pre> <p>Example Output</p> <pre><code>Highest Usage Card: Broadcom 802.11n Network Adapter\n</code></pre>"},{"location":"LiveViewAPI/#pylivegpu","title":"<code>PyLiveGpu</code>","text":"<p>The <code>PyLiveGpu</code> class monitors the utilization of the primary GPU.</p> <p>Note: This class is only available on the Windows platform. It might not work optimally with integrated GPUs.</p> <p>Python Usage</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyLiveGpu\n\n    # Instantiate the GPU monitor\n    gpu_monitor = PyLiveGpu()\nelse:\n    print(\"PyLiveGpu is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#get_usageinterval_ms1000","title":"<code>get_usage(interval_ms=1000)</code>","text":"<p>Returns the total GPU usage percentage by summing all engine utilizations.</p> <p>Parameters</p> Name Type Description <code>interval_ms</code> <code>int</code> The sampling duration in milliseconds. Default is 1000. <p>Returns</p> Type Description <code>float</code> The total GPU utilization as a percentage (can exceed 100% if multiple engines are active). <p>Supported Environments</p> Windows Linux \u2705 \u274c"},{"location":"LiveViewAPI/#get_average_usageinterval_ms1000","title":"<code>get_average_usage(interval_ms=1000)</code>","text":"<p>Returns the average GPU usage percentage across all engines.</p> <p>Parameters</p> Name Type Description <code>interval_ms</code> <code>int</code> The sampling duration in milliseconds. Default is 1000. <p>Returns</p> Type Description <code>float</code> The average GPU utilization as a percentage (0-100)."},{"location":"LiveViewAPI/#get_max_usageinterval_ms1000","title":"<code>get_max_usage(interval_ms=1000)</code>","text":"<p>Returns the maximum GPU usage percentage among all engines.</p> <p>Parameters</p> Name Type Description <code>interval_ms</code> <code>int</code> The sampling duration in milliseconds. Default is 1000. <p>Returns</p> Type Description <code>float</code> The maximum GPU utilization as a percentage (0-100)."},{"location":"LiveViewAPI/#get_counter_count","title":"<code>get_counter_count()</code>","text":"<p>Returns the number of active GPU counters being monitored.</p> <p>Parameters</p> <p>This method takes no parameters.</p> <p>Returns</p> Type Description <code>int</code> The number of GPU counters being monitored. <p>Example</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyLiveGpu\n\n    try:\n        gpu_monitor = PyLiveGpu()\n\n        # Get different types of GPU usage\n        total_usage = gpu_monitor.get_usage(interval_ms=1000)\n        avg_usage = gpu_monitor.get_average_usage(interval_ms=1000)\n        max_usage = gpu_monitor.get_max_usage(interval_ms=1000)\n        counter_count = gpu_monitor.get_counter_count()\n\n        print(f\"Total GPU Usage: {total_usage:.2f}%\")\n        print(f\"Average GPU Usage: {avg_usage:.2f}%\")\n        print(f\"Max GPU Usage: {max_usage:.2f}%\")\n        print(f\"GPU Counter Count: {counter_count}\")\n\n    except Exception as e:\n        print(f\"Error monitoring GPU: {e}. PyLiveGpu might not work well with integrated GPUs.\")\nelse:\n    print(\"GPU monitoring is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#temperature-monitoring","title":"Temperature Monitoring","text":"<p>The <code>LiveView</code> module provides comprehensive temperature monitoring capabilities for both Windows and Linux systems.</p>"},{"location":"LiveViewAPI/#pytempcpu-windows-only","title":"<code>PyTempCpu</code> (Windows Only)","text":"<p>The <code>PyTempCpu</code> class monitors CPU temperature and fan speed on Windows systems.</p> <p>Python Usage</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempCpu\n\n    # Instantiate the CPU temperature monitor\n    cpu_temp = PyTempCpu()\nelse:\n    print(\"PyTempCpu is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#methods","title":"Methods","text":""},{"location":"LiveViewAPI/#get_temp","title":"<code>get_temp()</code>","text":"<p>Returns the current CPU temperature.</p> <p>Returns</p> Type Description <code>float</code> The CPU temperature in Celsius. Returns -1 if error."},{"location":"LiveViewAPI/#get_max_temp","title":"<code>get_max_temp()</code>","text":"<p>Returns the maximum CPU core temperature.</p> <p>Returns</p> Type Description <code>float</code> The maximum CPU core temperature in Celsius."},{"location":"LiveViewAPI/#get_avg_temp","title":"<code>get_avg_temp()</code>","text":"<p>Returns the average CPU core temperature.</p> <p>Returns</p> Type Description <code>float</code> The average CPU core temperature in Celsius."},{"location":"LiveViewAPI/#get_fan_rpm","title":"<code>get_fan_rpm()</code>","text":"<p>Returns the CPU fan RPM.</p> <p>Returns</p> Type Description <code>float</code> The CPU fan speed in RPM."},{"location":"LiveViewAPI/#update","title":"<code>update()</code>","text":"<p>Updates all CPU temperature and fan data by calling the hardware monitor update function.</p>"},{"location":"LiveViewAPI/#reget-alternative-reget","title":"<code>reget()</code> (Alternative: <code>ReGet()</code>)","text":"<p>Re-retrieves CPU temperature and fan data without updating the hardware monitor.</p> <p>Example</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempCpu\n\n    try:\n        cpu_temp = PyTempCpu()\n\n        print(f\"CPU Temperature: {cpu_temp.get_temp():.1f}\u00b0C\")\n        print(f\"Max CPU Core Temperature: {cpu_temp.get_max_temp():.1f}\u00b0C\")\n        print(f\"Average CPU Core Temperature: {cpu_temp.get_avg_temp():.1f}\u00b0C\")\n        print(f\"CPU Fan RPM: {cpu_temp.get_fan_rpm():.0f} RPM\")\n\n        # Update readings\n        cpu_temp.update()\n        print(f\"Updated CPU Temperature: {cpu_temp.get_temp():.1f}\u00b0C\")\n\n    except Exception as e:\n        print(f\"Error monitoring CPU temperature: {e}\")\nelse:\n    print(\"CPU temperature monitoring is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#pytempgpu-windows-only","title":"<code>PyTempGpu</code> (Windows Only)","text":"<p>The <code>PyTempGpu</code> class monitors GPU temperature and fan speed on Windows systems.</p> <p>Python Usage</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempGpu\n\n    # Instantiate the GPU temperature monitor\n    gpu_temp = PyTempGpu()\nelse:\n    print(\"PyTempGpu is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#methods_1","title":"Methods","text":""},{"location":"LiveViewAPI/#get_temp_1","title":"<code>get_temp()</code>","text":"<p>Returns the current GPU temperature.</p> <p>Returns</p> Type Description <code>float</code> The GPU temperature in Celsius."},{"location":"LiveViewAPI/#get_fan_rpm_1","title":"<code>get_fan_rpm()</code>","text":"<p>Returns the GPU fan RPM.</p> <p>Returns</p> Type Description <code>float</code> The GPU fan speed in RPM."},{"location":"LiveViewAPI/#update_1","title":"<code>update()</code>","text":"<p>Updates all GPU temperature and fan data.</p>"},{"location":"LiveViewAPI/#reget-alternative-reget_1","title":"<code>reget()</code> (Alternative: <code>ReGet()</code>)","text":"<p>Re-retrieves GPU temperature and fan data.</p> <p>Example</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempGpu\n\n    try:\n        gpu_temp = PyTempGpu()\n\n        print(f\"GPU Temperature: {gpu_temp.get_temp():.1f}\u00b0C\")\n        print(f\"GPU Fan RPM: {gpu_temp.get_fan_rpm():.0f} RPM\")\n\n        # Update readings\n        gpu_temp.update()\n        print(f\"Updated GPU Temperature: {gpu_temp.get_temp():.1f}\u00b0C\")\n\n    except Exception as e:\n        print(f\"Error monitoring GPU temperature: {e}\")\nelse:\n    print(\"GPU temperature monitoring is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#pytempother-windows-only","title":"<code>PyTempOther</code> (Windows Only)","text":"<p>The <code>PyTempOther</code> class monitors motherboard and storage device temperatures on Windows systems.</p> <p>Python Usage</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempOther\n\n    # Instantiate the other temperature monitor\n    other_temp = PyTempOther()\nelse:\n    print(\"PyTempOther is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#methods_2","title":"Methods","text":""},{"location":"LiveViewAPI/#get_mb_temp","title":"<code>get_mb_temp()</code>","text":"<p>Returns the motherboard temperature.</p> <p>Returns</p> Type Description <code>float</code> The motherboard temperature in Celsius."},{"location":"LiveViewAPI/#get_storage_temp","title":"<code>get_Storage_temp()</code>","text":"<p>Returns the storage device temperature.</p> <p>Returns</p> Type Description <code>float</code> The storage device temperature in Celsius."},{"location":"LiveViewAPI/#update_2","title":"<code>update()</code>","text":"<p>Updates all temperature data.</p>"},{"location":"LiveViewAPI/#reget-alternative-reget_2","title":"<code>reget()</code> (Alternative: <code>ReGet()</code>)","text":"<p>Re-retrieves temperature data.</p> <p>Example</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempOther\n\n    try:\n        other_temp = PyTempOther()\n\n        print(f\"Motherboard Temperature: {other_temp.get_mb_temp():.1f}\u00b0C\")\n        print(f\"Storage Temperature: {other_temp.get_Storage_temp():.1f}\u00b0C\")\n\n        # Update readings\n        other_temp.update()\n        print(f\"Updated Motherboard Temperature: {other_temp.get_mb_temp():.1f}\u00b0C\")\n\n    except Exception as e:\n        print(f\"Error monitoring other temperatures: {e}\")\nelse:\n    print(\"Other temperature monitoring is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#pysensor-windows-only","title":"<code>PySensor</code> (Windows Only)","text":"<p>The <code>PySensor</code> class provides advanced sensor monitoring capabilities with access to all available sensors and fan RPMs on Windows systems.</p> <p>Python Usage</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PySensor\n\n    # Instantiate the sensor monitor\n    sensor = PySensor()\nelse:\n    print(\"PySensor is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#methods_3","title":"Methods","text":""},{"location":"LiveViewAPI/#getvaluebynamename","title":"<code>GetValueByName(name)</code>","text":"<p>Gets a specific sensor value by name.</p> <p>Parameters</p> Name Type Description <code>name</code> <code>str</code> The name of the sensor. <p>Returns</p> Type Description <code>float</code> The sensor value."},{"location":"LiveViewAPI/#getallsensors","title":"<code>getAllSensors()</code>","text":"<p>Gets a list of all available sensor names.</p> <p>Returns</p> Type Description <code>list[str]</code> A list of all sensor names."},{"location":"LiveViewAPI/#getallfanrpms","title":"<code>getAllFanRPMs()</code>","text":"<p>Gets a list of all fan RPM data as name-value pairs.</p> <p>Returns</p> Type Description <code>list[tuple[str, float]]</code> A list of tuples containing fan name and RPM."},{"location":"LiveViewAPI/#update_3","title":"<code>update()</code>","text":"<p>Updates all sensor and fan data.</p>"},{"location":"LiveViewAPI/#reget-alternative-reget_3","title":"<code>reget()</code> (Alternative: <code>ReGet()</code>)","text":"<p>Re-retrieves sensor and fan data.</p> <p>Example</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PySensor\n\n    try:\n        sensor = PySensor()\n        sensor.update()     #The update is important after initialization here. \n        # Get all available sensors\n        all_sensors = sensor.getAllSensors()\n        print(\"Available Sensors:\")\n        for sensor_name in all_sensors[:10]:  # Show first 10 sensors\n            try:\n                value = sensor.GetValueByName(sensor_name)\n                print(f\" - {sensor_name}: {value:.1f}\u00b0C\")\n            except:\n                print(f\" - {sensor_name}: Unable to read\")\n\n        # Get all fan RPMs\n        fan_rpms = sensor.getAllFanRPMs()\n        print(\"\\nFan RPMs:\")\n        for fan_name, rpm in fan_rpms:\n            print(f\" - {fan_name}: {rpm:.0f} RPM\")\n\n        # Update readings\n        sensor.update()\n\n    except Exception as e:\n        print(f\"Error with sensor monitoring: {e}\")\nelse:\n    print(\"Advanced sensor monitoring is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#pymanagetemp-windows-only","title":"<code>PyManageTemp</code> (Windows Only)","text":"<p>The <code>PyManageTemp</code> class provides temperature monitoring management functions on Windows systems.</p> <p>Python Usage</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyManageTemp\n\n    # Instantiate the temperature manager\n    temp_manager = PyManageTemp()\nelse:\n    print(\"PyManageTemp is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#methods_4","title":"Methods","text":""},{"location":"LiveViewAPI/#init","title":"<code>Init()</code>","text":"<p>Initializes the hardware temperature monitor.</p>"},{"location":"LiveViewAPI/#close","title":"<code>Close()</code>","text":"<p>Shuts down the hardware temperature monitor.</p>"},{"location":"LiveViewAPI/#update_4","title":"<code>Update()</code>","text":"<p>Updates the hardware monitor data.</p> <p>Example</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyManageTemp, PyTempCpu\n\n    try:\n        temp_manager = PyManageTemp()\n\n        # Initialize the hardware monitor\n        temp_manager.Init()\n\n        # Create CPU temperature monitor (without auto-init)\n        cpu_temp = PyTempCpu(init=False)\n\n        # Update hardware monitor\n        temp_manager.Update()\n\n        # Get updated temperature\n        print(f\"CPU Temperature: {cpu_temp.get_temp():.1f}\u00b0C\")\n\n        # Clean shutdown\n        temp_manager.Close()\n\n    except Exception as e:\n        print(f\"Error with temperature management: {e}\")\nelse:\n    print(\"Temperature management is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#pylinuxsensor-linux-only","title":"<code>PyLinuxSensor</code> (Linux Only)","text":"<p>The <code>PyLinuxSensor</code> class provides comprehensive sensor monitoring for Linux systems using the lm-sensors library.</p> <p>Python Usage</p> <pre><code># This code will only run on Linux\nimport sys\nif sys.platform == \"linux\":\n    from HardView.LiveView import PyLinuxSensor\n\n    # Instantiate the Linux sensor monitor\n    linux_sensor = PyLinuxSensor()\nelse:\n    print(\"PyLinuxSensor is only supported on Linux.\")\n</code></pre>"},{"location":"LiveViewAPI/#methods_5","title":"Methods","text":""},{"location":"LiveViewAPI/#getcputemp","title":"<code>getCpuTemp()</code>","text":"<p>Returns the CPU package temperature.</p> <p>Returns</p> Type Description <code>float</code> The CPU temperature in Celsius. Returns -1 if not found."},{"location":"LiveViewAPI/#getchipsettemp","title":"<code>getChipsetTemp()</code>","text":"<p>Returns the chipset temperature.</p> <p>Returns</p> Type Description <code>float</code> The chipset temperature in Celsius. Returns -1 if not found."},{"location":"LiveViewAPI/#getmotherboardtemp","title":"<code>getMotherboardTemp()</code>","text":"<p>Returns the motherboard temperature.</p> <p>Returns</p> Type Description <code>float</code> The motherboard temperature in Celsius. Returns -1 if not found."},{"location":"LiveViewAPI/#getvrmtemp","title":"<code>getVRMTemp()</code>","text":"<p>Returns the VRM (Voltage Regulator Module) temperature.</p> <p>Returns</p> Type Description <code>float</code> The VRM temperature in Celsius. Returns -1 if not found."},{"location":"LiveViewAPI/#getdrivetemp","title":"<code>getDriveTemp()</code>","text":"<p>Returns the storage drive temperature.</p> <p>Returns</p> Type Description <code>float</code> The drive temperature in Celsius. Returns -1 if not found."},{"location":"LiveViewAPI/#getallsensornames","title":"<code>getAllSensorNames()</code>","text":"<p>Returns a list of all available sensor names.</p> <p>Returns</p> Type Description <code>list[str]</code> A list of all available sensor names."},{"location":"LiveViewAPI/#findsensornamename","title":"<code>findSensorName(name)</code>","text":"<p>Finds sensors that match a specific name.</p> <p>Parameters</p> Name Type Description <code>name</code> <code>str</code> The sensor name to search for. <p>Returns</p> Type Description <code>list[tuple[str, int]]</code> A list of tuples containing sensor name and index."},{"location":"LiveViewAPI/#getsensortempname-match","title":"<code>GetSensorTemp(name, Match)</code>","text":"<p>Gets the temperature of a specific sensor by name.</p> <p>Parameters</p> Name Type Description <code>name</code> <code>str</code> The sensor name. <code>Match</code> <code>bool</code> If <code>True</code>, requires exact match. If <code>False</code>, allows partial match. <p>Returns</p> Type Description <code>float</code> The sensor temperature in Celsius. Returns -1 if not found."},{"location":"LiveViewAPI/#getsensorswithtemp","title":"<code>GetSensorsWithTemp()</code>","text":"<p>Gets all sensors with their temperature values.</p> <p>Returns</p> Type Description <code>list[tuple[str, float]]</code> A list of tuples containing sensor name and temperature."},{"location":"LiveViewAPI/#updatenamesfalse","title":"<code>update(names=False)</code>","text":"<p>Updates sensor data.</p> <p>Parameters</p> Name Type Description <code>names</code> <code>bool</code> If <code>True</code>, also updates the sensor names list. Default is <code>False</code>. <p>Example</p> <pre><code># This code will only run on Linux\nimport sys\nif sys.platform == \"linux\":\n    from HardView.LiveView import PyLinuxSensor\n\n    try:\n        linux_sensor = PyLinuxSensor()\n\n        # Get specific temperature readings\n        print(f\"CPU Temperature: {linux_sensor.getCpuTemp():.1f}\u00b0C\")\n        print(f\"Motherboard Temperature: {linux_sensor.getMotherboardTemp():.1f}\u00b0C\")\n        print(f\"Chipset Temperature: {linux_sensor.getChipsetTemp():.1f}\u00b0C\")\n        print(f\"VRM Temperature: {linux_sensor.getVRMTemp():.1f}\u00b0C\")\n        print(f\"Drive Temperature: {linux_sensor.getDriveTemp():.1f}\u00b0C\")\n\n        # Get all available sensors\n        all_sensors = linux_sensor.getAllSensorNames()\n        print(f\"\\nTotal Sensors Available: {len(all_sensors)}\")\n\n        # Show first few sensors with temperatures\n        sensors_with_temp = linux_sensor.GetSensorsWithTemp()\n        print(\"\\nAll Sensors with Temperatures:\")\n        for sensor_name, temp in sensors_with_temp[:10]:  # Show first 10\n            if temp &gt; 0:  # Only show valid temperatures\n                print(f\" - {sensor_name}: {temp:.1f}\u00b0C\")\n\n        # Find specific sensor\n        core_sensors = linux_sensor.findSensorName(\"Core\")\n        print(f\"\\nCore Sensors Found: {len(core_sensors)}\")\n        for sensor_name, index in core_sensors:\n            temp = linux_sensor.GetSensorTemp(sensor_name, True)\n            if temp &gt; 0:\n                print(f\" - {sensor_name}: {temp:.1f}\u00b0C\")\n\n        # Update readings\n        linux_sensor.update()\n\n    except Exception as e:\n        print(f\"Error with Linux sensor monitoring: {e}\")\nelse:\n    print(\"Linux sensor monitoring is only supported on Linux.\")\n</code></pre>"},{"location":"LiveViewAPI/#pyrawinfo-windows-only","title":"<code>PyRawInfo</code> (Windows Only)","text":"<p>The <code>PyRawInfo</code> class provides access to raw system firmware tables, specifically the SMBIOS (System Management BIOS) data.</p> <p>Note: This class is only available on the Windows platform.</p> <p>Python Usage</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyRawInfo\n\n    # PyRawInfo does not require instantiation as its methods are static\nelse:\n    print(\"PyRawInfo is only supported on Windows.\")\n</code></pre>"},{"location":"LiveViewAPI/#rsmb-static-method","title":"<code>RSMB()</code> (Static Method)","text":"<p>Retrieves the raw SMBIOS (RSMB) data from the system firmware.</p> <p>Parameters</p> <p>This method takes no parameters.</p> <p>Returns</p> Type Description <code>list[int]</code> A list of bytes (integers) containing the raw SMBIOS table. <p>Supported Environments</p> Windows Linux \u2705 \u274c <p>Example</p> <pre><code># This code will only run on Windows\nimport sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyRawInfo\n\n    try:\n        smbios_data = PyRawInfo.RSMB()\n        print(f\"Raw SMBIOS Data (first 20 bytes): {smbios_data[:20]}...\")\n        print(f\"Total SMBIOS Data Size: {len(smbios_data)} bytes\")\n    except Exception as e:\n        print(f\"Error retrieving SMBIOS data: {e}\")\nelse:\n    print(\"Raw SMBIOS data retrieval is only supported on Windows.\")\n</code></pre> <p>Example Output</p> <pre><code>Raw SMBIOS Data (first 20 bytes): [32, 1, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]...\nTotal SMBIOS Data Size: 64 bytes\n</code></pre>"},{"location":"LiveViewAPI/#complete-system-monitoring-example","title":"Complete System Monitoring Example","text":"<p>Here's a comprehensive example that demonstrates how to use multiple <code>LiveView</code> classes together for complete system monitoring:</p> <pre><code>import sys\nimport time\nfrom HardView.LiveView import *\n\ndef monitor_system():\n    \"\"\"Complete system monitoring example\"\"\"\n\n    print(\"=== HardView LiveView System Monitor ===\\n\")\n\n    # Initialize monitors\n    cpu_monitor = PyLiveCPU()\n    ram_monitor = PyLiveRam()\n    disk_monitor = PyLiveDisk(mode=1)  # Read/Write speed mode\n    net_monitor = PyLiveNetwork()\n\n    # Platform-specific monitors\n    if sys.platform == \"win32\":\n        print(\"Initializing Windows-specific monitors...\")\n        try:\n            gpu_monitor = PyLiveGpu()\n            temp_manager = PyManageTemp()\n            cpu_temp = PyTempCpu()\n            gpu_temp = PyTempGpu()\n            other_temp = PyTempOther()\n            sensor = PySensor()\n            windows_monitors = True\n        except Exception as e:\n            print(f\"Error initializing Windows monitors: {e}\")\n            windows_monitors = False\n    elif sys.platform == \"linux\":\n        print(\"Initializing Linux-specific monitors...\")\n        try:\n            linux_sensor = PyLinuxSensor()\n            linux_monitors = True\n        except Exception as e:\n            print(f\"Error initializing Linux monitors: {e}\")\n            linux_monitors = False\n\n    # Monitoring loop\n    for i in range(3):  # Monitor for 3 iterations\n        print(f\"\\n--- Monitoring Cycle {i+1} ---\")\n\n        # Basic system monitoring (cross-platform)\n        cpu_usage = cpu_monitor.get_usage(1000)\n        ram_usage = ram_monitor.get_usage()\n        disk_usage = disk_monitor.get_usage(1000)\n        net_usage = net_monitor.get_usage(1000, mode=0)\n\n        print(f\"CPU Usage: {cpu_usage:.2f}%\")\n        print(f\"RAM Usage: {ram_usage:.2f}%\")\n        print(f\"Disk R/W: Read {disk_usage[0][1]:.2f} MB/s, Write {disk_usage[1][1]:.2f} MB/s\")\n        print(f\"Network Usage: {net_usage:.4f} MB/s\")\n\n        # Windows-specific monitoring\n        if sys.platform == \"win32\" and windows_monitors:\n            try:\n                gpu_usage = gpu_monitor.get_usage(1000)\n                cpu_temp.update()\n                gpu_temp.update()\n                other_temp.update()\n\n                print(f\"GPU Usage: {gpu_usage:.2f}%\")\n                print(f\"CPU Temperature: {cpu_temp.get_temp():.1f}\u00b0C\")\n                print(f\"GPU Temperature: {gpu_temp.get_temp():.1f}\u00b0C\")\n                print(f\"Motherboard Temperature: {other_temp.get_mb_temp():.1f}\u00b0C\")\n\n                # Show some fan speeds\n                fan_rpms = sensor.getAllFanRPMs()\n                if fan_rpms:\n                    print(\"Fan Speeds:\")\n                    for fan_name, rpm in fan_rpms[:3]:  # Show first 3 fans\n                        print(f\" - {fan_name}: {rpm:.0f} RPM\")\n\n            except Exception as e:\n                print(f\"Error reading Windows-specific data: {e}\")\n\n        # Linux-specific monitoring\n        elif sys.platform == \"linux\" and linux_monitors:\n            try:\n                linux_sensor.update()\n                cpu_temp = linux_sensor.getCpuTemp()\n                mb_temp = linux_sensor.getMotherboardTemp()\n\n                if cpu_temp &gt; 0:\n                    print(f\"CPU Temperature: {cpu_temp:.1f}\u00b0C\")\n                if mb_temp &gt; 0:\n                    print(f\"Motherboard Temperature: {mb_temp:.1f}\u00b0C\")\n\n            except Exception as e:\n                print(f\"Error reading Linux-specific data: {e}\")\n\n        if i &lt; 2:  # Don't sleep on last iteration\n            time.sleep(2)\n\n    print(\"\\n=== Monitoring Complete ===\")\n\nif __name__ == \"__main__\":\n    monitor_system()\n</code></pre>"},{"location":"LiveViewAPI/#quick-test","title":"Quick Test","text":"<p>To quickly test the <code>LiveView</code> functions and see them in action, run the <code>Test.py</code> script located in the <code>tests/LiveView/</code> directory of the <code>HardView</code> project.</p> <pre><code>python tests/LiveView/Test.py\n</code></pre> <p>This script will execute various <code>LiveView</code> functions and display their outputs, providing a practical demonstration of how to use the module.</p>"},{"location":"LiveViewAPI/#notes-and-requirements","title":"Notes and Requirements","text":""},{"location":"LiveViewAPI/#windows-requirements","title":"Windows Requirements","text":"<ul> <li>HardwareWrapper.dll: Required for temperature monitoring classes (<code>PyTempCpu</code>, <code>PyTempGpu</code>, <code>PyTempOther</code>, <code>PySensor</code>, <code>PyManageTemp</code>).</li> <li>PDH Library: Required for performance counters (automatically linked).</li> <li>Windows Vista or later: For modern performance monitoring APIs.</li> </ul>"},{"location":"LiveViewAPI/#linux-requirements","title":"Linux Requirements","text":"<ul> <li>lm-sensors library: Required for <code>PyLinuxSensor</code> class.</li> <li>Install on Ubuntu/Debian: <code>sudo apt-get install lm-sensors libsensors4-dev</code></li> <li>Install on CentOS/RHEL: <code>sudo yum install lm_sensors lm_sensors-devel</code></li> </ul>"},{"location":"LiveViewAPI/#error-handling","title":"Error Handling","text":"<p>Most classes will throw runtime errors if: - Required libraries are not available - Hardware is not supported - Permissions are insufficient - System resources are unavailable</p> <p>Always use try-catch blocks when working with hardware monitoring functions.</p>"},{"location":"LiveViewAPI/#notes","title":"Notes","text":"<ul> <li>PyLiveRam: Fastest RAM monitoring (~400K-500K queries/second)</li> <li>Temperature classes: Require hardware initialization, use sparingly</li> <li>Sensor classes: Provide the most comprehensive hardware information</li> <li>GPU monitoring: May not work well with integrated GPUs</li> </ul>"},{"location":"LiveViewAPI/#usage-tips-for-temperature-classes-in-windows","title":"Usage Tips for Temperature Classes in Windows","text":"<p>Note: Before performing the first read on Windows, make sure to update the values to ensure accurate results. This is especially important within the <code>PySensor</code> class, as some sensors require an initial update after initialization to return correct values.</p> <p>Note: There's no need to worry about repeating the configuration, as the function includes a safeguard that immediately prevents duplicates upon entry.</p> <ul> <li> <p>For simple scripts (e.g., monitoring only CPU temperature):   You can enable automatic initialization by passing true Or do not pass anything by default is true when creating a temperature monitoring object, then update it using the <code>.update</code> method .</p> </li> <li> <p>For larger programs or comprehensive scripts that monitor all sensors:   It\u2019s recommended to create an object from the <code>PyManageTemp</code> class, use the <code>.Init</code> method for initialization, and <code>.Update</code> for updating.</p> </li> <li> <p>Important note on update behavior:</p> </li> <li> <p>When using <code>.Update</code> from the <code>PyManageTemp</code> object:     This updates the sensor values inside the <code>libreHardwareMonitorlib</code> and <code>HardwareWrapper</code> libraries, but does not update the properties of the temperature objects inside the classes.     In this case, you must use <code>.reget</code> to refresh all temperature sensor objects.</p> </li> <li> <p>When using <code>.update</code> from an individual temperature object:     This method performs two tasks \u2014 it updates the sensor values in both <code>libreHardwareMonitorlib</code> and <code>HardwareWrapper</code>, and updates the properties of the specific object you used it on.     Therefore, if you call <code>.update</code> on an individual object, there is no need to call <code>.reget</code> for that object.</p> </li> <li> <p>Performance tip:   After a global update using <code>PyManageTemp</code>\u2019s <code>.Update</code> or calling <code>.update</code> on a specific temperature object, do not call <code>.Update</code> or <code>.update</code> again for the remaining objects.   This would add unnecessary load, increase execution time, and cause redundant updates.   Instead, use <code>.reget</code> to simply fetch the latest values.</p> </li> </ul>"},{"location":"LiveViewErrors/","title":"<code>HardView.LiveView</code> Errors Documentation","text":"<p>This document provides comprehensive information about potential errors and exceptions that can occur when using the <code>LiveView</code> module. Understanding these errors will help you implement proper error handling in your applications.</p>"},{"location":"LiveViewErrors/#table-of-contents","title":"Table of Contents","text":"<ul> <li><code>PyLiveCPU</code> Errors</li> <li><code>PyLiveRam</code> Errors</li> <li><code>PyLiveDisk</code> Errors</li> <li><code>PyLiveNetwork</code> Errors</li> <li><code>PyLiveGpu</code> Errors (Windows Only)</li> <li><code>PyTempCpu</code> Errors (Windows Only)</li> <li><code>PyTempGpu</code> Errors (Windows Only)</li> <li><code>PyTempOther</code> Errors (Windows Only)</li> <li><code>PySensor</code> Errors (Windows Only)</li> <li><code>PyManageTemp</code> Errors (Windows Only)</li> <li><code>PyLinuxSensor</code> Errors (Linux Only)</li> <li><code>PyRawInfo</code> Errors (Windows Only)</li> <li>Error Handling Best Practices</li> <li>Windows Temperature Monitoring Usage Tips</li> </ul>"},{"location":"LiveViewErrors/#pylivecpu-errors","title":"<code>PyLiveCPU</code> Errors","text":""},{"location":"LiveViewErrors/#get_usageinterval_ms-errors","title":"<code>get_usage(interval_ms)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows NtQuerySystemInformation failure Failed to query system information (first call) - System API access denied or unavailable <code>RuntimeError</code> Windows NtQuerySystemInformation failure Failed to query system information (second call) - System API access denied or unavailable <code>RuntimeError</code> Linux <code>/proc/stat</code> access Failed to open <code>/proc/stat</code> - File system permissions or corrupted proc filesystem <code>RuntimeError</code> All Unsupported platform Platform not supported for CPU usage monitoring"},{"location":"LiveViewErrors/#cpusnapshot-errors-windows-only","title":"<code>CpuSnapShot()</code> Errors (Windows Only)","text":"Error Type Platform Cause Description <code>InvalidArgumentError</code> Windows Invalid core index Core index is negative or exceeds available cores <code>RuntimeError</code> Windows NtQuerySystemInformation failure Failed to query system information using NtQuerySystemInformation API <code>RuntimeError</code> Windows System API unavailable Windows NT APIs not available or access denied <p>Example Error Handling</p> <pre><code>from HardView.LiveView import PyLiveCPU\n\ncpu_monitor = PyLiveCPU()\n\ntry:\n    usage = cpu_monitor.get_usage(interval_ms=1000)\n    print(f\"CPU Usage: {usage:.2f}%\")\n\n    # Windows-specific snapshot\n    if sys.platform == \"win32\":\n        core_count = cpu_monitor.CpuSnapShot(core=0, coreNumbers=True)\n        snapshot = cpu_monitor.CpuSnapShot(core=0)\n        print(f\"Available cores: {core_count}\")\n\nexcept RuntimeError as e:\n    if \"Failed to query system information\" in str(e):\n        print(\"Error: Unable to access system APIs. Try running as administrator.\")\n    elif \"Failed to open /proc/stat\" in str(e):\n        print(\"Error: Cannot access Linux proc filesystem. Check file permissions.\")\n    else:\n        print(f\"CPU monitoring error: {e}\")\nexcept ValueError as e:\n    print(f\"Invalid parameter: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#pyliveram-errors","title":"<code>PyLiveRam</code> Errors","text":""},{"location":"LiveViewErrors/#get_usagerawfalse-errors","title":"<code>get_usage(Raw=False)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows GlobalMemoryStatusEx failure Failed to query memory status with GlobalMemoryStatusEx API <code>RuntimeError</code> Linux <code>/proc/meminfo</code> access Failed to open <code>/proc/meminfo</code> - Permissions or corrupted filesystem <code>RuntimeError</code> Linux Parse failure Failed to parse MemTotal or MemAvailable from <code>/proc/meminfo</code> <code>RuntimeError</code> All Unsupported platform Platform not supported for RAM monitoring <p>Example Error Handling</p> <pre><code>from HardView.LiveView import PyLiveRam\n\nram_monitor = PyLiveRam()\n\ntry:\n    # Get RAM usage as percentage\n    ram_percent = ram_monitor.get_usage()\n    print(f\"RAM Usage: {ram_percent:.2f}%\")\n\n    # Get raw RAM data\n    ram_raw = ram_monitor.get_usage(Raw=True)\n    used_gb = ram_raw[0] / (1024**3)\n    total_gb = ram_raw[1] / (1024**3)\n    print(f\"RAM: {used_gb:.2f} GB / {total_gb:.2f} GB\")\n\nexcept RuntimeError as e:\n    if \"GlobalMemoryStatusEx\" in str(e):\n        print(\"Error: Cannot access Windows memory APIs.\")\n    elif \"Failed to open /proc/meminfo\" in str(e):\n        print(\"Error: Cannot access Linux memory information. Check permissions.\")\n    else:\n        print(f\"RAM monitoring error: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#pylivedisk-errors","title":"<code>PyLiveDisk</code> Errors","text":""},{"location":"LiveViewErrors/#constructor-pylivediskmode-errors","title":"Constructor <code>PyLiveDisk(mode)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows PDH query failure Failed to open PDH query - Performance counters unavailable <code>RuntimeError</code> Windows Counter addition failure Failed to add '% Disk Time' counter - Performance counter not available <code>RuntimeError</code> Windows Counter addition failure Failed to add 'Disk Read/Write Bytes/sec' counters <code>InvalidArgumentError</code> Windows Invalid mode Mode parameter is not 0 or 1 <code>RuntimeError</code> Linux Mode 0 unsupported Mode 0 (% usage) is not supported on Linux <code>InvalidArgumentError</code> Linux Invalid mode Invalid mode for PyLiveDisk on Linux. Only Mode 1 is supported"},{"location":"LiveViewErrors/#get_usageinterval1000-errors","title":"<code>get_usage(interval=1000)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows PDH data collection Failed to collect query data - Performance counter access denied <code>RuntimeError</code> Windows Counter value read Failed to read '% Disk Time' or disk speed counters <code>RuntimeError</code> Linux <code>/proc/diskstats</code> access Failed to open <code>/proc/diskstats</code> - Permissions or filesystem error"},{"location":"LiveViewErrors/#highdiskusagethreshold_mbps800-errors","title":"<code>HighDiskUsage(threshold_mbps=80.0)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> All Wrong mode HighDiskUsage() can only be called in mode 1"},{"location":"LiveViewErrors/#pylivenetwork-errors","title":"<code>PyLiveNetwork</code> Errors","text":""},{"location":"LiveViewErrors/#constructor-pylivenetwork-errors","title":"Constructor <code>PyLiveNetwork()</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows PDH query failure Failed to open PDH query - Performance counters unavailable <code>RuntimeError</code> Windows Counter addition failure Failed to add 'Bytes Total/sec' counter - Network performance counter unavailable"},{"location":"LiveViewErrors/#get_usageinterval1000-mode0-errors","title":"<code>get_usage(interval=1000, mode=0)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows PDH data collection Failed to collect query data - Performance counter access denied <code>RuntimeError</code> Windows Buffer size query Failed to get buffer size for counter array <code>RuntimeError</code> Windows Counter array read Failed to get formatted counter array <code>RuntimeError</code> Linux <code>/proc/net/dev</code> access Failed to open <code>/proc/net/dev</code> - Permissions or filesystem error"},{"location":"LiveViewErrors/#pylivegpu-errors-windows-only","title":"<code>PyLiveGpu</code> Errors (Windows Only)","text":""},{"location":"LiveViewErrors/#constructor-pylivegpu-errors","title":"Constructor <code>PyLiveGpu()</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows PDH query failure Failed to open PDH query - Performance counters unavailable <code>RuntimeError</code> Windows No suitable counter Could not find any suitable GPU performance counters"},{"location":"LiveViewErrors/#get_usageinterval_ms1000-errors","title":"<code>get_usage(interval_ms=1000)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows Uninitialized monitor GPU Monitor was not initialized correctly <code>RuntimeError</code> Windows PDH data collection Failed to collect query data - Performance counter access issues <code>RuntimeError</code> Windows No valid counters No valid counter values available"},{"location":"LiveViewErrors/#get_average_usageinterval_ms1000-errors","title":"<code>get_average_usage(interval_ms=1000)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows Uninitialized monitor GPU Monitor was not initialized correctly <code>RuntimeError</code> Windows PDH data collection Failed to collect query data <code>RuntimeError</code> Windows No valid counters No valid counter values available"},{"location":"LiveViewErrors/#get_max_usageinterval_ms1000-errors","title":"<code>get_max_usage(interval_ms=1000)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows Uninitialized monitor GPU Monitor was not initialized correctly <code>RuntimeError</code> Windows PDH data collection Failed to collect query data <code>RuntimeError</code> Windows No valid counters No valid counter values available <p>Example Error Handling</p> <pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyLiveGpu\n\n    try:\n        gpu_monitor = PyLiveGpu()\n\n        # Test different usage methods\n        total_usage = gpu_monitor.get_usage(1000)\n        avg_usage = gpu_monitor.get_average_usage(1000)\n        max_usage = gpu_monitor.get_max_usage(1000)\n        counter_count = gpu_monitor.get_counter_count()\n\n        print(f\"GPU Total Usage: {total_usage:.2f}%\")\n        print(f\"GPU Average Usage: {avg_usage:.2f}%\")\n        print(f\"GPU Max Usage: {max_usage:.2f}%\")\n        print(f\"Counter Count: {counter_count}\")\n\n    except RuntimeError as e:\n        if \"Could not find any suitable GPU performance counters\" in str(e):\n            print(\"Error: No compatible GPU performance counters found.\")\n            print(\"This often occurs with integrated GPUs or older drivers.\")\n        elif \"was not initialized correctly\" in str(e):\n            print(\"Error: GPU monitor initialization failed.\")\n        elif \"No valid counter values available\" in str(e):\n            print(\"Error: GPU performance counters became unavailable.\")\n        else:\n            print(f\"GPU monitoring error: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#pytempcpu-errors-windows-only","title":"<code>PyTempCpu</code> Errors (Windows Only)","text":""},{"location":"LiveViewErrors/#constructor-pytempcpuinittrue-errors","title":"Constructor <code>PyTempCpu(init=True)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows Hardware monitor init Failed to initialize hardware temperature monitor - HardwareWrapper.dll missing <code>RuntimeError</code> Windows DLL dependency Check if HardwareWrapper.dll is present"},{"location":"LiveViewErrors/#temperature-monitoring-methods-errors","title":"Temperature Monitoring Methods Errors","text":"Method Error Type Return Value Cause Description <code>get_temp()</code> None -1 Temperature sensor unavailable or error reading <code>get_max_temp()</code> None -1 Max core temperature sensor unavailable <code>get_avg_temp()</code> None -1 Average core temperature calculation failed <code>get_fan_rpm()</code> None -1 CPU fan RPM sensor unavailable <code>update()</code> None Silent failure Hardware monitor update failed All methods None -99.0 Library shutdown Function called after library shutdown <p>**Example Error Handling **</p> <pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempCpu\n\n    try:\n        # Simple script approach - auto initialization\n        cpu_temp = PyTempCpu(init=True)\n\n        # Update and get values in one call (no need for reget)\n        cpu_temp.update()  # This updates both library and object properties\n\n        temp = cpu_temp.get_temp()\n        max_temp = cpu_temp.get_max_temp()\n        avg_temp = cpu_temp.get_avg_temp()\n        fan_rpm = cpu_temp.get_fan_rpm()\n\n        # Check for different error conditions\n        if temp == -99.0:\n            print(\"Error: Library has been shutdown. Cannot read temperature.\")\n        elif temp == -1:\n            print(\"Warning: CPU temperature sensor unavailable\")\n        else:\n            print(f\"CPU Temperature: {temp:.1f}\u00b0C\")\n\n        if max_temp == -99.0:\n            print(\"Error: Library has been shutdown. Cannot read max temperature.\")\n        elif max_temp == -1:\n            print(\"Warning: Max CPU temperature sensor unavailable\")\n        else:\n            print(f\"Max CPU Core Temperature: {max_temp:.1f}\u00b0C\")\n\n        if avg_temp == -99.0:\n            print(\"Error: Library has been shutdown. Cannot read average temperature.\")\n        elif avg_temp == -1:\n            print(\"Warning: Average CPU temperature calculation failed\")\n        else:\n            print(f\"Average CPU Core Temperature: {avg_temp:.1f}\u00b0C\")\n\n        if fan_rpm == -99.0:\n            print(\"Error: Library has been shutdown. Cannot read fan RPM.\")\n        elif fan_rpm == -1:\n            print(\"Warning: CPU fan RPM sensor unavailable\")\n        else:\n            print(f\"CPU Fan RPM: {fan_rpm:.0f}\")\n\n    except RuntimeError as e:\n        if \"Failed to initialize hardware temperature monitor\" in str(e):\n            print(\"Error: Hardware temperature monitoring unavailable.\")\n            print(\"Ensure HardwareWrapper.dll is present and accessible.\")\n        else:\n            print(f\"CPU temperature monitoring error: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#pytempgpu-errors-windows-only","title":"<code>PyTempGpu</code> Errors (Windows Only)","text":""},{"location":"LiveViewErrors/#constructor-pytempgpuinittrue-errors","title":"Constructor <code>PyTempGpu(init=True)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows Hardware monitor init Failed to initialize hardware temperature monitor - HardwareWrapper.dll missing"},{"location":"LiveViewErrors/#gpu-temperature-methods-errors","title":"GPU Temperature Methods Errors","text":"Method Error Type Return Value Cause Description <code>get_temp()</code> None -1 GPU temperature sensor unavailable <code>get_fan_rpm()</code> None -1 GPU fan RPM sensor unavailable All methods None -99.0 Library shutdown Function called after library shutdown <p>**Example Error Handling **</p> <pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempGpu\n\n    try:\n        # For individual GPU monitoring (auto initialization)\n        gpu_temp = PyTempGpu(init=True)\n\n        # Update and get values (no need for reget)\n        gpu_temp.update()  # This updates both library and object properties\n\n        temp = gpu_temp.get_temp()\n        fan_rpm = gpu_temp.get_fan_rpm()\n\n        if temp == -99.0:\n            print(\"Error: Library has been shutdown. Cannot read GPU temperature.\")\n        elif temp == -1:\n            print(\"Warning: GPU temperature sensor unavailable\")\n        else:\n            print(f\"GPU Temperature: {temp:.1f}\u00b0C\")\n\n        if fan_rpm == -99.0:\n            print(\"Error: Library has been shutdown. Cannot read GPU fan RPM.\")\n        elif fan_rpm == -1:\n            print(\"Warning: GPU fan RPM sensor unavailable\")\n        else:\n            print(f\"GPU Fan RPM: {fan_rpm:.0f}\")\n\n    except RuntimeError as e:\n        if \"Failed to initialize hardware temperature monitor\" in str(e):\n            print(\"Error: Hardware temperature monitoring unavailable.\")\n        else:\n            print(f\"GPU temperature monitoring error: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#pytempother-errors-windows-only","title":"<code>PyTempOther</code> Errors (Windows Only)","text":""},{"location":"LiveViewErrors/#constructor-pytempotherinittrue-errors","title":"Constructor <code>PyTempOther(init=True)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows Hardware monitor init Failed to initialize hardware temperature monitor - HardwareWrapper.dll missing"},{"location":"LiveViewErrors/#other-temperature-methods-errors","title":"Other Temperature Methods Errors","text":"Method Error Type Return Value Cause Description <code>get_mb_temp()</code> None -1 Motherboard temperature sensor unavailable <code>get_Storage_temp()</code> None -1 Storage temperature sensor unavailable All methods None -99.0 Library shutdown Function called after library shutdown <p>**Example Error Handling **</p> <pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempOther\n\n    try:\n        # For individual other temperature monitoring\n        other_temp = PyTempOther(init=True)\n\n        # Update and get values (no need for reget)\n        other_temp.update()  # This updates both library and object properties\n\n        mb_temp = other_temp.get_mb_temp()\n        storage_temp = other_temp.get_Storage_temp()\n\n        if mb_temp == -99.0:\n            print(\"Error: Library has been shutdown. Cannot read motherboard temperature.\")\n        elif mb_temp == -1:\n            print(\"Warning: Motherboard temperature sensor unavailable\")\n        else:\n            print(f\"Motherboard Temperature: {mb_temp:.1f}\u00b0C\")\n\n        if storage_temp == -99.0:\n            print(\"Error: Library has been shutdown. Cannot read storage temperature.\")\n        elif storage_temp == -1:\n            print(\"Warning: Storage temperature sensor unavailable\")\n        else:\n            print(f\"Storage Temperature: {storage_temp:.1f}\u00b0C\")\n\n    except RuntimeError as e:\n        if \"Failed to initialize hardware temperature monitor\" in str(e):\n            print(\"Error: Hardware temperature monitoring unavailable.\")\n        else:\n            print(f\"Other temperature monitoring error: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#pysensor-errors-windows-only","title":"<code>PySensor</code> Errors (Windows Only)","text":""},{"location":"LiveViewErrors/#constructor-pysensorinittrue-errors","title":"Constructor <code>PySensor(init=True)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows Hardware monitor init Failed to initialize hardware temperature monitor - HardwareWrapper.dll missing <code>RuntimeError</code> Windows No sensors found No sensors found - Hardware monitoring unavailable <code>RuntimeError</code> Windows Data mismatch Sensor name and sensor value size mismatch"},{"location":"LiveViewErrors/#getvaluebynamename-errors","title":"<code>GetValueByName(name)</code> Errors","text":"Error Type Platform Return Value Cause Description <code>RuntimeError</code> Windows - Sensor not found Specified sensor name not found in available sensors None Windows -99.0 Library shutdown Function called after library shutdown <p>**Example Error Handling **</p> <pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PySensor\n\n    try:\n        # For individual sensor monitoring\n        sensor = PySensor(init=True)\n\n        # Update and get sensor data (no need for reget)\n        sensor.update()  # This updates both library and object properties\n\n        # Get all available sensors\n        sensors = sensor.getAllSensors()\n        fan_rpms = sensor.getAllFanRPMs()\n\n        print(f\"Available sensors: {len(sensors)}\")\n        print(f\"Available fan RPM sensors: {len(fan_rpms)}\")\n\n        # Try to get a specific sensor value\n        if sensors:\n            try:\n                value = sensor.GetValueByName(sensors[0])\n                if value == -99.0:\n                    print(f\"Error: Library has been shutdown. Cannot read sensor {sensors[0]}\")\n                else:\n                    print(f\"{sensors[0]}: {value}\")\n            except RuntimeError as e:\n                if \"Sensor not found\" in str(e):\n                    print(f\"Sensor '{sensors[0]}' not found\")\n                else:\n                    print(f\"Error reading sensor value: {e}\")\n\n        # Display fan RPMs\n        for fan_name, rpm in fan_rpms:\n            if rpm == -99.0:\n                print(f\"Error: Library shutdown. Cannot read {fan_name} RPM\")\n            elif rpm == -1:\n                print(f\"Warning: {fan_name} RPM sensor unavailable\")\n            else:\n                print(f\"{fan_name}: {rpm:.0f} RPM\")\n\n    except RuntimeError as e:\n        if \"Failed to initialize hardware temperature monitor\" in str(e):\n            print(\"Error: Hardware sensor monitoring unavailable.\")\n        elif \"No sensors found\" in str(e):\n            print(\"Error: No hardware sensors detected.\")\n        elif \"size mismatch\" in str(e):\n            print(\"Error: Hardware sensor data corruption.\")\n        else:\n            print(f\"Sensor monitoring error: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#pymanagetemp-errors-windows-only","title":"<code>PyManageTemp</code> Errors (Windows Only)","text":""},{"location":"LiveViewErrors/#init-method-errors","title":"<code>Init()</code> Method Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows Hardware monitor init Failed to initialize hardware temperature monitor - HardwareWrapper.dll missing <p>Example Error Handling (Corrected for Comprehensive Monitoring)</p> <pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyManageTemp, PyTempCpu, PyTempGpu, PyTempOther, PySensor\n\n    # Comprehensive temperature monitoring approach\n    temp_manager = PyManageTemp()\n\n    try:\n        # Initialize the main temperature manager\n        temp_manager.Init()\n        print(\"Hardware temperature monitoring initialized successfully\")\n\n        # Create temperature objects without initializing (reuse the manager's initialization)\n        cpu_temp = PyTempCpu(init=False)\n        gpu_temp = PyTempGpu(init=False)\n        other_temp = PyTempOther(init=False)\n        sensor = PySensor(init=False)\n\n        # Perform global update\n        temp_manager.Update()  # Updates libreHardwareMonitorlib and HardwareWrapper\n\n        # Now use reget() for all objects to refresh their properties\n        cpu_temp.reget()\n        gpu_temp.reget()\n        other_temp.reget()\n        sensor.reget()\n\n        # Get readings (no individual updates needed)\n        cpu_temp_val = cpu_temp.get_temp()\n        gpu_temp_val = gpu_temp.get_temp()\n        mb_temp_val = other_temp.get_mb_temp()\n\n        # Check for library shutdown error (-99.0)\n        temps = [\n            (\"CPU\", cpu_temp_val),\n            (\"GPU\", gpu_temp_val),\n            (\"Motherboard\", mb_temp_val)\n        ]\n\n        for name, temp_val in temps:\n            if temp_val == -99.0:\n                print(f\"Error: Library shutdown. Cannot read {name} temperature.\")\n            elif temp_val == -1:\n                print(f\"Warning: {name} temperature sensor unavailable\")\n            else:\n                print(f\"{name} Temperature: {temp_val:.1f}\u00b0C\")\n\n        # Close when done\n        temp_manager.Close()\n\n    except RuntimeError as e:\n        if \"Failed to initialize hardware temperature monitor\" in str(e):\n            print(\"Error: Cannot initialize hardware temperature monitoring.\")\n            print(\"Ensure HardwareWrapper.dll is present and accessible.\")\n        else:\n            print(f\"Temperature management error: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#pylinuxsensor-errors-linux-only","title":"<code>PyLinuxSensor</code> Errors (Linux Only)","text":""},{"location":"LiveViewErrors/#constructor-pylinuxsensor-errors","title":"Constructor <code>PyLinuxSensor()</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Linux Sensors initialization Failed to initialize sensors library <code>RuntimeError</code> Linux No sensors available No temperature sensors detected on the system"},{"location":"LiveViewErrors/#sensor-reading-methods-errors","title":"Sensor Reading Methods Errors","text":"Method Error Type Cause Description <code>getCpuTemp()</code> None Returns -1.0 CPU temperature sensor unavailable <code>getChipsetTemp()</code> None Returns -1.0 Chipset temperature sensor unavailable <code>getMotherboardTemp()</code> None Returns -1.0 Motherboard temperature sensor unavailable <code>getVRMTemp()</code> None Returns -1.0 VRM temperature sensor unavailable <code>getDriveTemp()</code> None Returns -1.0 Drive temperature sensor unavailable"},{"location":"LiveViewErrors/#getsensortempname-match-errors","title":"<code>GetSensorTemp(name, Match)</code> Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Linux Sensors initialization Failed to initialize sensors None Linux Returns -1.0 Specified sensor not found or unavailable <p>Example Error Handling</p> <pre><code>import sys\nif sys.platform.startswith(\"linux\"):\n    from HardView.LiveView import PyLinuxSensor\n\n    try:\n        sensors = PyLinuxSensor()\n\n        # Get pre-defined temperature readings\n        cpu_temp = sensors.getCpuTemp()\n        chipset_temp = sensors.getChipsetTemp()\n        mb_temp = sensors.getMotherboardTemp()\n        vrm_temp = sensors.getVRMTemp()\n        drive_temp = sensors.getDriveTemp()\n\n        # Display temperatures with warnings for unavailable sensors\n        temps = [\n            (\"CPU\", cpu_temp),\n            (\"Chipset\", chipset_temp),\n            (\"Motherboard\", mb_temp),\n            (\"VRM\", vrm_temp),\n            (\"Drive\", drive_temp)\n        ]\n\n        for name, temp in temps:\n            if temp == -1.0:\n                print(f\"Warning: {name} temperature sensor unavailable\")\n            else:\n                print(f\"{name} Temperature: {temp:.1f}\u00b0C\")\n\n        # Get all available sensor names\n        all_sensors = sensors.getAllSensorNames()\n        print(f\"\\nTotal available sensors: {len(all_sensors)}\")\n\n        # Get all sensors with their values\n        sensors_with_temps = sensors.GetSensorsWithTemp()\n        print(\"\\nAll sensors with temperatures:\")\n        for sensor_name, temp_val in sensors_with_temps:\n            if temp_val == -1.0:\n                print(f\"  {sensor_name}: unavailable\")\n            else:\n                print(f\"  {sensor_name}: {temp_val:.1f}\u00b0C\")\n\n        # Try to find a specific sensor\n        found_sensors = sensors.findSensorName(\"temp1\")\n        if found_sensors:\n            print(f\"\\nFound 'temp1' sensors: {len(found_sensors)}\")\n            for sensor_name, index in found_sensors:\n                temp_val = sensors.GetSensorTemp(sensor_name, True)\n                if temp_val != -1.0:\n                    print(f\"  {sensor_name} (index {index}): {temp_val:.1f}\u00b0C\")\n\n    except RuntimeError as e:\n        if \"Failed to initialize sensors\" in str(e):\n            print(\"Error: Cannot initialize Linux sensors library.\")\n            print(\"Install lm-sensors package: sudo apt install lm-sensors\")\n            print(\"Run sensors-detect: sudo sensors-detect\")\n        else:\n            print(f\"Linux sensor monitoring error: {e}\")\n\n    except ImportError:\n        print(\"Error: Linux sensor monitoring not available.\")\n        print(\"This may indicate missing sensor library dependencies.\")\n</code></pre>"},{"location":"LiveViewErrors/#pyrawinfo-errors-windows-only","title":"<code>PyRawInfo</code> Errors (Windows Only)","text":""},{"location":"LiveViewErrors/#rsmb-static-method-errors","title":"<code>RSMB()</code> Static Method Errors","text":"Error Type Platform Cause Description <code>RuntimeError</code> Windows API unavailable Failed to get address of GetSystemFirmwareTable <code>RuntimeError</code> Windows Table size query Failed to get RSMB table size - SMBIOS not available <code>RuntimeError</code> Windows Table retrieval Failed to retrieve RSMB table - Access denied or table corrupted <p>Example Error Handling</p> <pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyRawInfo\n\n    try:\n        smbios_data = PyRawInfo.RSMB()\n        print(f\"SMBIOS data retrieved: {len(smbios_data)} bytes\")\n        print(f\"First 20 bytes: {smbios_data[:20]}\")\n\n    except RuntimeError as e:\n        if \"Failed to get address of GetSystemFirmwareTable\" in str(e):\n            print(\"Error: GetSystemFirmwareTable API not available.\")\n        elif \"Failed to get RSMB table size\" in str(e):\n            print(\"Error: SMBIOS table not available on this system.\")\n        elif \"Failed to retrieve RSMB table\" in str(e):\n            print(\"Error: Cannot access SMBIOS table. Try running as administrator.\")\n        else:\n            print(f\"SMBIOS retrieval error: {e}\")\n</code></pre>"},{"location":"LiveViewErrors/#special-error-values","title":"Special Error Values","text":"Return Value Meaning Description Action Required -1 or -1.0 Sensor Unavailable The requested sensor is not available on the system or cannot be read Check hardware compatibility, sensor availability -99.0 Library Shutdown Function called after the temperature monitoring library has been shutdown Reinitialize the temperature monitoring system"},{"location":"LiveViewErrors/#example-implementation-patterns","title":"Example Implementation Patterns","text":""},{"location":"LiveViewErrors/#pattern-1-simple-individual-monitoring","title":"Pattern 1: Simple Individual Monitoring","text":"<pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyTempCpu\n\n    # Simple approach - individual monitoring with auto-init\n    cpu_temp = PyTempCpu(init=True)  # Auto initialization\n\n    # Update and read (no reget needed)\n    cpu_temp.update()  # Updates both library and object properties\n\n    temp = cpu_temp.get_temp()\n    if temp == -99.0:\n        print(\"Error: Library has been shutdown\")\n    elif temp == -1:\n        print(\"CPU temperature sensor unavailable\")\n    else:\n        print(f\"CPU Temperature: {temp:.1f}\u00b0C\")\n</code></pre>"},{"location":"LiveViewErrors/#pattern-2-comprehensive-monitoring-with-pymanagetemp","title":"Pattern 2: Comprehensive Monitoring with PyManageTemp","text":"<pre><code>import sys\nif sys.platform == \"win32\":\n    from HardView.LiveView import PyManageTemp, PyTempCpu, PyTempGpu, PyTempOther, PySensor\n\n    # Comprehensive approach - better for monitoring multiple sensors\n    temp_manager = PyManageTemp()\n    temp_manager.Init()  # Initialize once\n\n    # Create objects without individual initialization\n    cpu_temp = PyTempCpu(init=False)    # Reuse manager's init\n    gpu_temp = PyTempGpu(init=False)    # Reuse manager's init\n    other_temp = PyTempOther(init=False) # Reuse manager's init\n    sensor = PySensor(init=False)       # Reuse manager's init\n\n    # Global update once\n    temp_manager.Update()  # Updates library data only\n\n    # Refresh all object properties\n    cpu_temp.reget()    # Get latest values from updated library\n    gpu_temp.reget()    # Get latest values from updated library\n    other_temp.reget()  # Get latest values from updated library\n    sensor.reget()      # Get latest values from updated library\n\n    # Now read values (no additional updates needed)\n    cpu_temp_val = cpu_temp.get_temp()\n    gpu_temp_val = gpu_temp.get_temp()\n    mb_temp_val = other_temp.get_mb_temp()\n\n    # Check values and handle errors\n    temps = [\n        (\"CPU\", cpu_temp_val),\n        (\"GPU\", gpu_temp_val),\n        (\"Motherboard\", mb_temp_val)\n    ]\n\n    for name, temp_val in temps:\n        if temp_val == -99.0:\n            print(f\"Error: Library shutdown - {name} temperature unavailable\")\n        elif temp_val == -1:\n            print(f\"Warning: {name} temperature sensor unavailable\")\n        else:\n            print(f\"{name} Temperature: {temp_val:.1f}\u00b0C\")\n\n    # Clean up\n    temp_manager.Close()\n</code></pre>"},{"location":"LiveViewErrors/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"LiveViewErrors/#1-comprehensive-system-monitoring-with-error-handling","title":"1. Comprehensive System Monitoring with Error Handling","text":"<pre><code>import sys\nfrom HardView.LiveView import *\n\nclass SafeSystemMonitor:\n    \"\"\"Comprehensive system monitoring with proper error handling\"\"\"\n\n    def __init__(self):\n        self.monitors = {}\n        self.temp_monitors = {}\n        self.temp_manager = None\n        self.temp_initialized = False\n        self._initialize_monitors()\n\n    def _initialize_monitors(self):\n        \"\"\"Initialize all available monitors with error handling\"\"\"\n\n        # Basic performance monitors\n        try:\n            self.monitors['cpu'] = PyLiveCPU()\n        except Exception as e:\n            print(f\"CPU monitor unavailable: {e}\")\n\n        try:\n            self.monitors['ram'] = PyLiveRam()\n        except Exception as e:\n            print(f\"RAM monitor unavailable: {e}\")\n\n        try:\n            self.monitors['disk'] = PyLiveDisk(mode=1)  # Cross-platform compatible\n        except Exception as e:\n            print(f\"Disk monitor unavailable: {e}\")\n\n        try:\n            self.monitors['network'] = PyLiveNetwork()\n        except Exception as e:\n            print(f\"Network monitor unavailable: {e}\")\n\n        # Platform-specific monitors\n        if sys.platform == \"win32\":\n            # GPU monitoring\n            try:\n                self.monitors['gpu'] = PyLiveGpu()\n            except Exception as e:\n                print(f\"GPU monitor unavailable: {e}\")\n\n            # Temperature monitoring - comprehensive approach\n            try:\n                # Use PyManageTemp for comprehensive monitoring\n                self.temp_manager = PyManageTemp()\n                self.temp_manager.Init()\n                self.temp_initialized = True\n\n                # Create temperature objects without individual initialization\n                self.temp_monitors['cpu_temp'] = PyTempCpu(init=False)\n                self.temp_monitors['gpu_temp'] = PyTempGpu(init=False)\n                self.temp_monitors['other_temp'] = PyTempOther(init=False)\n                self.temp_monitors['sensor'] = PySensor(init=False)\n\n            except Exception as e:\n                print(f\"Temperature monitoring unavailable: {e}\")\n\n        elif sys.platform.startswith(\"linux\"):\n            # Linux temperature monitoring\n            try:\n                self.temp_monitors['linux_sensor'] = PyLinuxSensor()\n                self.temp_initialized = True\n            except Exception as e:\n                print(f\"Linux sensor monitor unavailable: {e}\")\n\n    def get_temperature_data(self):\n        \"\"\"Get all temperature monitoring data with corrected update pattern\"\"\"\n        results = {}\n\n        if not self.temp_initialized:\n            return {'error': 'Temperature monitoring not initialized'}\n\n        if sys.platform == \"win32\" and self.temp_manager:\n            try:\n                # Single global update\n                self.temp_manager.Update()\n\n                # Refresh all object properties\n                for monitor_name, monitor in self.temp_monitors.items():\n                    try:\n                        monitor.reget()  # Get latest values from updated library\n                    except Exception as e:\n                        results[f'{monitor_name}_reget_error'] = str(e)\n\n                # Get temperature readings\n                if 'cpu_temp' in self.temp_monitors:\n                    try:\n                        cpu_monitor = self.temp_monitors['cpu_temp']\n                        temps = {\n                            'cpu_temp': cpu_monitor.get_temp(),\n                            'cpu_max_temp': cpu_monitor.get_max_temp(),\n                            'cpu_avg_temp': cpu_monitor.get_avg_temp(),\n                            'cpu_fan_rpm': cpu_monitor.get_fan_rpm()\n                        }\n\n                        for key, value in temps.items():\n                            if value == -99.0:\n                                results[key] = \"Library Shutdown Error\"\n                            elif value == -1:\n                                results[key] = \"Unavailable\"\n                            else:\n                                if 'rpm' in key:\n                                    results[key] = f\"{value:.0f} RPM\"\n                                else:\n                                    results[key] = f\"{value:.1f}\u00b0C\"\n                    except Exception as e:\n                        results['cpu_temp_error'] = str(e)\n\n                if 'gpu_temp' in self.temp_monitors:\n                    try:\n                        gpu_monitor = self.temp_monitors['gpu_temp']\n                        gpu_temp = gpu_monitor.get_temp()\n                        gpu_fan_rpm = gpu_monitor.get_fan_rpm()\n\n                        if gpu_temp == -99.0:\n                            results['gpu_temp'] = \"Library Shutdown Error\"\n                        elif gpu_temp == -1:\n                            results['gpu_temp'] = \"Unavailable\"\n                        else:\n                            results['gpu_temp'] = f\"{gpu_temp:.1f}\u00b0C\"\n\n                        if gpu_fan_rpm == -99.0:\n                            results['gpu_fan_rpm'] = \"Library Shutdown Error\"\n                        elif gpu_fan_rpm == -1:\n                            results['gpu_fan_rpm'] = \"Unavailable\"\n                        else:\n                            results['gpu_fan_rpm'] = f\"{gpu_fan_rpm:.0f} RPM\"\n                    except Exception as e:\n                        results['gpu_temp_error'] = str(e)\n\n                if 'other_temp' in self.temp_monitors:\n                    try:\n                        other_monitor = self.temp_monitors['other_temp']\n                        mb_temp = other_monitor.get_mb_temp()\n                        storage_temp = other_monitor.get_Storage_temp()\n\n                        temps = [\n                            ('motherboard_temp', mb_temp),\n                            ('storage_temp', storage_temp)\n                        ]\n\n                        for key, temp in temps:\n                            if temp == -99.0:\n                                results[key] = \"Library Shutdown Error\"\n                            elif temp == -1:\n                                results[key] = \"Unavailable\"\n                            else:\n                                results[key] = f\"{temp:.1f}\u00b0C\"\n                    except Exception as e:\n                        results['other_temp_error'] = str(e)\n\n                if 'sensor' in self.temp_monitors:\n                    try:\n                        sensor_monitor = self.temp_monitors['sensor']\n                        all_sensors = sensor_monitor.getAllSensors()\n                        all_fans = sensor_monitor.getAllFanRPMs()\n\n                        results['total_sensors'] = len(all_sensors)\n                        results['total_fans'] = len(all_fans)\n\n                        # Sample sensor readings\n                        sample_sensors = all_sensors[:3]\n                        for sensor_name in sample_sensors:\n                            try:\n                                value = sensor_monitor.GetValueByName(sensor_name)\n                                if value == -99.0:\n                                    results[f'sensor_{sensor_name}'] = \"Library Shutdown Error\"\n                                elif value == -1:\n                                    results[f'sensor_{sensor_name}'] = \"Unavailable\"\n                                else:\n                                    results[f'sensor_{sensor_name}'] = f\"{value:.1f}\u00b0C\"\n                            except Exception:\n                                results[f'sensor_{sensor_name}'] = \"Error reading\"\n\n                        # Fan RPM data\n                        for fan_name, rpm in all_fans[:3]:\n                            if rpm == -99.0:\n                                results[f'fan_{fan_name}'] = \"Library Shutdown Error\"\n                            elif rpm == -1:\n                                results[f'fan_{fan_name}'] = \"Unavailable\"\n                            else:\n                                results[f'fan_{fan_name}'] = f\"{rpm:.0f} RPM\"\n\n                    except Exception as e:\n                        results['sensor_error'] = str(e)\n\n            except Exception as e:\n                results['update_error'] = str(e)\n\n        elif sys.platform.startswith(\"linux\"):\n            # Linux temperature monitoring (no change needed)\n            if 'linux_sensor' in self.temp_monitors:\n                try:\n                    linux_sensor = self.temp_monitors['linux_sensor']\n                    linux_sensor.update()\n\n                    temps = {\n                        'cpu_temp': linux_sensor.getCpuTemp(),\n                        'chipset_temp': linux_sensor.getChipsetTemp(),\n                        'motherboard_temp': linux_sensor.getMotherboardTemp(),\n                        'vrm_temp': linux_sensor.getVRMTemp(),\n                        'drive_temp': linux_sensor.getDriveTemp()\n                    }\n\n                    for key, value in temps.items():\n                        if value == -1.0:\n                            results[key] = \"Unavailable\"\n                        else:\n                            results[key] = f\"{value:.1f}\u00b0C\"\n\n                    # Get sensor count\n                    all_sensor_names = linux_sensor.getAllSensorNames()\n                    results['total_linux_sensors'] = len(all_sensor_names)\n\n                    # Sample sensors\n                    sensors_with_temps = linux_sensor.GetSensorsWithTemp()\n                    results['sensors_with_data'] = len([s for s in sensors_with_temps if s[1] != -1.0])\n\n                except Exception as e:\n                    results['linux_sensor_error'] = str(e)\n\n        return results\n\n    def get_performance_data(self):\n        \"\"\"Get all performance monitoring data (unchanged)\"\"\"\n        results = {}\n\n        # CPU monitoring\n        if 'cpu' in self.monitors:\n            try:\n                results['cpu_usage'] = f\"{self.monitors['cpu'].get_usage(1000):.2f}%\"\n            except Exception as e:\n                results['cpu_usage'] = f\"Error: {e}\"\n\n        # RAM monitoring\n        if 'ram' in self.monitors:\n            try:\n                ram_usage = self.monitors['ram'].get_usage()\n                ram_raw = self.monitors['ram'].get_usage(Raw=True)\n                results['ram_usage'] = f\"{ram_usage:.2f}%\"\n                results['ram_details'] = f\"{ram_raw[0]/(1024**3):.2f} GB / {ram_raw[1]/(1024**3):.2f} GB\"\n            except Exception as e:\n                results['ram_usage'] = f\"Error: {e}\"\n\n        # Disk monitoring\n        if 'disk' in self.monitors:\n            try:\n                disk_usage = self.monitors['disk'].get_usage()\n                results['disk_usage'] = f\"R: {disk_usage[0][1]:.2f} MB/s, W: {disk_usage[1][1]:.2f} MB/s\"\n            except Exception as e:\n                results['disk_usage'] = f\"Error: {e}\"\n\n        # Network monitoring\n        if 'network' in self.monitors:\n            try:\n                net_total = self.monitors['network'].get_usage(mode=0)\n                results['network_usage'] = f\"{net_total:.4f} MB/s total\"\n            except Exception as e:\n                results['network_usage'] = f\"Error: {e}\"\n\n        # GPU monitoring (Windows only)\n        if 'gpu' in self.monitors:\n            try:\n                gpu_usage = self.monitors['gpu'].get_usage()\n                gpu_avg = self.monitors['gpu'].get_average_usage()\n                gpu_max = self.monitors['gpu'].get_max_usage()\n                results['gpu_usage'] = f\"Total: {gpu_usage:.2f}%, Avg: {gpu_avg:.2f}%, Max: {gpu_max:.2f}%\"\n            except Exception as e:\n                results['gpu_usage'] = f\"Error: {e}\"\n\n        return results\n\n    def cleanup(self):\n        \"\"\"Cleanup temperature monitoring resources\"\"\"\n        if self.temp_manager and self.temp_initialized:\n            try:\n                self.temp_manager.Close()\n                print(\"Temperature monitoring cleaned up successfully\")\n            except Exception as e:\n                print(f\"Error during temperature monitoring cleanup: {e}\")\n\n    def __del__(self):\n        \"\"\"Ensure cleanup on object destruction\"\"\"\n        self.cleanup()\n\n# Usage example with corrected temperature monitoring\ndef comprehensive_system_report():\n    \"\"\"Generate a comprehensive system monitoring report\"\"\"\n    monitor = SafeSystemMonitor()\n\n    print(\"=== System Performance Monitor ===\")\n    print(\"Initializing monitors...\")\n\n    try:\n        # Performance data\n        print(\"\\n--- Performance Data ---\")\n        perf_data = monitor.get_performance_data()\n        for component, data in perf_data.items():\n            print(f\"{component.replace('_', ' ').title()}: {data}\")\n\n        # Temperature data (corrected approach)\n        print(\"\\n--- Temperature Data ---\")\n        temp_data = monitor.get_temperature_data()\n        for sensor, temp in temp_data.items():\n            print(f\"{sensor.replace('_', ' ').title()}: {temp}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nMonitoring interrupted by user\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n    finally:\n        monitor.cleanup()\n\n# Run the comprehensive report\nif __name__ == \"__main__\":\n    comprehensive_system_report()\n</code></pre>"},{"location":"LiveViewErrors/#2-temperature-manager-lifecycle-best-practices","title":"2. Temperature Manager Lifecycle Best Practices","text":"<pre><code>import sys\nimport atexit\n\nclass TemperatureMonitorManager:\n    \"\"\"Proper temperature monitor lifecycle management with corrected update patterns\"\"\"\n\n    def __init__(self):\n        self.temp_manager = None\n        self.monitors = {}\n        self.initialized = False\n\n        if sys.platform == \"win32\":\n            self._initialize_windows_monitoring()\n        elif sys.platform.startswith(\"linux\"):\n            self._initialize_linux_monitoring()\n\n    def _initialize_windows_monitoring(self):\n        \"\"\"Initialize Windows temperature monitoring with proper cleanup\"\"\"\n        from HardView.LiveView import PyManageTemp, PyTempCpu, PyTempGpu, PyTempOther, PySensor\n\n        try:\n            # Initialize the temperature manager\n            self.temp_manager = PyManageTemp()\n            self.temp_manager.Init()\n            self.initialized = True\n\n            # Register cleanup function\n            atexit.register(self._cleanup)\n\n            # Initialize individual monitors (without reinitializing hardware)\n            try:\n                self.monitors['cpu'] = PyTempCpu(init=False)\n            except Exception as e:\n                print(f\"CPU temperature monitor unavailable: {e}\")\n\n            try:\n                self.monitors['gpu'] = PyTempGpu(init=False)\n            except Exception as e:\n                print(f\"GPU temperature monitor unavailable: {e}\")\n\n            try:\n                self.monitors['other'] = PyTempOther(init=False)\n            except Exception as e:\n                print(f\"Other temperature monitors unavailable: {e}\")\n\n            try:\n                self.monitors['sensor'] = PySensor(init=False)\n            except Exception as e:\n                print(f\"Sensor monitor unavailable: {e}\")\n\n        except RuntimeError as e:\n            print(f\"Windows temperature monitoring initialization failed: {e}\")\n            self.initialized = False\n\n    def _initialize_linux_monitoring(self):\n        \"\"\"Initialize Linux temperature monitoring\"\"\"\n        from HardView.LiveView import PyLinuxSensor\n\n        try:\n            self.monitors['linux'] = PyLinuxSensor()\n            self.initialized = True\n        except Exception as e:\n            print(f\"Linux temperature monitoring initialization failed: {e}\")\n            self.initialized = False\n\n    def update_all_temperatures(self):\n        \"\"\"Update all temperature readings with corrected update pattern\"\"\"\n        if not self.initialized:\n            return {\"error\": \"Temperature monitoring not initialized\"}\n\n        results = {}\n\n        if sys.platform == \"win32\" and self.temp_manager:\n            try:\n                # Single global update - updates library data only\n                self.temp_manager.Update()\n\n                # Refresh all object properties with reget()\n                for monitor_name, monitor in self.monitors.items():\n                    try:\n                        monitor.reget()  # Fetch latest values from updated library\n                    except Exception as e:\n                        results[f'{monitor_name}_reget_error'] = str(e)\n\n                # Get temperature readings\n                if 'cpu' in self.monitors:\n                    try:\n                        cpu_monitor = self.monitors['cpu']\n                        temps = {\n                            'cpu_temp': cpu_monitor.get_temp(),\n                            'cpu_max_temp': cpu_monitor.get_max_temp(),\n                            'cpu_avg_temp': cpu_monitor.get_avg_temp(),\n                            'cpu_fan_rpm': cpu_monitor.get_fan_rpm()\n                        }\n\n                        for key, value in temps.items():\n                            if value == -99.0:\n                                results[key] = \"Library Shutdown Error\"\n                            elif value == -1:\n                                results[key] = \"Unavailable\"\n                            else:\n                                if 'rpm' in key:\n                                    results[key] = f\"{value:.0f} RPM\"\n                                else:\n                                    results[key] = f\"{value:.1f}\u00b0C\"\n                    except Exception as e:\n                        results['cpu_temp_error'] = str(e)\n\n                # Similar pattern for other monitors...\n                if 'gpu' in self.monitors:\n                    try:\n                        gpu_monitor = self.monitors['gpu']\n                        gpu_temp = gpu_monitor.get_temp()\n                        gpu_fan = gpu_monitor.get_fan_rpm()\n\n                        results['gpu_temp'] = (\n                            \"Library Shutdown Error\" if gpu_temp == -99.0 else\n                            \"Unavailable\" if gpu_temp == -1 else\n                            f\"{gpu_temp:.1f}\u00b0C\"\n                        )\n\n                        results['gpu_fan_rpm'] = (\n                            \"Library Shutdown Error\" if gpu_fan == -99.0 else\n                            \"Unavailable\" if gpu_fan == -1 else\n                            f\"{gpu_fan:.0f} RPM\"\n                        )\n                    except Exception as e:\n                        results['gpu_temp_error'] = str(e)\n\n            except Exception as e:\n                results['update_error'] = str(e)\n\n        elif sys.platform.startswith(\"linux\") and 'linux' in self.monitors:\n            try:\n                linux_sensor = self.monitors['linux']\n                linux_sensor.update()  # Linux sensors use different update pattern\n\n                temps = {\n                    'cpu_temp': linux_sensor.getCpuTemp(),\n                    'chipset_temp': linux_sensor.getChipsetTemp(),\n                    'motherboard_temp': linux_sensor.getMotherboardTemp(),\n                    'vrm_temp': linux_sensor.getVRMTemp(),\n                    'drive_temp': linux_sensor.getDriveTemp()\n                }\n\n                for key, value in temps.items():\n                    results[key] = \"Unavailable\" if value == -1.0 else f\"{value:.1f}\u00b0C\"\n\n                all_sensor_names = linux_sensor.getAllSensorNames()\n                results['total_sensors'] = len(all_sensor_names)\n\n            except Exception as e:\n                results['linux_sensor_error'] = str(e)\n\n        return results\n\n    def _cleanup(self):\n        \"\"\"Cleanup temperature monitoring resources\"\"\"\n        if self.temp_manager and self.initialized:\n            try:\n                self.temp_manager.Close()\n                print(\"Temperature monitoring cleaned up successfully\")\n            except Exception as e:\n                print(f\"Error during temperature monitoring cleanup: {e}\")\n\n    def __del__(self):\n        \"\"\"Ensure cleanup on object destruction\"\"\"\n        self._cleanup()\n\n# Usage example with corrected patterns\ndef temperature_monitoring_example():\n    \"\"\"Example of proper temperature monitoring with corrected lifecycle management\"\"\"\n\n    temp_manager = TemperatureMonitorManager()\n\n    if not temp_manager.initialized:\n        print(\"Temperature monitoring not available on this system\")\n        return\n\n    print(\"Temperature monitoring initialized successfully\")\n\n    try:\n        for i in range(5):  # Monitor for 5 cycles\n            print(f\"\\n--- Temperature Reading Cycle {i+1} ---\")\n\n            temps = temp_manager.update_all_temperatures()\n\n            for key, value in temps.items():\n                if 'error' in key:\n                    print(f\"Error in {key}: {value}\")\n                else:\n                    print(f\"{key}: {value}\")\n\n            import time\n            time.sleep(2)  # Wait 2 seconds between readings\n\n    except KeyboardInterrupt:\n        print(\"\\nTemperature monitoring interrupted by user\")\n\n    except Exception as e:\n        print(f\"Unexpected error during temperature monitoring: {e}\")\n\n    finally:\n        print(\"Temperature monitoring session ended\")\n\n# Run temperature monitoring example\nif __name__ == \"__main__\":\n    temperature_monitoring_example()\n</code></pre>"},{"location":"What/","title":"HardView API Guide","text":"<p>This document explains all functions in the HardView library, what they return, and how to use them from Python with example outputs.</p> <p>Note: To see all functions working together in practice, refer to the <code>TestAll.py</code> file included in the project.</p> <p>\u26a0\ufe0f Important Notice In versions prior to 3.0.3 of the PyPI package, functions ending with <code>_objects</code> require explicitly passing the parameter <code>False</code> to return Python <code>dict</code> objects. This is because, by default, those functions return JSON strings when the parameter is omitted (i.e., default is <code>True</code>).  </p> <p>This behavior has been fixed starting from version 3.0.3 of the PyPI package and API version 3.0.2, where the default behavior now correctly returns <code>dict</code> objects unless otherwise specified.</p> <p>\u26a0\ufe0f Warning: Functions that return JSON are strongly discouraged in versions 3.0.1+. It is recommended to replace them with <code>_objects</code> functions. Reason: Using these JSON-returning functions may cause issues when building JSON on many devices, especially Linux. Support and fixes for these functions have been permanently discontinued, including critical bug fixes.</p> <p>\ud83d\udcdd Note: All output examples here are for Windows. If you need Linux output examples, see the file LinuxOutput.md.</p>"},{"location":"What/#table-of-contents","title":"Table of Contents","text":"<ol> <li>BIOS Info</li> <li>System Info</li> <li>Baseboard Info</li> <li>Chassis Info</li> <li>CPU Info</li> <li>RAM Info</li> <li>Disk Drives Info</li> <li>Network Adapters Info</li> <li>Partitions Info</li> <li>SMART/Disk Info</li> <li>GPU Info</li> <li>Current Performance<ul> <li>CPU Usage</li> <li>RAM Usage</li> <li>System Performance</li> </ul> </li> <li>Performance Monitoring<ul> <li>CPU Monitoring</li> <li>RAM Monitoring</li> <li>System Performance Monitoring</li> </ul> </li> <li>General Notes</li> <li>Quick Test</li> </ol>"},{"location":"What/#1-bios-info","title":"1. BIOS Info","text":"<p>C Function: <code>get_bios_info(bool Json)</code></p>"},{"location":"What/#python-functions","title":"Python Functions:","text":"<ul> <li><code>HardView.get_bios_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_bios_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description","title":"Description:","text":"<p>Retrieves BIOS information such as vendor, version, and release date.</p>"},{"location":"What/#usage-json","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nbios_json_str = HardView.get_bios_info(True)  # Or HardView.get_bios_info()\nbios_data = json.loads(bios_json_str)\nprint(bios_data)\n</code></pre>"},{"location":"What/#example-json-output","title":"Example JSON Output:","text":"<pre><code>{\n    \"manufacturer\": \"ACME Corp.\",\n    \"version\": \"1.0.0.1\",\n    \"release_date\": \"20230101000000.000000+000\"\n}\n</code></pre>"},{"location":"What/#usage-python-object","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nbios_obj = HardView.get_bios_info_objects(False)  # Or HardView.get_bios_info_objects()\nprint(bios_obj)\n</code></pre>"},{"location":"What/#example-python-object-output","title":"Example Python Object Output:","text":"<pre><code>{\n    'manufacturer': 'ACME Corp.',\n    'version': '1.0.0.1',\n    'release_date': '20230101000000.000000+000'\n}\n</code></pre>"},{"location":"What/#properties-json-keys","title":"Properties / JSON Keys:","text":"<ul> <li>manufacturer (string): The name of the BIOS manufacturer</li> <li>version (string): The BIOS version</li> <li>release_date (string): The BIOS release date</li> </ul>"},{"location":"What/#2-system-info","title":"2. System Info","text":"<p>C Function: <code>get_system_info(bool Json)</code></p>"},{"location":"What/#python-functions_1","title":"Python Functions:","text":"<ul> <li><code>HardView.get_system_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_system_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_1","title":"Description:","text":"<p>Retrieves system information such as manufacturer, product name, UUID, and serial number.</p>"},{"location":"What/#usage-json_1","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nsystem_json_str = HardView.get_system_info(True)  # Or HardView.get_system_info()\nsystem_data = json.loads(system_json_str)\nprint(system_data)\n</code></pre>"},{"location":"What/#example-json-output_1","title":"Example JSON Output:","text":"<pre><code>{\n    \"manufacturer\": \"ExampleTech\",\n    \"product_name\": \"ProSystem X1\",\n    \"uuid\": \"A1B2C3D4-E5F6-7890-1234-567890ABCDEF\",\n    \"serial_number\": \"SN1234567890\"\n}\n</code></pre>"},{"location":"What/#usage-python-object_1","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nsystem_obj = HardView.get_system_info_objects(False)  # Or HardView.get_system_info_objects()\nprint(system_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_1","title":"Example Python Object Output:","text":"<pre><code>{\n    'manufacturer': 'ExampleTech',\n    'product_name': 'ProSystem X1',\n    'uuid': 'A1B2C3D4-E5F6-7890-1234-567890ABCDEF',\n    'serial_number': 'SN1234567890'\n}\n</code></pre>"},{"location":"What/#properties-json-keys_1","title":"Properties / JSON Keys:","text":"<ul> <li>manufacturer (string): The system manufacturer's name</li> <li>product_name (string): The system product name</li> <li>uuid (string): The system's UUID</li> <li>serial_number (string): The system's serial number</li> </ul>"},{"location":"What/#3-baseboard-info","title":"3. Baseboard Info","text":"<p>C Function: <code>get_baseboard_info(bool Json)</code></p>"},{"location":"What/#python-functions_2","title":"Python Functions:","text":"<ul> <li><code>HardView.get_baseboard_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_baseboard_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_2","title":"Description:","text":"<p>Retrieves motherboard information such as manufacturer, product, serial number, and version.</p>"},{"location":"What/#usage-json_2","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nbaseboard_json_str = HardView.get_baseboard_info(True)  # Or HardView.get_baseboard_info()\nbaseboard_data = json.loads(baseboard_json_str)\nprint(baseboard_data)\n</code></pre>"},{"location":"What/#example-json-output_2","title":"Example JSON Output:","text":"<pre><code>{\n    \"manufacturer\": \"MegaBoard Inc.\",\n    \"product\": \"MB-Z999\",\n    \"serial_number\": \"MB1234567890XYZ\",\n    \"version\": \"1.0\"\n}\n</code></pre>"},{"location":"What/#usage-python-object_2","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nbaseboard_obj = HardView.get_baseboard_info_objects(False)  # Or HardView.get_baseboard_info_objects()\nprint(baseboard_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_2","title":"Example Python Object Output:","text":"<pre><code>{\n    'manufacturer': 'MegaBoard Inc.',\n    'product': 'MB-Z999',\n    'serial_number': 'MB1234567890XYZ',\n    'version': '1.0'\n}\n</code></pre>"},{"location":"What/#properties-json-keys_2","title":"Properties / JSON Keys:","text":"<ul> <li>manufacturer (string): The motherboard manufacturer's name</li> <li>product (string): The motherboard product name</li> <li>serial_number (string): The motherboard serial number</li> <li>version (string): The motherboard version</li> </ul>"},{"location":"What/#4-chassis-info","title":"4. Chassis Info","text":"<p>C Function: <code>get_chassis_info(bool Json)</code></p>"},{"location":"What/#python-functions_3","title":"Python Functions:","text":"<ul> <li><code>HardView.get_chassis_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_chassis_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_3","title":"Description:","text":"<p>Retrieves computer chassis/case information such as manufacturer, model, serial number, and type.</p>"},{"location":"What/#usage-json_3","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nchassis_json_str = HardView.get_chassis_info(True)  # Or HardView.get_chassis_info()\nchassis_data = json.loads(chassis_json_str)\nprint(chassis_data)\n</code></pre>"},{"location":"What/#example-json-output_3","title":"Example JSON Output:","text":"<pre><code>{\n    \"manufacturer\": \"CaseWorks\",\n    \"model\": \"TowerMax 5000\",\n    \"serial_number\": \"CHAS987654321\",\n    \"chassis_type\": \"Tower\"\n}\n</code></pre>"},{"location":"What/#usage-python-object_3","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nchassis_obj = HardView.get_chassis_info_objects(False)  # Or HardView.get_chassis_info_objects()\nprint(chassis_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_3","title":"Example Python Object Output:","text":"<pre><code>{\n    'manufacturer': 'CaseWorks',\n    'model': 'TowerMax 5000',\n    'serial_number': 'CHAS987654321',\n    'chassis_type': 'Tower'\n}\n</code></pre>"},{"location":"What/#properties-json-keys_3","title":"Properties / JSON Keys:","text":"<ul> <li>manufacturer (string): The chassis manufacturer's name</li> <li>model (string): The chassis model</li> <li>serial_number (string): The chassis serial number</li> <li>chassis_type (string): The type of chassis (e.g., \"Tower\", \"Laptop\")</li> </ul>"},{"location":"What/#5-cpu-info","title":"5. CPU Info","text":"<p>C Function: <code>get_cpu_info(bool Json)</code></p>"},{"location":"What/#python-functions_4","title":"Python Functions:","text":"<ul> <li><code>HardView.get_cpu_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_cpu_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_4","title":"Description:","text":"<p>Retrieves processor details such as name, manufacturer, architecture, number of cores, number of threads, max clock speed, and socket designation.</p>"},{"location":"What/#usage-json_4","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ncpu_json_str = HardView.get_cpu_info(True)  # Or HardView.get_cpu_info()\ncpu_data = json.loads(cpu_json_str)\nprint(cpu_data)\n</code></pre>"},{"location":"What/#example-json-output_4","title":"Example JSON Output:","text":"<pre><code>{\n    \"name\": \"Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz\",\n    \"manufacturer\": \"GenuineIntel\",\n    \"architecture\": \"9\", // 9 = \u00d764\n    \"cores\": 8,\n    \"threads\": 8,\n    \"max_clock_speed\": 4900,\n    \"socket_designation\": \"LGA1151\"\n}\n</code></pre>"},{"location":"What/#usage-python-object_4","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ncpu_obj = HardView.get_cpu_info_objects(False)  # Or HardView.get_cpu_info_objects()\nprint(cpu_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_4","title":"Example Python Object Output:","text":"<pre><code>{\n    'name': 'Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz',\n    'manufacturer': 'GenuineIntel',\n    'architecture': '9',\n    'cores': 8,\n    'threads': 8,\n    'max_clock_speed': 4900.0,\n    'socket_designation': 'LGA1151'\n}\n</code></pre>"},{"location":"What/#properties-json-keys_4","title":"Properties / JSON Keys:","text":"<ul> <li>name (string): The CPU name</li> <li>manufacturer (string): The CPU manufacturer</li> <li>architecture (string): The CPU architecture</li> <li>cores (integer): The number of physical cores</li> <li>threads (integer): The number of logical threads</li> <li>max_clock_speed (float): The maximum clock speed of the CPU in MHz</li> <li>socket_designation (string): The CPU socket designation   ### Architecture Property Return Values Table</li> </ul> <p>This table lists the possible return values of the <code>Architecture</code> property from the WMI class <code>Win32_Processor</code> and their corresponding processor architecture types.</p> Value Architecture Type 0 x86 (32-bit) 1 MIPS 2 Alpha 3 PowerPC 5 ARM 6 Itanium 9 x64 (64-bit) 12 ARM64"},{"location":"What/#6-ram-info","title":"6. RAM Info","text":"<p>C Function: <code>get_ram_info(bool Json)</code></p>"},{"location":"What/#python-functions_5","title":"Python Functions:","text":"<ul> <li><code>HardView.get_ram_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_ram_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_5","title":"Description:","text":"<p>Retrieves total physical memory and details of individual memory modules.</p>"},{"location":"What/#usage-json_5","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nram_json_str = HardView.get_ram_info(True)  # Or HardView.get_ram_info()\nram_data = json.loads(ram_json_str)\nprint(ram_data)\n</code></pre>"},{"location":"What/#example-json-output_5","title":"Example JSON Output:","text":"<pre><code>{\n    \"total_physical_memory_bytes\": 17179869184,\n    \"memory_modules\": [\n        {\n            \"capacity_bytes\": 8589934592,\n            \"speed_mhz\": 3200,\n            \"manufacturer\": \"Kingston\",\n            \"serial_number\": \"ABCDEF12\",\n            \"part_number\": \"KF432C16BB/8\"\n        },\n        {\n            \"capacity_bytes\": 8589934592,\n            \"speed_mhz\": 3200,\n            \"manufacturer\": \"Kingston\",\n            \"serial_number\": \"GHIJKL34\",\n            \"part_number\": \"KF432C16BB/8\"\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_5","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nram_obj = HardView.get_ram_info_objects(False)  # Or HardView.get_ram_info_objects()\nprint(ram_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_5","title":"Example Python Object Output:","text":"<pre><code>{\n    'total_physical_memory_bytes': 17179869184,\n    'memory_modules': [\n        {\n            'capacity_bytes': 8589934592,\n            'speed_mhz': 3200,\n            'manufacturer': 'Kingston',\n            'serial_number': 'ABCDEF12',\n            'part_number': 'KF432C16BB/8'\n        },\n        {\n            'capacity_bytes': 8589934592,\n            'speed_mhz': 3200,\n            'manufacturer': 'Kingston',\n            'serial_number': 'GHIJKL34',\n            'part_number': 'KF432C16BB/8'\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#properties-json-keys_5","title":"Properties / JSON Keys:","text":"<ul> <li>total_physical_memory_bytes (integer): Total physical memory size in bytes</li> <li>memory_modules (list): A list of individual memory modules, each containing:<ul> <li>capacity_bytes (integer): Module capacity in bytes</li> <li>speed_mhz (integer): Module speed in MHz</li> <li>manufacturer (string): Module manufacturer</li> <li>serial_number (string): Module serial number</li> <li>part_number (string): Module part number</li> </ul> </li> </ul>"},{"location":"What/#7-disk-drives-info","title":"7. Disk Drives Info","text":"<p>C Function: <code>get_disk_info(bool Json)</code></p>"},{"location":"What/#python-functions_6","title":"Python Functions:","text":"<ul> <li><code>HardView.get_disk_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_disk_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_6","title":"Description:","text":"<p>Retrieves information about installed disk drives, including model, manufacturer, interface type, size, serial number, and media type.</p>"},{"location":"What/#usage-json_6","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ndisk_json_str = HardView.get_disk_info(True)  # Or HardView.get_disk_info()\ndisk_data = json.loads(disk_json_str)\nprint(disk_data)\n</code></pre>"},{"location":"What/#example-json-output_6","title":"Example JSON Output:","text":"<pre><code>{\n    \"disks\": [\n        {\n            \"model\": \"NVMe SSD 1TB\",\n            \"manufacturer\": \"SSDCorp\",\n            \"interface_type\": \"NVMe\",\n            \"size\": 1000204886016,\n            \"serial_number\": \"SSD123456789\",\n            \"media_type\": \"Solid State Drive\"\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_6","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ndisk_obj = HardView.get_disk_info_objects(False)  # Or HardView.get_disk_info_objects()\nprint(disk_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_6","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'model': 'NVMe SSD 1TB',\n        'manufacturer': 'SSDCorp',\n        'interface_type': 'NVMe',\n        'size': 1000204886016,\n        'serial_number': 'SSD123456789',\n        'media_type': 'Solid State Drive'\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-disk","title":"Properties / JSON Keys (for each disk):","text":"<ul> <li>model (string): The disk model</li> <li>manufacturer (string): The disk manufacturer</li> <li>interface_type (string): The disk interface type (e.g., \"IDE\", \"SCSI\", \"SATA\", \"NVMe\")</li> <li>size (integer): The disk size in bytes</li> <li>serial_number (string): The disk serial number</li> <li>media_type (string): The disk media type (e.g., \"Fixed hard disk media\", \"Solid State Drive\")</li> </ul>"},{"location":"What/#8-network-adapters-info","title":"8. Network Adapters Info","text":"<p>C Function: <code>get_network_info(bool Json)</code></p>"},{"location":"What/#python-functions_7","title":"Python Functions:","text":"<ul> <li><code>HardView.get_network_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_network_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_7","title":"Description:","text":"<p>Retrieves information about network adapters, including description, MAC address, IP addresses (IPv4 and IPv6), and DNS hostname.</p>"},{"location":"What/#usage-json_7","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nnet_json_str = HardView.get_network_info(True)  # Or HardView.get_network_info()\nnet_data = json.loads(net_json_str)\nprint(net_data)\n</code></pre>"},{"location":"What/#example-json-output_7","title":"Example JSON Output:","text":"<pre><code>{\n    \"network_adapters\": [\n        {\n            \"description\": \"Gigabit Ethernet Adapter\",\n            \"mac_address\": \"00:1A:2B:3C:4D:5E\",\n            \"ip_addresses\": [\n                \"192.168.1.100\",\n                \"fe80::1234:5678:9abc:def0\"\n            ],\n            \"dns_host_name\": \"MY-PC-NAME\"\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_7","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nnet_obj = HardView.get_network_info_objects(False)  # Or HardView.get_network_info_objects()\nprint(net_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_7","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'description': 'Gigabit Ethernet Adapter',\n        'mac_address': '00:1A:2B:3C:4D:5E',\n        'ip_addresses': ['192.168.1.100', 'fe80::1234:5678:9abc:def0'],\n        'dns_host_name': 'MY-PC-NAME'\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-adapter","title":"Properties / JSON Keys (for each adapter):","text":"<ul> <li>description (string): The adapter description</li> <li>mac_address (string): The adapter's MAC address</li> <li>ip_addresses (list): A list of IP addresses (IPv4 and IPv6) assigned to the adapter</li> <li>dns_host_name (string): The DNS hostname associated with the adapter</li> </ul>"},{"location":"What/#9-partitions-info-advanced-storage","title":"9. Partitions Info (Advanced Storage)","text":"<p>C Function: <code>get_partitions_info(bool Json)</code></p>"},{"location":"What/#python-functions_8","title":"Python Functions:","text":"<ul> <li><code>HardView.get_partitions_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_partitions_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_8","title":"Description:","text":"<p>Retrieves detailed information about disk partitions, including disk model, serial number, interface type, disk size, media type, partition device ID, partition type, partition size, and partition index.</p>"},{"location":"What/#usage-json_8","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nparts_json_str = HardView.get_partitions_info(True)  # Or HardView.get_partitions_info()\nparts_data = json.loads(parts_json_str)\nprint(parts_data)\n</code></pre>"},{"location":"What/#example-json-output_8","title":"Example JSON Output:","text":"<pre><code>{\n    \"partitions\": [\n        {\n            \"disk_model\": \"NVMe SSD 1TB\",\n            \"disk_serial\": \"SSD123456789\",\n            \"disk_interface\": \"NVMe\",\n            \"disk_size\": 1000204886016,\n            \"disk_media\": \"Solid State Drive\",\n            \"partition_device_id\": \"Disk #0, Partition #0\",\n            \"partition_type\": \"NTFS\",\n            \"partition_size\": 500000000000,\n            \"partition_index\": 0\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_8","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nparts_obj = HardView.get_partitions_info_objects(False)  # Or HardView.get_partitions_info_objects()\nprint(parts_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_8","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'disk_model': 'NVMe SSD 1TB',\n        'disk_serial': 'SSD123456789',\n        'disk_interface': 'NVMe',\n        'disk_size': 1000204886016,\n        'disk_media': 'Solid State Drive',\n        'partition_device_id': 'Disk #0, Partition #0',\n        'partition_type': 'NTFS',\n        'partition_size': 500000000000,\n        'partition_index': 0\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-partition","title":"Properties / JSON Keys (for each partition):","text":"<ul> <li>disk_model (string): The model of the disk the partition belongs to</li> <li>disk_serial (string): The serial number of the disk the partition belongs to</li> <li>disk_interface (string): The interface type of the disk</li> <li>disk_size (integer): The total size of the disk in bytes</li> <li>disk_media (string): The media type of the disk</li> <li>partition_device_id (string): The device ID of the partition</li> <li>partition_type (string): The file system type of the partition</li> <li>partition_size (integer): The size of the partition in bytes</li> <li>partition_index (integer): The index of the partition on the disk</li> </ul>"},{"location":"What/#10-smartdisk-info-advanced","title":"10. SMART/Disk Info (Advanced)","text":"<p>C Function: <code>get_smart_info(bool Json)</code></p>"},{"location":"What/#python-functions_9","title":"Python Functions:","text":"<ul> <li><code>HardView.get_smart_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_smart_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_9","title":"Description:","text":"<p>Retrieves detailed disk drive information, including SMART status, device IDs, firmware revision, and sector/track information.</p>"},{"location":"What/#usage-json_9","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nsmart_json_str = HardView.get_smart_info(True)  # Or HardView.get_smart_info()\nsmart_data = json.loads(smart_json_str)\nprint(smart_data)\n</code></pre>"},{"location":"What/#example-json-output_9","title":"Example JSON Output:","text":"<pre><code>{\n    \"disks\": [\n        {\n            \"model\": \"NVMe SSD 1TB\",\n            \"serial_number\": \"SSD123456789\",\n            \"interface_type\": \"NVMe\",\n            \"size\": \"1000204886016\",\n            \"partitions\": 2,\n            \"manufacturer\": \"SSDCorp\",\n            \"media_type\": \"Solid State Drive\",\n            \"status\": \"OK\",\n            \"device_id\": \"\\\\.\\PHYSICALDRIVE0\",\n            \"caption\": \"NVMe SSD 1TB\",\n            \"firmware_revision\": \"FW1.0\",\n            \"pnp_device_id\": \"NVME\\\\SSD&amp;VEN_1234&amp;PROD_5678\\\\1&amp;234567&amp;0&amp;000000\",\n            \"sectors_per_track\": 63,\n            \"total_cylinders\": 0,\n            \"total_heads\": 255,\n            \"total_sectors\": 0,\n            \"total_tracks\": 0,\n            \"tracks_per_cylinder\": 255,\n            \"bytes_per_sector\": 512,\n            \"index\": 0,\n            \"signature\": 1234567890\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_9","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nsmart_obj = HardView.get_smart_info_objects(False)  # Or HardView.get_smart_info_objects()\nprint(smart_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_9","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'model': 'NVMe SSD 1TB',\n        'serial_number': 'SSD123456789',\n        'interface_type': 'NVMe',\n        'size': '1000204886016',\n        'partitions': 2,\n        'manufacturer': 'SSDCorp',\n        'media_type': 'Solid State Drive',\n        'status': 'OK',\n        'device_id': '\\\\. 0HYSICALDRIVE0',\n        'caption': 'NVMe SSD 1TB',\n        'firmware_revision': 'FW1.0',\n        'pnp_device_id': 'NVME\\\\SSD&amp;VEN_1234&amp;PROD_5678\\\\1&amp;234567&amp;0&amp;000000',\n        'sectors_per_track': 63,\n        'total_cylinders': 0,\n        'total_heads': 255,\n        'total_sectors': 0,\n        'total_tracks': 0,\n        'tracks_per_cylinder': 255,\n        'bytes_per_sector': 512,\n        'index': 0,\n        'signature': 1234567890\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-disk_1","title":"Properties / JSON Keys (for each disk):","text":"<ul> <li>model (string): The disk model</li> <li>serial_number (string): The disk serial number</li> <li>interface_type (string): The disk interface type</li> <li>size (string): The disk size in bytes</li> <li>partitions (integer): The number of partitions on the disk</li> <li>manufacturer (string): The disk manufacturer</li> <li>media_type (string): The disk media type</li> <li>status (string): The disk status (e.g., \"OK\")</li> <li>device_id (string): The device ID of the disk</li> <li>caption (string): A description of the disk</li> <li>firmware_revision (string): The firmware revision of the disk</li> <li>pnp_device_id (string): The PnP device ID</li> <li>sectors_per_track (integer): The number of sectors per track</li> <li>total_cylinders (integer): The total number of cylinders</li> <li>total_heads (integer): The total number of heads</li> <li>total_sectors (integer): The total number of sectors</li> <li>total_tracks (integer): The total number of tracks</li> <li>tracks_per_cylinder (integer): The number of tracks per cylinder</li> <li>bytes_per_sector (integer): The number of bytes per sector</li> <li>index (integer): The disk index</li> <li>signature (integer): The disk signature</li> </ul>"},{"location":"What/#11-gpu-info","title":"11. GPU Info","text":"<p>C Function: <code>get_gpu_info(bool Json)</code></p>"},{"location":"What/#python-functions_10","title":"Python Functions:","text":"<ul> <li><code>HardView.get_gpu_info(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_gpu_info_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_10","title":"Description:","text":"<p>Retrieves GPU details such as name, manufacturer, driver version, memory size, video processor, and video mode description.</p>"},{"location":"What/#usage-json_10","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ngpu_json_str = HardView.get_gpu_info(True)  # Or HardView.get_gpu_info()\ngpu_data = json.loads(gpu_json_str)\nprint(gpu_data)\n</code></pre>"},{"location":"What/#example-json-output_10","title":"Example JSON Output:","text":"<pre><code>{\n    \"gpus\": [\n        {\n            \"name\": \"NVIDIA GeForce RTX 3080\",\n            \"manufacturer\": \"NVIDIA\",\n            \"driver_version\": \"536.99\",\n            \"memory_size\": 10737418240,\n            \"video_processor\": \"GeForce RTX 3080\",\n            \"video_mode_description\": \"2560 x 1440 x 16777216 colors\"\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_10","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ngpu_obj = HardView.get_gpu_info_objects(False)  # Or HardView.get_gpu_info_objects()\nprint(gpu_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_10","title":"Example Python Object Output:","text":"<pre><code>[\n    {\n        'name': 'NVIDIA GeForce RTX 3080',\n        'manufacturer': 'NVIDIA',\n        'driver_version': '536.99',\n        'memory_size': 10737418240,\n        'video_processor': 'GeForce RTX 3080',\n        'video_mode_description': '2560 x 1440 x 16777216 colors'\n    }\n]\n</code></pre>"},{"location":"What/#properties-json-keys-for-each-gpu","title":"Properties / JSON Keys (for each GPU):","text":"<ul> <li>name (string): The GPU name</li> <li>manufacturer (string): The GPU manufacturer</li> <li>driver_version (string): The GPU driver version</li> <li>memory_size (integer): The GPU memory size in bytes</li> <li>video_processor (string): The video processor</li> <li>video_mode_description (string): The current video mode description</li> </ul>"},{"location":"What/#12-current-performance","title":"12. Current Performance","text":""},{"location":"What/#a-cpu-usage","title":"a. CPU Usage","text":"<p>C Function: <code>get_cpu_usage(bool Json)</code></p>"},{"location":"What/#python-functions_11","title":"Python Functions:","text":"<ul> <li><code>HardView.get_cpu_usage(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_cpu_usage_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_11","title":"Description:","text":"<p>Retrieves current CPU usage percentage.</p>"},{"location":"What/#usage-json_11","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ncpu_usage_json_str = HardView.get_cpu_usage(True)  # Or HardView.get_cpu_usage()\ncpu_usage_data = json.loads(cpu_usage_json_str)\nprint(cpu_usage_data)\n</code></pre>"},{"location":"What/#example-json-output_11","title":"Example JSON Output:","text":"<pre><code>{\n    \"cpu_usage\": [\n        {\n            \"load_percentage\": 15\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#usage-python-object_11","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ncpu_usage_obj = HardView.get_cpu_usage_objects(False)  # Or HardView.get_cpu_usage_objects()\nprint(cpu_usage_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_11","title":"Example Python Object Output:","text":"<pre><code>{\n    'cpu_usage': [\n        {\n            'load_percentage': 15\n        }\n    ]\n}\n</code></pre>"},{"location":"What/#properties-json-keys_6","title":"Properties / JSON Keys:","text":"<ul> <li>cpu_usage (list): Contains:<ul> <li>load_percentage (integer): The CPU load percentage</li> </ul> </li> </ul>"},{"location":"What/#b-ram-usage","title":"b. RAM Usage","text":"<p>C Function: <code>get_ram_usage(bool Json)</code></p>"},{"location":"What/#python-functions_12","title":"Python Functions:","text":"<ul> <li><code>HardView.get_ram_usage(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_ram_usage_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_12","title":"Description:","text":"<p>Retrieves current RAM usage statistics (total, available, used, usage percentage).</p>"},{"location":"What/#usage-json_12","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nram_usage_json_str = HardView.get_ram_usage(True)  # Or HardView.get_ram_usage()\nram_usage_data = json.loads(ram_usage_json_str)\nprint(ram_usage_data)\n</code></pre>"},{"location":"What/#example-json-output_12","title":"Example JSON Output:","text":"<pre><code>{\n    \"ram_usage\": {\n        \"total_memory_kb\": 16777216,\n        \"free_memory_kb\": 8388608,\n        \"used_memory_kb\": 8388608,\n        \"usage_percent\": 50.0\n    }\n}\n</code></pre>"},{"location":"What/#usage-python-object_12","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nram_usage_obj = HardView.get_ram_usage_objects(False)  # Or HardView.get_ram_usage_objects()\nprint(ram_usage_obj)\n</code></pre>"},{"location":"What/#example-python-object-output_12","title":"Example Python Object Output:","text":"<pre><code>{\n    'ram_usage': {\n        'total_memory_kb': 16777216,\n        'free_memory_kb': 8388608,\n        'used_memory_kb': 8388608,\n        'usage_percent': 50.0\n    }\n}\n</code></pre>"},{"location":"What/#properties-json-keys_7","title":"Properties / JSON Keys:","text":"<ul> <li>ram_usage (dict): Contains:<ul> <li>total_memory_kb (integer): Total memory in KB</li> <li>free_memory_kb (integer): Free memory in KB</li> <li>used_memory_kb (integer): Used memory in KB</li> <li>usage_percent (float): Memory usage percentage</li> </ul> </li> </ul>"},{"location":"What/#c-system-performance","title":"c. System Performance","text":"<p>C Function: <code>get_system_performance(bool Json)</code></p>"},{"location":"What/#python-functions_13","title":"Python Functions:","text":"<ul> <li><code>HardView.get_system_performance(Json=True)</code>: Returns a JSON string</li> <li><code>HardView.get_system_performance_objects(Json=False)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_13","title":"Description:","text":"<p>Retrieves combined CPU and RAM usage.</p>"},{"location":"What/#usage-json_13","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nperf_json_str = HardView.get_system_performance(True)  # Or HardView.get_system_performance()\nperf_data = json.loads(perf_json_str)\nprint(perf_data)\n</code></pre>"},{"location":"What/#example-json-output_13","title":"Example JSON Output:","text":"<pre><code>{\n    \"system_performance\": {\n        \"cpu\": {\n            \"cpu_usage\": [\n                {\n                    \"load_percentage\": 20\n                }\n            ]\n        },\n        \"ram\": {\n            \"ram_usage\": {\n                \"total_memory_kb\": 16777216,\n                \"free_memory_kb\": 8000000,\n                \"used_memory_kb\": 8777216,\n                \"usage_percent\": 52.31\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"What/#example-python-object-output_13","title":"Example Python Object Output:","text":"<pre><code>{\n    'system_performance': {\n        'cpu': [\n            {\n                'load_percentage': 20\n            }\n        ],\n        'ram': {\n            'total_memory_kb': 16777216,\n            'free_memory_kb': 8000000,\n            'used_memory_kb': 8777216,\n            'usage_percent': 52.31\n        }\n    }\n}\n</code></pre>"},{"location":"What/#properties-json-keys_8","title":"Properties / JSON Keys:","text":"<ul> <li> <p>system_performance (dict): Contains:</p> <ul> <li>cpu (list): CPU usage info (same as in CPU Usage)</li> <li>ram (dict): RAM usage info (same as in RAM Usage)</li> </ul> </li> </ul>"},{"location":"What/#13-performance-monitoring","title":"13. Performance Monitoring","text":""},{"location":"What/#a-cpu-monitoring","title":"a. CPU Monitoring","text":"<p>C Function: <code>monitor_cpu_usage_duration(int duration_seconds, int interval_ms)</code></p>"},{"location":"What/#python-functions_14","title":"Python Functions:","text":"<ul> <li><code>HardView.monitor_cpu_usage_duration(duration_sec, interval_ms)</code>: Returns a JSON string</li> <li><code>HardView.monitor_cpu_usage_duration_objects(duration_sec, interval_ms)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_14","title":"Description:","text":"<p>Monitors CPU usage over a specified time period.</p>"},{"location":"What/#usage-json_14","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\ncpu_monitor_json_str = HardView.monitor_cpu_usage_duration(5, 1000)\ncpu_monitor_data = json.loads(cpu_monitor_json_str)\nprint(cpu_monitor_data)\n</code></pre>"},{"location":"What/#example-json-output_14","title":"Example JSON Output:","text":"<pre><code>{\n    \"cpu_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            { \"cpu_usage\": [ { \"load_percentage\": 25 } ] },\n            { \"cpu_usage\": [ { \"load_percentage\": 30 } ] },\n            { \"cpu_usage\": [ { \"load_percentage\": 28 } ] }\n        ]\n    }\n}\n</code></pre>"},{"location":"What/#usage-python-object_13","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\ncpu_monitor_obj = HardView.monitor_cpu_usage_duration_objects(5, 1000)\nprint(cpu_monitor_obj)\n</code></pre>"},{"location":"What/#properties-json-keys_9","title":"Properties / JSON Keys:","text":"<ul> <li> <p>cpu_monitoring (dict): Contains:</p> <ul> <li>duration_seconds (int)</li> <li>interval_ms (int)</li> <li>readings (list): List of CPU usage readings</li> </ul> </li> </ul>"},{"location":"What/#b-ram-monitoring","title":"b. RAM Monitoring","text":"<p>C Function: <code>monitor_ram_usage_duration(int duration_seconds, int interval_ms)</code></p>"},{"location":"What/#python-functions_15","title":"Python Functions:","text":"<ul> <li><code>HardView.monitor_ram_usage_duration(duration_sec, interval_ms)</code>: Returns a JSON string</li> <li><code>HardView.monitor_ram_usage_duration_objects(duration_sec, interval_ms)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_15","title":"Description:","text":"<p>Monitors RAM usage over a specified time period.</p>"},{"location":"What/#usage-json_15","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nram_monitor_json_str = HardView.monitor_ram_usage_duration(5, 1000)\nram_monitor_data = json.loads(ram_monitor_json_str)\nprint(ram_monitor_data)\n</code></pre>"},{"location":"What/#example-json-output_15","title":"Example JSON Output:","text":"<pre><code>{\n    \"ram_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            { \"ram_usage\": { \"total_memory_kb\": 16777216, \"free_memory_kb\": 8300000, \"used_memory_kb\": 8477216, \"usage_percent\": 50.53 } },\n            { \"ram_usage\": { \"total_memory_kb\": 16777216, \"free_memory_kb\": 8250000, \"used_memory_kb\": 8527216, \"usage_percent\": 50.82 } }\n        ]\n    }\n}\n</code></pre>"},{"location":"What/#usage-python-object_14","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nram_monitor_obj = HardView.monitor_ram_usage_duration_objects(5, 1000)\nprint(ram_monitor_obj)\n</code></pre>"},{"location":"What/#properties-json-keys_10","title":"Properties / JSON Keys:","text":"<ul> <li> <p>ram_monitoring (dict): Contains:</p> <ul> <li>duration_seconds (int)</li> <li>interval_ms (int)</li> <li>readings (list): RAM usage snapshots</li> </ul> </li> </ul>"},{"location":"What/#c-system-performance-monitoring","title":"c. System Performance Monitoring","text":"<p>C Function: <code>monitor_system_performance_duration(int duration_seconds, int interval_ms)</code></p>"},{"location":"What/#python-functions_16","title":"Python Functions:","text":"<ul> <li><code>HardView.monitor_system_performance_duration(duration_sec, interval_ms)</code>: Returns a JSON string</li> <li><code>HardView.monitor_system_performance_duration_objects(duration_sec, interval_ms)</code>: Returns a Python object</li> </ul>"},{"location":"What/#description_16","title":"Description:","text":"<p>Monitors CPU and RAM usage together over a given duration.</p>"},{"location":"What/#usage-json_16","title":"Usage (JSON):","text":"<pre><code>import HardView\nimport json\n\nsystem_monitor_json_str = HardView.monitor_system_performance_duration(5, 1000)\nsystem_monitor_data = json.loads(system_monitor_json_str)\nprint(system_monitor_data)\n</code></pre>"},{"location":"What/#example-json-output_16","title":"Example JSON Output:","text":"<pre><code>{\n    \"system_performance_monitoring\": {\n        \"duration_seconds\": 5,\n        \"interval_ms\": 1000,\n        \"readings\": [\n            {\n                \"system_performance\": {\n                    \"cpu\": { \"cpu_usage\": [ { \"load_percentage\": 20 } ] },\n                    \"ram\": { \"ram_usage\": { \"total_memory_kb\": 16777216, \"free_memory_kb\": 8100000, \"used_memory_kb\": 8677216, \"usage_percent\": 51.72 } }\n                }\n            },\n            {\n                \"system_performance\": {\n                    \"cpu\": { \"cpu_usage\": [ { \"load_percentage\": 22 } ] },\n                    \"ram\": { \"ram_usage\": { \"total_memory_kb\": 16777216, \"free_memory_kb\": 8050000, \"used_memory_kb\": 8727216, \"usage_percent\": 52.02 } }\n                }\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"What/#usage-python-object_15","title":"Usage (Python Object):","text":"<pre><code>import HardView\n\nsystem_monitor_obj = HardView.monitor_system_performance_duration_objects(5, 1000)\nprint(system_monitor_obj)\n</code></pre>"},{"location":"What/#properties-json-keys_11","title":"Properties / JSON Keys:","text":"<ul> <li> <p>system_performance_monitoring (dict): Contains:</p> <ul> <li>duration_seconds (int)</li> <li>interval_ms (int)</li> <li>readings (list): CPU and RAM readings over time</li> </ul> </li> </ul>"},{"location":"What/#general-notes","title":"General Notes","text":"<ul> <li> <p>Dual Output Mode:</p> <ul> <li>Functions can return JSON strings or Python objects</li> <li>JSON mode: <code>HardView.func(True)</code></li> <li>Object mode: <code>HardView.func_objects(False)</code></li> </ul> </li> <li> <p>Errors:</p> <ul> <li>In case of failure, functions may return: <code>{ \"error\": \"...\" }</code></li> </ul> </li> <li> <p>Performance:</p> <ul> <li>Most functions run under 0.1s on typical systems</li> </ul> </li> </ul>"},{"location":"What/#quick-test","title":"Quick Test","text":"<p>To test all HardView functions, you can use one of the following options:</p>"},{"location":"What/#option-1-full-test","title":"\ud83d\udd39 Option 1: Full Test","text":"<pre><code>python TestAll.py\n</code></pre> <p>This command will:</p> <ul> <li>Call all HardView functions</li> <li>Print execution times for each function</li> </ul>"},{"location":"What/#option-2-quick-colorful-test","title":"\ud83d\udd38 Option 2: Quick &amp; Colorful Test","text":"<pre><code>python Test.py\n</code></pre> <p>This script uses the rich library to display a visually appealing and colorful output in the console.</p> <p>\ud83d\udca1 Note: Make sure the <code>rich</code> library is installed:</p> <p><pre><code>pip install rich\n</code></pre> \ud83d\udcc1 Scripts location:</p> <p>TestALL.py</p> <p>test.py</p> <p>For more details, refer to files inside the <code>docs/</code> folder.</p>"}]}